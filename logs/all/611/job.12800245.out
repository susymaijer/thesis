Starting at Mon Oct 31 16:06:19 CET 2022
Running on hosts: res-hpc-lkeb06
Running on 1 nodes.
Running 1 tasks.
CPUs on node: 8.
Account: div2-lkeb
Job ID: 12800245
Job name: PancreasAll
Node running script: res-hpc-lkeb06
Submit host: res-hpc-lo02.researchlumc.nl
GPUS: 0 or 
Mon Nov  7 10:36:34 2022       
+-----------------------------------------------------------------------------+
| NVIDIA-SMI 470.141.03   Driver Version: 470.141.03   CUDA Version: 11.4     |
|-------------------------------+----------------------+----------------------+
| GPU  Name        Persistence-M| Bus-Id        Disp.A | Volatile Uncorr. ECC |
| Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. |
|                               |                      |               MIG M. |
|===============================+======================+======================|
|   0  Quadro RTX 6000     Off  | 00000000:AF:00.0 Off |                  Off |
| 34%   29C    P0    68W / 260W |      0MiB / 24220MiB |      4%      Default |
|                               |                      |                  N/A |
+-------------------------------+----------------------+----------------------+
                                                                               
+-----------------------------------------------------------------------------+
| Processes:                                                                  |
|  GPU   GI   CI        PID   Type   Process name                  GPU Memory |
|        ID   ID                                                   Usage      |
|=============================================================================|
|  No running processes found                                                 |
+-----------------------------------------------------------------------------+
Current working directory is /home/smaijer
Load all modules..
Done with loading all modules. Modules:
Activate conda env nnunet..
Verifying environment variables:
Installing hidden layer and nnUnet..
Collecting hiddenlayer
  Cloning https://github.com/FabianIsensee/hiddenlayer.git (to revision more_plotted_details) to /tmp/pip-install-1zistk04/hiddenlayer_510f9fa8c1da4346ae59152f7dc03d66
  Resolved https://github.com/FabianIsensee/hiddenlayer.git to commit 4b98f9e5cccebac67368f02b95f4700b522345b1
Using legacy 'setup.py install' for hiddenlayer, since package 'wheel' is not installed.
Installing collected packages: hiddenlayer
    Running setup.py install for hiddenlayer: started
    Running setup.py install for hiddenlayer: finished with status 'done'
Successfully installed hiddenlayer-0.2
Postprocessing with default plans


Please cite the following paper when using nnUNet:

Isensee, F., Jaeger, P.F., Kohl, S.A.A. et al. "nnU-Net: a self-configuring method for deep learning-based biomedical image segmentation." Nat Methods (2020). https://doi.org/10.1038/s41592-020-01008-z


If you have questions or suggestions, feel free to open an issue at https://github.com/MIC-DKFZ/nnUNet

Foreground vs background
before: 0.7873410268988874
after:  0.8218517974271271
Removing all but the largest foreground region improved results!
for_which_classes [1]
min_valid_object_sizes None
Only one class present, no need to do each class separately as this is covered in fg vs bg
done
for which classes:
[[1]]
min_object_sizes
None
done
Done postprocessing! Now start inferencing its own train and test files.


Please cite the following paper when using nnUNet:

Isensee, F., Jaeger, P.F., Kohl, S.A.A. et al. "nnU-Net: a self-configuring method for deep learning-based biomedical image segmentation." Nat Methods (2020). https://doi.org/10.1038/s41592-020-01008-z


If you have questions or suggestions, feel free to open an issue at https://github.com/MIC-DKFZ/nnUNet

using model stored in  /exports/lkeb-hpc/smaijer/results/nnUNet/3d_fullres/Task611/nnUNetTrainerV2__nnUNetPlansv2.1
This model expects 1 input modalities for each image
Found 8 unique case ids, here are some examples: ['panc_00007' 'panc_00004' 'panc_00000' 'panc_00004' 'panc_00005'
 'panc_00000' 'panc_00000' 'panc_00003']
If they don't look right, make sure to double check your filenames. They must end with _0000.nii.gz etc
number of cases: 8
number of cases that still need to be predicted: 8
emptying cuda cache
loading parameters for folds, None
folds is None so we will automatically look for output folders (not using 'all'!)
found the following folds:  ['/exports/lkeb-hpc/smaijer/results/nnUNet/3d_fullres/Task611/nnUNetTrainerV2__nnUNetPlansv2.1/fold_0', '/exports/lkeb-hpc/smaijer/results/nnUNet/3d_fullres/Task611/nnUNetTrainerV2__nnUNetPlansv2.1/fold_1', '/exports/lkeb-hpc/smaijer/results/nnUNet/3d_fullres/Task611/nnUNetTrainerV2__nnUNetPlansv2.1/fold_2', '/exports/lkeb-hpc/smaijer/results/nnUNet/3d_fullres/Task611/nnUNetTrainerV2__nnUNetPlansv2.1/fold_3', '/exports/lkeb-hpc/smaijer/results/nnUNet/3d_fullres/Task611/nnUNetTrainerV2__nnUNetPlansv2.1/fold_4']
Suus1 - Initialise de NetworkTrainer
Suus2 - Initialise de nnUNetTrainer
Suus3 - Initialise de nnUNetTrainerV2
Suus5 - zet de plans properties
Suus4 - Initialise de trainer echt
Suus5 - zet de plans properties
Suus6 - Zet de data augmentation params
2022-11-07 10:38:43.084664: Using dummy2d data augmentation
Suus7 - zet deep supervision weights die de meerdere outputs prioriteit geven
Suus8 - Maak network aan (BELANGRIJK!)
SuusB - first stride 
Suus10 - StackedConvLayers, input: 1 en output: 32, first_stride: None, num_convs: 2, conv_kwargs: {'stride': 1, 'dilation': 1, 'bias': True, 'kernel_size': [1, 3, 3], 'padding': [0, 1, 1]}
SuusA - first_stride [1, 2, 2]
Suus10 - StackedConvLayers, input: 32 en output: 64, first_stride: [1, 2, 2], num_convs: 2, conv_kwargs: {'stride': 1, 'dilation': 1, 'bias': True, 'kernel_size': [1, 3, 3], 'padding': [0, 1, 1]}
SuusA - first_stride [1, 2, 2]
Suus10 - StackedConvLayers, input: 64 en output: 128, first_stride: [1, 2, 2], num_convs: 2, conv_kwargs: {'stride': 1, 'dilation': 1, 'bias': True, 'kernel_size': [3, 3, 3], 'padding': [1, 1, 1]}
SuusA - first_stride [2, 2, 2]
Suus10 - StackedConvLayers, input: 128 en output: 256, first_stride: [2, 2, 2], num_convs: 2, conv_kwargs: {'stride': 1, 'dilation': 1, 'bias': True, 'kernel_size': [3, 3, 3], 'padding': [1, 1, 1]}
SuusA - first_stride [2, 2, 2]
Suus10 - StackedConvLayers, input: 256 en output: 320, first_stride: [2, 2, 2], num_convs: 2, conv_kwargs: {'stride': 1, 'dilation': 1, 'bias': True, 'kernel_size': [3, 3, 3], 'padding': [1, 1, 1]}
SuusA - first_stride [2, 2, 2]
Suus10 - StackedConvLayers, input: 320 en output: 320, first_stride: [2, 2, 2], num_convs: 2, conv_kwargs: {'stride': 1, 'dilation': 1, 'bias': True, 'kernel_size': [3, 3, 3], 'padding': [1, 1, 1]}
Suus10 - StackedConvLayers, input: 320 en output: 320, first_stride: [1, 1, 2], num_convs: 1, conv_kwargs: {'stride': 1, 'dilation': 1, 'bias': True, 'kernel_size': [3, 3, 3], 'padding': [1, 1, 1]}
Suus10 - StackedConvLayers, input: 320 en output: 320, first_stride: None, num_convs: 1, conv_kwargs: {'stride': 1, 'dilation': 1, 'bias': True, 'kernel_size': [3, 3, 3], 'padding': [1, 1, 1]}
Suus10 - StackedConvLayers, input: 640 en output: 320, first_stride: None, num_convs: 1, conv_kwargs: {'stride': 1, 'dilation': 1, 'bias': True, 'kernel_size': [3, 3, 3], 'padding': [1, 1, 1]}
Suus10 - StackedConvLayers, input: 320 en output: 320, first_stride: None, num_convs: 1, conv_kwargs: {'stride': 1, 'dilation': 1, 'bias': True, 'kernel_size': [3, 3, 3], 'padding': [1, 1, 1]}
Suus10 - StackedConvLayers, input: 640 en output: 320, first_stride: None, num_convs: 1, conv_kwargs: {'stride': 1, 'dilation': 1, 'bias': True, 'kernel_size': [3, 3, 3], 'padding': [1, 1, 1]}
Suus10 - StackedConvLayers, input: 320 en output: 320, first_stride: None, num_convs: 1, conv_kwargs: {'stride': 1, 'dilation': 1, 'bias': True, 'kernel_size': [3, 3, 3], 'padding': [1, 1, 1]}
Suus10 - StackedConvLayers, input: 512 en output: 256, first_stride: None, num_convs: 1, conv_kwargs: {'stride': 1, 'dilation': 1, 'bias': True, 'kernel_size': [3, 3, 3], 'padding': [1, 1, 1]}
Suus10 - StackedConvLayers, input: 256 en output: 256, first_stride: None, num_convs: 1, conv_kwargs: {'stride': 1, 'dilation': 1, 'bias': True, 'kernel_size': [3, 3, 3], 'padding': [1, 1, 1]}
Suus10 - StackedConvLayers, input: 256 en output: 128, first_stride: None, num_convs: 1, conv_kwargs: {'stride': 1, 'dilation': 1, 'bias': True, 'kernel_size': [3, 3, 3], 'padding': [1, 1, 1]}
Suus10 - StackedConvLayers, input: 128 en output: 128, first_stride: None, num_convs: 1, conv_kwargs: {'stride': 1, 'dilation': 1, 'bias': True, 'kernel_size': [3, 3, 3], 'padding': [1, 1, 1]}
Suus10 - StackedConvLayers, input: 128 en output: 64, first_stride: None, num_convs: 1, conv_kwargs: {'stride': 1, 'dilation': 1, 'bias': True, 'kernel_size': [3, 3, 3], 'padding': [1, 1, 1]}
Suus10 - StackedConvLayers, input: 64 en output: 64, first_stride: None, num_convs: 1, conv_kwargs: {'stride': 1, 'dilation': 1, 'bias': True, 'kernel_size': [3, 3, 3], 'padding': [1, 1, 1]}
Suus10 - StackedConvLayers, input: 64 en output: 32, first_stride: None, num_convs: 1, conv_kwargs: {'stride': 1, 'dilation': 1, 'bias': True, 'kernel_size': [1, 3, 3], 'padding': [0, 1, 1]}
Suus10 - StackedConvLayers, input: 32 en output: 32, first_stride: None, num_convs: 1, conv_kwargs: {'stride': 1, 'dilation': 1, 'bias': True, 'kernel_size': [1, 3, 3], 'padding': [0, 1, 1]}
Generic_UNet(
  (encoder): Generic_UNETEncoder()
  (decoder): Generic_UNETDecoder()
  (conv_blocks_localization): ModuleList(
    (0): Sequential(
      (0): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(640, 320, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
      (1): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(320, 320, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
    )
    (1): Sequential(
      (0): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(640, 320, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
      (1): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(320, 320, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
    )
    (2): Sequential(
      (0): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(512, 256, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
      (1): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(256, 256, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
    )
    (3): Sequential(
      (0): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(256, 128, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
      (1): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(128, 128, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
    )
    (4): Sequential(
      (0): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(128, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
      (1): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
    )
    (5): Sequential(
      (0): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(64, 32, kernel_size=(1, 3, 3), stride=(1, 1, 1), padding=(0, 1, 1))
            (instnorm): InstanceNorm3d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
      (1): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(32, 32, kernel_size=(1, 3, 3), stride=(1, 1, 1), padding=(0, 1, 1))
            (instnorm): InstanceNorm3d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
    )
  )
  (conv_blocks_context): ModuleList(
    (0): StackedConvLayers(
      (blocks): Sequential(
        (0): ConvDropoutNormNonlin(
          (conv): Conv3d(1, 32, kernel_size=(1, 3, 3), stride=(1, 1, 1), padding=(0, 1, 1))
          (instnorm): InstanceNorm3d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
        )
        (1): ConvDropoutNormNonlin(
          (conv): Conv3d(32, 32, kernel_size=(1, 3, 3), stride=(1, 1, 1), padding=(0, 1, 1))
          (instnorm): InstanceNorm3d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
        )
      )
    )
    (1): StackedConvLayers(
      (blocks): Sequential(
        (0): ConvDropoutNormNonlin(
          (conv): Conv3d(32, 64, kernel_size=(1, 3, 3), stride=(1, 2, 2), padding=(0, 1, 1))
          (instnorm): InstanceNorm3d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
        )
        (1): ConvDropoutNormNonlin(
          (conv): Conv3d(64, 64, kernel_size=(1, 3, 3), stride=(1, 1, 1), padding=(0, 1, 1))
          (instnorm): InstanceNorm3d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
        )
      )
    )
    (2): StackedConvLayers(
      (blocks): Sequential(
        (0): ConvDropoutNormNonlin(
          (conv): Conv3d(64, 128, kernel_size=(3, 3, 3), stride=(1, 2, 2), padding=(1, 1, 1))
          (instnorm): InstanceNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
        )
        (1): ConvDropoutNormNonlin(
          (conv): Conv3d(128, 128, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (instnorm): InstanceNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
        )
      )
    )
    (3): StackedConvLayers(
      (blocks): Sequential(
        (0): ConvDropoutNormNonlin(
          (conv): Conv3d(128, 256, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1))
          (instnorm): InstanceNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
        )
        (1): ConvDropoutNormNonlin(
          (conv): Conv3d(256, 256, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (instnorm): InstanceNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
        )
      )
    )
    (4): StackedConvLayers(
      (blocks): Sequential(
        (0): ConvDropoutNormNonlin(
          (conv): Conv3d(256, 320, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1))
          (instnorm): InstanceNorm3d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
        )
        (1): ConvDropoutNormNonlin(
          (conv): Conv3d(320, 320, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (instnorm): InstanceNorm3d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
        )
      )
    )
    (5): StackedConvLayers(
      (blocks): Sequential(
        (0): ConvDropoutNormNonlin(
          (conv): Conv3d(320, 320, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1))
          (instnorm): InstanceNorm3d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
        )
        (1): ConvDropoutNormNonlin(
          (conv): Conv3d(320, 320, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (instnorm): InstanceNorm3d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
        )
      )
    )
    (6): Sequential(
      (0): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(320, 320, kernel_size=(3, 3, 3), stride=(1, 1, 2), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
      (1): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(320, 320, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
    )
  )
  (td): ModuleList()
  (tu): ModuleList(
    (0): ConvTranspose3d(320, 320, kernel_size=(1, 1, 2), stride=(1, 1, 2), bias=False)
    (1): ConvTranspose3d(320, 320, kernel_size=(2, 2, 2), stride=(2, 2, 2), bias=False)
    (2): ConvTranspose3d(320, 256, kernel_size=(2, 2, 2), stride=(2, 2, 2), bias=False)
    (3): ConvTranspose3d(256, 128, kernel_size=(2, 2, 2), stride=(2, 2, 2), bias=False)
    (4): ConvTranspose3d(128, 64, kernel_size=(1, 2, 2), stride=(1, 2, 2), bias=False)
    (5): ConvTranspose3d(64, 32, kernel_size=(1, 2, 2), stride=(1, 2, 2), bias=False)
  )
  (seg_outputs): ModuleList(
    (0): Conv3d(320, 2, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
    (1): Conv3d(320, 2, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
    (2): Conv3d(256, 2, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
    (3): Conv3d(128, 2, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
    (4): Conv3d(64, 2, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
    (5): Conv3d(32, 2, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
  )
)
using the following model files:  ['/exports/lkeb-hpc/smaijer/results/nnUNet/3d_fullres/Task611/nnUNetTrainerV2__nnUNetPlansv2.1/fold_0/model_final_checkpoint.model', '/exports/lkeb-hpc/smaijer/results/nnUNet/3d_fullres/Task611/nnUNetTrainerV2__nnUNetPlansv2.1/fold_1/model_final_checkpoint.model', '/exports/lkeb-hpc/smaijer/results/nnUNet/3d_fullres/Task611/nnUNetTrainerV2__nnUNetPlansv2.1/fold_2/model_final_checkpoint.model', '/exports/lkeb-hpc/smaijer/results/nnUNet/3d_fullres/Task611/nnUNetTrainerV2__nnUNetPlansv2.1/fold_3/model_final_checkpoint.model', '/exports/lkeb-hpc/smaijer/results/nnUNet/3d_fullres/Task611/nnUNetTrainerV2__nnUNetPlansv2.1/fold_4/model_final_checkpoint.model']
starting preprocessing generator
[Timing] starting preprocessing generator took 3.933906555175781e-05 seconds
starting prediction...
Preprocessing with 6 multithreads
preprocessing /exports/lkeb-hpc/smaijer/output/611/3d_fullres/nnUNetTrainerV2/611/imagesTr/panc_00003.nii.gz
using preprocessor GenericPreprocessor
[Timing] Loading took 0.29033541679382324 seconds
before crop: (1, 40, 320, 320) after crop: (1, 40, 320, 320) spacing: [3.     0.6875 0.6875] 

ff voor mezelf want snap data files niet, hier lengte van data files1
no resampling necessary
no resampling necessary
before: {'spacing': array([3.    , 0.6875, 0.6875]), 'spacing_transposed': array([3.    , 0.6875, 0.6875]), 'data.shape (data is transposed)': (1, 40, 320, 320)} 
after:  {'spacing': array([3.    , 0.6875, 0.6875]), 'data.shape (data is resampled)': (1, 40, 320, 320)} 

[Timing] Preprocessing specifics: loading&cropping took 0.526282787322998, transposing took 2.9087066650390625e-05 and 4.76837158203125e-06, resampling/normalizing took 0.026224851608276367.
[Timing] preprocessing function took 0.5610461235046387 seconds
(1, 40, 320, 320)
[Timing] total time for preprocessing this item is 0.5616850852966309
[Timing] This worker has ended successfully, no errors to report. It took 100.69010853767395 seconds.
preprocessing /exports/lkeb-hpc/smaijer/output/611/3d_fullres/nnUNetTrainerV2/611/imagesTr/panc_00002.nii.gz
using preprocessor GenericPreprocessor
[Timing] Loading took 0.291248083114624 seconds
before crop: (1, 40, 320, 320) after crop: (1, 40, 320, 320) spacing: [3.     0.6875 0.6875] 

ff voor mezelf want snap data files niet, hier lengte van data files1
no resampling necessary
no resampling necessary
before: {'spacing': array([3.    , 0.6875, 0.6875]), 'spacing_transposed': array([3.    , 0.6875, 0.6875]), 'data.shape (data is transposed)': (1, 40, 320, 320)} 
after:  {'spacing': array([3.    , 0.6875, 0.6875]), 'data.shape (data is resampled)': (1, 40, 320, 320)} 

[Timing] Preprocessing specifics: loading&cropping took 0.5474822521209717, transposing took 2.9087066650390625e-05 and 4.0531158447265625e-06, resampling/normalizing took 0.03284621238708496.
[Timing] preprocessing function took 0.6102550029754639 seconds
(1, 40, 320, 320)
[Timing] total time for preprocessing this item is 123.28704023361206
[Timing] This worker has ended successfully, no errors to report. It took 215.1744270324707 seconds.
preprocessing /exports/lkeb-hpc/smaijer/output/611/3d_fullres/nnUNetTrainerV2/611/imagesTr/panc_00005.nii.gz
using preprocessor GenericPreprocessor
[Timing] Loading took 0.25217390060424805 seconds
before crop: (1, 42, 320, 320) after crop: (1, 42, 292, 320) spacing: [3.         0.68493152 0.68493152] 

ff voor mezelf want snap data files niet, hier lengte van data files1
separate z, order in z is 0 order inplane is 3
separate z, order in z is 0 order inplane is 1
before: {'spacing': array([3.        , 0.68493152, 0.68493152]), 'spacing_transposed': array([3.        , 0.68493152, 0.68493152]), 'data.shape (data is transposed)': (1, 42, 292, 320)} 
after:  {'spacing': array([3.    , 0.6875, 0.6875]), 'data.shape (data is resampled)': (1, 42, 291, 319)} 

[Timing] Preprocessing specifics: loading&cropping took 0.512467622756958, transposing took 2.1219253540039062e-05 and 3.5762786865234375e-06, resampling/normalizing took 0.6758465766906738.
[Timing] preprocessing function took 1.192857027053833 seconds
(1, 42, 291, 319)
[Timing] total time for preprocessing this item is 146.14346170425415
[Timing] This worker has ended successfully, no errors to report. It took 352.0031101703644 seconds.
preprocessing /exports/lkeb-hpc/smaijer/output/611/3d_fullres/nnUNetTrainerV2/611/imagesTr/panc_00001.nii.gz
using preprocessor GenericPreprocessor
[Timing] Loading took 0.17554831504821777 seconds
before crop: (1, 40, 320, 320) after crop: (1, 40, 320, 320) spacing: [3.     0.6875 0.6875] 

ff voor mezelf want snap data files niet, hier lengte van data files1
no resampling necessary
no resampling necessary
before: {'spacing': array([3.    , 0.6875, 0.6875]), 'spacing_transposed': array([3.    , 0.6875, 0.6875]), 'data.shape (data is transposed)': (1, 40, 320, 320)} 
after:  {'spacing': array([3.    , 0.6875, 0.6875]), 'data.shape (data is resampled)': (1, 40, 320, 320)} 

[Timing] Preprocessing specifics: loading&cropping took 0.40761637687683105, transposing took 2.002716064453125e-05 and 4.0531158447265625e-06, resampling/normalizing took 0.02697896957397461.
[Timing] preprocessing function took 0.4856393337249756 seconds
(1, 40, 320, 320)
[Timing] total time for preprocessing this item is 0.4864048957824707
preprocessing /exports/lkeb-hpc/smaijer/output/611/3d_fullres/nnUNetTrainerV2/611/imagesTr/panc_00007.nii.gz
using preprocessor GenericPreprocessor
[Timing] Loading took 0.21647238731384277 seconds
before crop: (1, 42, 320, 320) after crop: (1, 42, 292, 320) spacing: [3.         0.68493152 0.68493152] 

ff voor mezelf want snap data files niet, hier lengte van data files1
separate z, order in z is 0 order inplane is 3
separate z, order in z is 0 order inplane is 1
before: {'spacing': array([3.        , 0.68493152, 0.68493152]), 'spacing_transposed': array([3.        , 0.68493152, 0.68493152]), 'data.shape (data is transposed)': (1, 42, 292, 320)} 
after:  {'spacing': array([3.    , 0.6875, 0.6875]), 'data.shape (data is resampled)': (1, 42, 291, 319)} 

[Timing] Preprocessing specifics: loading&cropping took 0.4371449947357178, transposing took 1.4781951904296875e-05 and 1.1920928955078125e-06, resampling/normalizing took 0.6607263088226318.
[Timing] preprocessing function took 1.1283094882965088 seconds
(1, 42, 291, 319)
[Timing] total time for preprocessing this item is 168.6859269142151
[Timing] This worker has ended successfully, no errors to report. It took 375.43700408935547 seconds.
preprocessing /exports/lkeb-hpc/smaijer/output/611/3d_fullres/nnUNetTrainerV2/611/imagesTr/panc_00004.nii.gz
using preprocessor GenericPreprocessor
[Timing] Loading took 0.1970672607421875 seconds
before crop: (1, 35, 512, 512) after crop: (1, 35, 438, 512) spacing: [4.4000001 0.78125   0.78125  ] 

ff voor mezelf want snap data files niet, hier lengte van data files1
separate z, order in z is 0 order inplane is 3
separate z, order in z is 0 order inplane is 1
before: {'spacing': array([4.4000001, 0.78125  , 0.78125  ]), 'spacing_transposed': array([4.4000001, 0.78125  , 0.78125  ]), 'data.shape (data is transposed)': (1, 35, 438, 512)} 
after:  {'spacing': array([3.    , 0.6875, 0.6875]), 'data.shape (data is resampled)': (1, 51, 498, 582)} 

[Timing] Preprocessing specifics: loading&cropping took 0.7513313293457031, transposing took 1.6927719116210938e-05 and 4.0531158447265625e-06, resampling/normalizing took 3.953155040740967.
[Timing] preprocessing function took 4.72904109954834 seconds
(1, 51, 498, 582)
[Timing] total time for preprocessing this item is 192.10478329658508
[Timing] This worker has ended successfully, no errors to report. It took 375.3768606185913 seconds.
preprocessing /exports/lkeb-hpc/smaijer/output/611/3d_fullres/nnUNetTrainerV2/611/imagesTr/panc_00000.nii.gz
using preprocessor GenericPreprocessor
[Timing] Loading took 0.28573036193847656 seconds
before crop: (1, 40, 320, 320) after crop: (1, 40, 318, 320) spacing: [3.     0.6875 0.6875] 

ff voor mezelf want snap data files niet, hier lengte van data files1
no resampling necessary
no resampling necessary
before: {'spacing': array([3.    , 0.6875, 0.6875]), 'spacing_transposed': array([3.    , 0.6875, 0.6875]), 'data.shape (data is transposed)': (1, 40, 318, 320)} 
after:  {'spacing': array([3.    , 0.6875, 0.6875]), 'data.shape (data is resampled)': (1, 40, 318, 320)} 

[Timing] Preprocessing specifics: loading&cropping took 0.5517833232879639, transposing took 2.4557113647460938e-05 and 5.0067901611328125e-06, resampling/normalizing took 0.03737282752990723.
[Timing] preprocessing function took 0.6625876426696777 seconds
(1, 40, 318, 320)
[Timing] total time for preprocessing this item is 123.38768339157104
preprocessing /exports/lkeb-hpc/smaijer/output/611/3d_fullres/nnUNetTrainerV2/611/imagesTr/panc_00006.nii.gz
using preprocessor GenericPreprocessor
[Timing] Loading took 0.26442766189575195 seconds
before crop: (1, 42, 320, 320) after crop: (1, 42, 300, 320) spacing: [3.         0.66666669 0.66666669] 

ff voor mezelf want snap data files niet, hier lengte van data files1
separate z, order in z is 0 order inplane is 3
separate z, order in z is 0 order inplane is 1
before: {'spacing': array([3.        , 0.66666669, 0.66666669]), 'spacing_transposed': array([3.        , 0.66666669, 0.66666669]), 'data.shape (data is transposed)': (1, 42, 300, 320)} 
after:  {'spacing': array([3.    , 0.6875, 0.6875]), 'data.shape (data is resampled)': (1, 42, 291, 310)} 

[Timing] Preprocessing specifics: loading&cropping took 0.4885993003845215, transposing took 3.24249267578125e-05 and 1.9073486328125e-06, resampling/normalizing took 0.6526796817779541.
[Timing] preprocessing function took 1.1667885780334473 seconds
(1, 42, 291, 310)
[Timing] total time for preprocessing this item is 228.6351752281189
[Timing] This worker has ended successfully, no errors to report. It took 375.46332573890686 seconds.
force_separate_z: None interpolation order: 1
no resampling necessary
suus we gaan schrijven naar /exports/lkeb-hpc/smaijer/output/611/3d_fullres/nnUNetTrainerV2/611/imagesTr/panc_00003.nii.gz
[Timing] - Resampling the segmentation to original shape took 0.07047867774963379 seconds
[Timing] - Saving the segmentation took 0.040381431579589844 seconds
force_separate_z: None interpolation order: 1
no resampling necessary
suus we gaan schrijven naar /exports/lkeb-hpc/smaijer/output/611/3d_fullres/nnUNetTrainerV2/611/imagesTr/panc_00000.nii.gz
[Timing] - Resampling the segmentation to original shape took 0.06593084335327148 seconds
[Timing] - Saving the segmentation took 0.02628040313720703 seconds
force_separate_z: None interpolation order: 1
separate z: True lowres axis [0]
separate z, order in z is 0 order inplane is 1
suus we gaan schrijven naar /exports/lkeb-hpc/smaijer/output/611/3d_fullres/nnUNetTrainerV2/611/imagesTr/panc_00007.nii.gz
[Timing] - Resampling the segmentation to original shape took 0.3015577793121338 seconds
[Timing] - Saving the segmentation took 0.027121543884277344 seconds
force_separate_z: None interpolation order: 1
separate z: True lowres axis [0]
separate z, order in z is 0 order inplane is 1
suus we gaan schrijven naar /exports/lkeb-hpc/smaijer/output/611/3d_fullres/nnUNetTrainerV2/611/imagesTr/panc_00006.nii.gz
[Timing] - Resampling the segmentation to original shape took 0.30555272102355957 seconds
[Timing] - Saving the segmentation took 0.05665445327758789 seconds
force_separate_z: None interpolation order: 1
no resampling necessary
suus we gaan schrijven naar /exports/lkeb-hpc/smaijer/output/611/3d_fullres/nnUNetTrainerV2/611/imagesTr/panc_00001.nii.gz
[Timing] - Resampling the segmentation to original shape took 0.07238364219665527 seconds
[Timing] - Saving the segmentation took 0.039977073669433594 seconds
force_separate_z: None interpolation order: 1
no resampling necessary
suus we gaan schrijven naar /exports/lkeb-hpc/smaijer/output/611/3d_fullres/nnUNetTrainerV2/611/imagesTr/panc_00002.nii.gz
[Timing] - Resampling the segmentation to original shape took 0.06679677963256836 seconds
[Timing] - Saving the segmentation took 0.026553869247436523 seconds
force_separate_z: None interpolation order: 1
separate z: True lowres axis [0]
separate z, order in z is 0 order inplane is 1
suus we gaan schrijven naar /exports/lkeb-hpc/smaijer/output/611/3d_fullres/nnUNetTrainerV2/611/imagesTr/panc_00005.nii.gz
[Timing] - Resampling the segmentation to original shape took 0.31888341903686523 seconds
[Timing] - Saving the segmentation took 0.028033733367919922 seconds
force_separate_z: None interpolation order: 1
separate z: True lowres axis [0]
separate z, order in z is 0 order inplane is 1
suus we gaan schrijven naar /exports/lkeb-hpc/smaijer/output/611/3d_fullres/nnUNetTrainerV2/611/imagesTr/panc_00004.nii.gz
[Timing] - Resampling the segmentation to original shape took 1.9501378536224365 seconds
[Timing] - Saving the segmentation took 0.0528111457824707 seconds
predicting /exports/lkeb-hpc/smaijer/output/611/3d_fullres/nnUNetTrainerV2/611/imagesTr/panc_00001.nii.gz
[Timing] loading took 0.07803964614868164 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 40, 320, 320)
patch size: [ 32 224 256]
steps (x, y, and z): [[0, 8], [0, 96], [0, 64]]
number of tiles: 8
computing Gaussian
done
prediction done
[Timing] fold 0 prediction took 82.13231587409973 seconds
[Timing] loading another fold took 0.05439329147338867 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 40, 320, 320)
patch size: [ 32 224 256]
steps (x, y, and z): [[0, 8], [0, 96], [0, 64]]
number of tiles: 8
using precomputed Gaussian
prediction done
[Timing] another fold took 4.439204454421997 seconds
[Timing] loading another fold took 0.054273128509521484 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 40, 320, 320)
patch size: [ 32 224 256]
steps (x, y, and z): [[0, 8], [0, 96], [0, 64]]
number of tiles: 8
using precomputed Gaussian
prediction done
[Timing] another fold took 4.41755747795105 seconds
[Timing] loading another fold took 0.051527976989746094 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 40, 320, 320)
patch size: [ 32 224 256]
steps (x, y, and z): [[0, 8], [0, 96], [0, 64]]
number of tiles: 8
using precomputed Gaussian
prediction done
[Timing] another fold took 4.425536632537842 seconds
[Timing] loading another fold took 0.04643869400024414 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 40, 320, 320)
patch size: [ 32 224 256]
steps (x, y, and z): [[0, 8], [0, 96], [0, 64]]
number of tiles: 8
using precomputed Gaussian
prediction done
[Timing] another fold took 4.453562259674072 seconds
[Timing] normalising with folds took 0.002869844436645508 seconds
[Timing] transposing backwards took 3.409385681152344e-05 seconds
[Timing] full prediction took 100.74071073532104 seconds
predicting /exports/lkeb-hpc/smaijer/output/611/3d_fullres/nnUNetTrainerV2/611/imagesTr/panc_00003.nii.gz
[Timing] loading took 0.04770493507385254 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 40, 320, 320)
patch size: [ 32 224 256]
steps (x, y, and z): [[0, 8], [0, 96], [0, 64]]
number of tiles: 8
using precomputed Gaussian
prediction done
[Timing] fold 0 prediction took 4.442427635192871 seconds
[Timing] loading another fold took 0.04547548294067383 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 40, 320, 320)
patch size: [ 32 224 256]
steps (x, y, and z): [[0, 8], [0, 96], [0, 64]]
number of tiles: 8
using precomputed Gaussian
prediction done
[Timing] another fold took 4.4640655517578125 seconds
[Timing] loading another fold took 0.04607105255126953 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 40, 320, 320)
patch size: [ 32 224 256]
steps (x, y, and z): [[0, 8], [0, 96], [0, 64]]
number of tiles: 8
using precomputed Gaussian
prediction done
[Timing] another fold took 4.469707012176514 seconds
[Timing] loading another fold took 0.04552817344665527 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 40, 320, 320)
patch size: [ 32 224 256]
steps (x, y, and z): [[0, 8], [0, 96], [0, 64]]
number of tiles: 8
using precomputed Gaussian
prediction done
[Timing] another fold took 4.479827404022217 seconds
[Timing] loading another fold took 0.04607081413269043 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 40, 320, 320)
patch size: [ 32 224 256]
steps (x, y, and z): [[0, 8], [0, 96], [0, 64]]
number of tiles: 8
using precomputed Gaussian
prediction done
[Timing] another fold took 4.48227858543396 seconds
[Timing] normalising with folds took 0.00286865234375 seconds
[Timing] transposing backwards took 2.3126602172851562e-05 seconds
[Timing] full prediction took 123.35769844055176 seconds
predicting /exports/lkeb-hpc/smaijer/output/611/3d_fullres/nnUNetTrainerV2/611/imagesTr/panc_00002.nii.gz
[Timing] loading took 0.047039031982421875 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 40, 320, 320)
patch size: [ 32 224 256]
steps (x, y, and z): [[0, 8], [0, 96], [0, 64]]
number of tiles: 8
using precomputed Gaussian
prediction done
[Timing] fold 0 prediction took 4.528027772903442 seconds
[Timing] loading another fold took 0.045841217041015625 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 40, 320, 320)
patch size: [ 32 224 256]
steps (x, y, and z): [[0, 8], [0, 96], [0, 64]]
number of tiles: 8
using precomputed Gaussian
prediction done
[Timing] another fold took 4.516095876693726 seconds
[Timing] loading another fold took 0.04598522186279297 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 40, 320, 320)
patch size: [ 32 224 256]
steps (x, y, and z): [[0, 8], [0, 96], [0, 64]]
number of tiles: 8
using precomputed Gaussian
prediction done
[Timing] another fold took 4.501027345657349 seconds
[Timing] loading another fold took 0.04559326171875 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 40, 320, 320)
patch size: [ 32 224 256]
steps (x, y, and z): [[0, 8], [0, 96], [0, 64]]
number of tiles: 8
using precomputed Gaussian
prediction done
[Timing] another fold took 4.516901254653931 seconds
[Timing] loading another fold took 0.04595780372619629 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 40, 320, 320)
patch size: [ 32 224 256]
steps (x, y, and z): [[0, 8], [0, 96], [0, 64]]
number of tiles: 8
using precomputed Gaussian
prediction done
[Timing] another fold took 4.5211920738220215 seconds
[Timing] normalising with folds took 0.0028541088104248047 seconds
[Timing] transposing backwards took 5.14984130859375e-05 seconds
[Timing] full prediction took 146.23554229736328 seconds
predicting /exports/lkeb-hpc/smaijer/output/611/3d_fullres/nnUNetTrainerV2/611/imagesTr/panc_00000.nii.gz
[Timing] loading took 0.04737424850463867 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 40, 318, 320)
patch size: [ 32 224 256]
steps (x, y, and z): [[0, 8], [0, 94], [0, 64]]
number of tiles: 8
using precomputed Gaussian
prediction done
[Timing] fold 0 prediction took 4.523029565811157 seconds
[Timing] loading another fold took 0.04604458808898926 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 40, 318, 320)
patch size: [ 32 224 256]
steps (x, y, and z): [[0, 8], [0, 94], [0, 64]]
number of tiles: 8
using precomputed Gaussian
prediction done
[Timing] another fold took 4.545637607574463 seconds
[Timing] loading another fold took 0.04588031768798828 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 40, 318, 320)
patch size: [ 32 224 256]
steps (x, y, and z): [[0, 8], [0, 94], [0, 64]]
number of tiles: 8
using precomputed Gaussian
prediction done
[Timing] another fold took 4.527696371078491 seconds
[Timing] loading another fold took 0.045778751373291016 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 40, 318, 320)
patch size: [ 32 224 256]
steps (x, y, and z): [[0, 8], [0, 94], [0, 64]]
number of tiles: 8
using precomputed Gaussian
prediction done
[Timing] another fold took 4.538916349411011 seconds
[Timing] loading another fold took 0.045746803283691406 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 40, 318, 320)
patch size: [ 32 224 256]
steps (x, y, and z): [[0, 8], [0, 94], [0, 64]]
number of tiles: 8
using precomputed Gaussian
prediction done
[Timing] another fold took 4.532477378845215 seconds
[Timing] normalising with folds took 0.0028417110443115234 seconds
[Timing] transposing backwards took 2.002716064453125e-05 seconds
[Timing] full prediction took 169.18158769607544 seconds
predicting /exports/lkeb-hpc/smaijer/output/611/3d_fullres/nnUNetTrainerV2/611/imagesTr/panc_00005.nii.gz
[Timing] loading took 0.0479278564453125 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 42, 291, 319)
patch size: [ 32 224 256]
steps (x, y, and z): [[0, 10], [0, 67], [0, 63]]
number of tiles: 8
using precomputed Gaussian
prediction done
[Timing] fold 0 prediction took 4.538180589675903 seconds
[Timing] loading another fold took 0.04550433158874512 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 42, 291, 319)
patch size: [ 32 224 256]
steps (x, y, and z): [[0, 10], [0, 67], [0, 63]]
number of tiles: 8
using precomputed Gaussian
prediction done
[Timing] another fold took 4.537003517150879 seconds
[Timing] loading another fold took 0.04550337791442871 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 42, 291, 319)
patch size: [ 32 224 256]
steps (x, y, and z): [[0, 10], [0, 67], [0, 63]]
number of tiles: 8
using precomputed Gaussian
prediction done
[Timing] another fold took 4.563807010650635 seconds
[Timing] loading another fold took 0.04573822021484375 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 42, 291, 319)
patch size: [ 32 224 256]
steps (x, y, and z): [[0, 10], [0, 67], [0, 63]]
number of tiles: 8
using precomputed Gaussian
prediction done
[Timing] another fold took 4.550406217575073 seconds
[Timing] loading another fold took 0.04572653770446777 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 42, 291, 319)
patch size: [ 32 224 256]
steps (x, y, and z): [[0, 10], [0, 67], [0, 63]]
number of tiles: 8
using precomputed Gaussian
prediction done
[Timing] another fold took 4.539668321609497 seconds
[Timing] normalising with folds took 0.0027556419372558594 seconds
[Timing] transposing backwards took 3.266334533691406e-05 seconds
[Timing] full prediction took 192.18836498260498 seconds
predicting /exports/lkeb-hpc/smaijer/output/611/3d_fullres/nnUNetTrainerV2/611/imagesTr/panc_00007.nii.gz
[Timing] loading took 0.04913663864135742 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 42, 291, 319)
patch size: [ 32 224 256]
steps (x, y, and z): [[0, 10], [0, 67], [0, 63]]
number of tiles: 8
using precomputed Gaussian
prediction done
[Timing] fold 0 prediction took 4.5464911460876465 seconds
[Timing] loading another fold took 0.045001983642578125 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 42, 291, 319)
patch size: [ 32 224 256]
steps (x, y, and z): [[0, 10], [0, 67], [0, 63]]
number of tiles: 8
using precomputed Gaussian
prediction done
[Timing] another fold took 4.540163040161133 seconds
[Timing] loading another fold took 0.04506278038024902 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 42, 291, 319)
patch size: [ 32 224 256]
steps (x, y, and z): [[0, 10], [0, 67], [0, 63]]
number of tiles: 8
using precomputed Gaussian
prediction done
[Timing] another fold took 4.538352727890015 seconds
[Timing] loading another fold took 0.04518723487854004 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 42, 291, 319)
patch size: [ 32 224 256]
steps (x, y, and z): [[0, 10], [0, 67], [0, 63]]
number of tiles: 8
using precomputed Gaussian
prediction done
[Timing] another fold took 4.545569181442261 seconds
[Timing] loading another fold took 0.04569840431213379 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 42, 291, 319)
patch size: [ 32 224 256]
steps (x, y, and z): [[0, 10], [0, 67], [0, 63]]
number of tiles: 8
using precomputed Gaussian
prediction done
[Timing] another fold took 4.5634543895721436 seconds
[Timing] normalising with folds took 0.0027260780334472656 seconds
[Timing] transposing backwards took 2.288818359375e-05 seconds
[Timing] full prediction took 215.18732070922852 seconds
predicting /exports/lkeb-hpc/smaijer/output/611/3d_fullres/nnUNetTrainerV2/611/imagesTr/panc_00004.nii.gz
[Timing] loading took 0.046182870864868164 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 51, 498, 582)
patch size: [ 32 224 256]
steps (x, y, and z): [[0, 10, 19], [0, 91, 183, 274], [0, 109, 217, 326]]
number of tiles: 48
using precomputed Gaussian
prediction done
[Timing] fold 0 prediction took 27.2615385055542 seconds
[Timing] loading another fold took 0.045250892639160156 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 51, 498, 582)
patch size: [ 32 224 256]
steps (x, y, and z): [[0, 10, 19], [0, 91, 183, 274], [0, 109, 217, 326]]
number of tiles: 48
using precomputed Gaussian
prediction done
[Timing] another fold took 27.2470645904541 seconds
[Timing] loading another fold took 0.045160531997680664 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 51, 498, 582)
patch size: [ 32 224 256]
steps (x, y, and z): [[0, 10, 19], [0, 91, 183, 274], [0, 109, 217, 326]]
number of tiles: 48
using precomputed Gaussian
prediction done
[Timing] another fold took 27.357398986816406 seconds
[Timing] loading another fold took 0.04537200927734375 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 51, 498, 582)
patch size: [ 32 224 256]
steps (x, y, and z): [[0, 10, 19], [0, 91, 183, 274], [0, 109, 217, 326]]
number of tiles: 48
using precomputed Gaussian
prediction done
[Timing] another fold took 27.299577951431274 seconds
[Timing] loading another fold took 0.04524588584899902 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 51, 498, 582)
patch size: [ 32 224 256]
steps (x, y, and z): [[0, 10, 19], [0, 91, 183, 274], [0, 109, 217, 326]]
number of tiles: 48
using precomputed Gaussian
prediction done
[Timing] another fold took 27.380552291870117 seconds
[Timing] normalising with folds took 0.010082721710205078 seconds
[Timing] transposing backwards took 3.600120544433594e-05 seconds
[Timing] full prediction took 352.0511476993561 seconds
predicting /exports/lkeb-hpc/smaijer/output/611/3d_fullres/nnUNetTrainerV2/611/imagesTr/panc_00006.nii.gz
[Timing] loading took 0.04724407196044922 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 42, 291, 310)
patch size: [ 32 224 256]
steps (x, y, and z): [[0, 10], [0, 67], [0, 54]]
number of tiles: 8
using precomputed Gaussian
prediction done
[Timing] fold 0 prediction took 4.666666507720947 seconds
[Timing] loading another fold took 0.04542875289916992 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 42, 291, 310)
patch size: [ 32 224 256]
steps (x, y, and z): [[0, 10], [0, 67], [0, 54]]
number of tiles: 8
using precomputed Gaussian
prediction done
[Timing] another fold took 4.613998651504517 seconds
[Timing] loading another fold took 0.045378923416137695 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 42, 291, 310)
patch size: [ 32 224 256]
steps (x, y, and z): [[0, 10], [0, 67], [0, 54]]
number of tiles: 8
using precomputed Gaussian
prediction done
[Timing] another fold took 4.624081373214722 seconds
[Timing] loading another fold took 0.04569697380065918 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 42, 291, 310)
patch size: [ 32 224 256]
steps (x, y, and z): [[0, 10], [0, 67], [0, 54]]
number of tiles: 8
using precomputed Gaussian
prediction done
[Timing] another fold took 4.591842412948608 seconds
[Timing] loading another fold took 0.04520392417907715 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 42, 291, 310)
patch size: [ 32 224 256]
steps (x, y, and z): [[0, 10], [0, 67], [0, 54]]
number of tiles: 8
using precomputed Gaussian
prediction done
[Timing] another fold took 4.595836639404297 seconds
[Timing] normalising with folds took 0.002630949020385742 seconds
[Timing] transposing backwards took 2.9087066650390625e-05 seconds
[Timing] full prediction took 375.46387553215027 seconds
[Timing] Another preprocessing process done, it took 375.51936173439026 seconds
[Timing] Another preprocessing process done, it took 375.51940536499023 seconds
[Timing] Another preprocessing process done, it took 375.5194249153137 seconds
[Timing] Another preprocessing process done, it took 375.51944279670715 seconds
[Timing] Another preprocessing process done, it took 375.5194571018219 seconds
[Timing] Another preprocessing process done, it took 375.5194754600525 seconds
inference done. Now waiting for the segmentation export to finish...
postprocessing...
[Timing] postprocessing took 0.8863852024078369 seconds


Please cite the following paper when using nnUNet:

Isensee, F., Jaeger, P.F., Kohl, S.A.A. et al. "nnU-Net: a self-configuring method for deep learning-based biomedical image segmentation." Nat Methods (2020). https://doi.org/10.1038/s41592-020-01008-z


If you have questions or suggestions, feel free to open an issue at https://github.com/MIC-DKFZ/nnUNet

using model stored in  /exports/lkeb-hpc/smaijer/results/nnUNet/3d_fullres/Task611/nnUNetTrainerV2__nnUNetPlansv2.1
This model expects 1 input modalities for each image
Done inferencing! Now start the evaluation.


Please cite the following paper when using nnUNet:

Isensee, F., Jaeger, P.F., Kohl, S.A.A. et al. "nnU-Net: a self-configuring method for deep learning-based biomedical image segmentation." Nat Methods (2020). https://doi.org/10.1038/s41592-020-01008-z


If you have questions or suggestions, feel free to open an issue at https://github.com/MIC-DKFZ/nnUNet



Please cite the following paper when using nnUNet:

Isensee, F., Jaeger, P.F., Kohl, S.A.A. et al. "nnU-Net: a self-configuring method for deep learning-based biomedical image segmentation." Nat Methods (2020). https://doi.org/10.1038/s41592-020-01008-z


If you have questions or suggestions, feel free to open an issue at https://github.com/MIC-DKFZ/nnUNet

Program finished with exit code 0 at: Mon Oct 31 16:06:19 CET 2022
