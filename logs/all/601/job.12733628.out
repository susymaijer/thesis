Starting at Thu Oct  6 21:35:50 CEST 2022
Running on hosts: res-hpc-lkeb05
Running on 1 nodes.
Running 1 tasks.
CPUs on node: 8.
Account: div2-lkeb
Job ID: 12733628
Job name: PancreasAll
Node running script: res-hpc-lkeb05
Submit host: res-hpc-lo02.researchlumc.nl
GPUS: 0 or 
Tue Nov  1 08:31:31 2022       
+-----------------------------------------------------------------------------+
| NVIDIA-SMI 470.141.03   Driver Version: 470.141.03   CUDA Version: 11.4     |
|-------------------------------+----------------------+----------------------+
| GPU  Name        Persistence-M| Bus-Id        Disp.A | Volatile Uncorr. ECC |
| Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. |
|                               |                      |               MIG M. |
|===============================+======================+======================|
|   0  Quadro RTX 6000     Off  | 00000000:AF:00.0 Off |                  Off |
| 31%   30C    P0    69W / 260W |      0MiB / 24220MiB |      3%      Default |
|                               |                      |                  N/A |
+-------------------------------+----------------------+----------------------+
                                                                               
+-----------------------------------------------------------------------------+
| Processes:                                                                  |
|  GPU   GI   CI        PID   Type   Process name                  GPU Memory |
|        ID   ID                                                   Usage      |
|=============================================================================|
|  No running processes found                                                 |
+-----------------------------------------------------------------------------+
Current working directory is /home/smaijer
Load all modules..
Done with loading all modules. Modules:
Activate conda env nnunet..
Verifying environment variables:
Installing hidden layer and nnUnet..
Collecting hiddenlayer
  Cloning https://github.com/FabianIsensee/hiddenlayer.git (to revision more_plotted_details) to /tmp/pip-install-bdnqnz50/hiddenlayer_7d154328da3e481493d4ff7e4fec871b
  Resolved https://github.com/FabianIsensee/hiddenlayer.git to commit 4b98f9e5cccebac67368f02b95f4700b522345b1
Using legacy 'setup.py install' for hiddenlayer, since package 'wheel' is not installed.
Installing collected packages: hiddenlayer
    Running setup.py install for hiddenlayer: started
    Running setup.py install for hiddenlayer: finished with status 'done'
Successfully installed hiddenlayer-0.2
Done training all the folds! Now start the same command but with continue option, to generate log files


Please cite the following paper when using nnUNet:

Isensee, F., Jaeger, P.F., Kohl, S.A.A. et al. "nnU-Net: a self-configuring method for deep learning-based biomedical image segmentation." Nat Methods (2020). https://doi.org/10.1038/s41592-020-01008-z


If you have questions or suggestions, feel free to open an issue at https://github.com/MIC-DKFZ/nnUNet

Suus0 - run_training. Args:
Namespace(network='3d_fullres', network_trainer='nnUNetTrainerV2', task='601', fold='0', validation_only=False, continue_training=True, p='nnUNetPlansv2.1', use_compressed_data=False, deterministic=False, npz=False, find_lr=False, valbest=False, fp32=False, val_folder='validation_raw', disable_saving=False, disable_postprocessing_on_folds=False, val_disable_overwrite=False, disable_next_stage_pred=False, pretrained_weights=None)
###############################################
I am running the following nnUNet: 3d_fullres
My trainer class is:  <class 'nnunet.training.network_training.nnUNetTrainerV2.nnUNetTrainerV2'>
For that I will be using the following configuration:
num_classes:  1
modalities:  {0: 'MRI'}
use_mask_for_norm OrderedDict([(0, False)])
keep_only_largest_region None
min_region_size_per_class None
min_size_per_class None
normalization_schemes OrderedDict([(0, 'nonCT')])
stages...

stage:  0
{'batch_size': 2, 'num_pool_per_axis': [4, 5, 5], 'patch_size': array([ 96, 128, 192]), 'median_patient_size_in_voxels': array([167, 226, 319]), 'current_spacing': array([1.70314997, 1.1875    , 1.1875    ]), 'original_spacing': array([1.70314997, 1.1875    , 1.1875    ]), 'do_dummy_2D_data_aug': False, 'pool_op_kernel_sizes': [[2, 2, 2], [2, 2, 2], [2, 2, 2], [2, 2, 2], [1, 2, 2]], 'conv_kernel_sizes': [[3, 3, 3], [3, 3, 3], [3, 3, 3], [3, 3, 3], [3, 3, 3], [3, 3, 3]]}

I am using stage 0 from these plans
I am using sample dice + CE loss

I am using data from this folder:  /exports/lkeb-hpc/smaijer/data/nnUNet_preprocessed/Task601/nnUNetData_plans_v2.1
###############################################
Suus1 - Initialise de NetworkTrainer
Suus2 - Initialise de nnUNetTrainer
Suus3 - Initialise de nnUNetTrainerV2
Suus4 - Initialise de trainer echt
Suus5 - zet de plans properties
Suus6 - Zet de data augmentation params
Suus7 - zet deep supervision weights die de meerdere outputs prioriteit geven
loading dataset
loading all case properties
2022-11-01 08:31:44.932586: Using splits from existing split file: /exports/lkeb-hpc/smaijer/data/nnUNet_preprocessed/Task601/splits_final.pkl
2022-11-01 08:31:44.939132: The split file contains 5 splits.
2022-11-01 08:31:44.940643: Desired fold for training: 0
2022-11-01 08:31:44.941932: This split has 27 training and 7 validation cases.
unpacking dataset
done
Suus8 - Maak network aan (BELANGRIJK!)
SuusB - first stride 
Suus10 - StackedConvLayers, input: 1 en output: 32, first_stride: None, num_convs: 2, conv_kwargs: {'stride': 1, 'dilation': 1, 'bias': True, 'kernel_size': [3, 3, 3], 'padding': [1, 1, 1]}
SuusA - first_stride [2, 2, 2]
Suus10 - StackedConvLayers, input: 32 en output: 64, first_stride: [2, 2, 2], num_convs: 2, conv_kwargs: {'stride': 1, 'dilation': 1, 'bias': True, 'kernel_size': [3, 3, 3], 'padding': [1, 1, 1]}
SuusA - first_stride [2, 2, 2]
Suus10 - StackedConvLayers, input: 64 en output: 128, first_stride: [2, 2, 2], num_convs: 2, conv_kwargs: {'stride': 1, 'dilation': 1, 'bias': True, 'kernel_size': [3, 3, 3], 'padding': [1, 1, 1]}
SuusA - first_stride [2, 2, 2]
Suus10 - StackedConvLayers, input: 128 en output: 256, first_stride: [2, 2, 2], num_convs: 2, conv_kwargs: {'stride': 1, 'dilation': 1, 'bias': True, 'kernel_size': [3, 3, 3], 'padding': [1, 1, 1]}
SuusA - first_stride [2, 2, 2]
Suus10 - StackedConvLayers, input: 256 en output: 320, first_stride: [2, 2, 2], num_convs: 2, conv_kwargs: {'stride': 1, 'dilation': 1, 'bias': True, 'kernel_size': [3, 3, 3], 'padding': [1, 1, 1]}
Suus10 - StackedConvLayers, input: 320 en output: 320, first_stride: [1, 2, 2], num_convs: 1, conv_kwargs: {'stride': 1, 'dilation': 1, 'bias': True, 'kernel_size': [3, 3, 3], 'padding': [1, 1, 1]}
Suus10 - StackedConvLayers, input: 320 en output: 320, first_stride: None, num_convs: 1, conv_kwargs: {'stride': 1, 'dilation': 1, 'bias': True, 'kernel_size': [3, 3, 3], 'padding': [1, 1, 1]}
Suus10 - StackedConvLayers, input: 640 en output: 320, first_stride: None, num_convs: 1, conv_kwargs: {'stride': 1, 'dilation': 1, 'bias': True, 'kernel_size': [3, 3, 3], 'padding': [1, 1, 1]}
Suus10 - StackedConvLayers, input: 320 en output: 320, first_stride: None, num_convs: 1, conv_kwargs: {'stride': 1, 'dilation': 1, 'bias': True, 'kernel_size': [3, 3, 3], 'padding': [1, 1, 1]}
Suus10 - StackedConvLayers, input: 512 en output: 256, first_stride: None, num_convs: 1, conv_kwargs: {'stride': 1, 'dilation': 1, 'bias': True, 'kernel_size': [3, 3, 3], 'padding': [1, 1, 1]}
Suus10 - StackedConvLayers, input: 256 en output: 256, first_stride: None, num_convs: 1, conv_kwargs: {'stride': 1, 'dilation': 1, 'bias': True, 'kernel_size': [3, 3, 3], 'padding': [1, 1, 1]}
Suus10 - StackedConvLayers, input: 256 en output: 128, first_stride: None, num_convs: 1, conv_kwargs: {'stride': 1, 'dilation': 1, 'bias': True, 'kernel_size': [3, 3, 3], 'padding': [1, 1, 1]}
Suus10 - StackedConvLayers, input: 128 en output: 128, first_stride: None, num_convs: 1, conv_kwargs: {'stride': 1, 'dilation': 1, 'bias': True, 'kernel_size': [3, 3, 3], 'padding': [1, 1, 1]}
Suus10 - StackedConvLayers, input: 128 en output: 64, first_stride: None, num_convs: 1, conv_kwargs: {'stride': 1, 'dilation': 1, 'bias': True, 'kernel_size': [3, 3, 3], 'padding': [1, 1, 1]}
Suus10 - StackedConvLayers, input: 64 en output: 64, first_stride: None, num_convs: 1, conv_kwargs: {'stride': 1, 'dilation': 1, 'bias': True, 'kernel_size': [3, 3, 3], 'padding': [1, 1, 1]}
Suus10 - StackedConvLayers, input: 64 en output: 32, first_stride: None, num_convs: 1, conv_kwargs: {'stride': 1, 'dilation': 1, 'bias': True, 'kernel_size': [3, 3, 3], 'padding': [1, 1, 1]}
Suus10 - StackedConvLayers, input: 32 en output: 32, first_stride: None, num_convs: 1, conv_kwargs: {'stride': 1, 'dilation': 1, 'bias': True, 'kernel_size': [3, 3, 3], 'padding': [1, 1, 1]}
Generic_UNet(
  (encoder): Generic_UNETEncoder()
  (decoder): Generic_UNETDecoder()
  (conv_blocks_localization): ModuleList(
    (0): Sequential(
      (0): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(640, 320, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
      (1): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(320, 320, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
    )
    (1): Sequential(
      (0): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(512, 256, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
      (1): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(256, 256, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
    )
    (2): Sequential(
      (0): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(256, 128, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
      (1): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(128, 128, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
    )
    (3): Sequential(
      (0): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(128, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
      (1): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
    )
    (4): Sequential(
      (0): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(64, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
      (1): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(32, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
    )
  )
  (conv_blocks_context): ModuleList(
    (0): StackedConvLayers(
      (blocks): Sequential(
        (0): ConvDropoutNormNonlin(
          (conv): Conv3d(1, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (instnorm): InstanceNorm3d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
        )
        (1): ConvDropoutNormNonlin(
          (conv): Conv3d(32, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (instnorm): InstanceNorm3d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
        )
      )
    )
    (1): StackedConvLayers(
      (blocks): Sequential(
        (0): ConvDropoutNormNonlin(
          (conv): Conv3d(32, 64, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1))
          (instnorm): InstanceNorm3d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
        )
        (1): ConvDropoutNormNonlin(
          (conv): Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (instnorm): InstanceNorm3d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
        )
      )
    )
    (2): StackedConvLayers(
      (blocks): Sequential(
        (0): ConvDropoutNormNonlin(
          (conv): Conv3d(64, 128, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1))
          (instnorm): InstanceNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
        )
        (1): ConvDropoutNormNonlin(
          (conv): Conv3d(128, 128, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (instnorm): InstanceNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
        )
      )
    )
    (3): StackedConvLayers(
      (blocks): Sequential(
        (0): ConvDropoutNormNonlin(
          (conv): Conv3d(128, 256, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1))
          (instnorm): InstanceNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
        )
        (1): ConvDropoutNormNonlin(
          (conv): Conv3d(256, 256, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (instnorm): InstanceNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
        )
      )
    )
    (4): StackedConvLayers(
      (blocks): Sequential(
        (0): ConvDropoutNormNonlin(
          (conv): Conv3d(256, 320, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1))
          (instnorm): InstanceNorm3d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
        )
        (1): ConvDropoutNormNonlin(
          (conv): Conv3d(320, 320, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (instnorm): InstanceNorm3d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
        )
      )
    )
    (5): Sequential(
      (0): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(320, 320, kernel_size=(3, 3, 3), stride=(1, 2, 2), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
      (1): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(320, 320, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
    )
  )
  (td): ModuleList()
  (tu): ModuleList(
    (0): ConvTranspose3d(320, 320, kernel_size=(1, 2, 2), stride=(1, 2, 2), bias=False)
    (1): ConvTranspose3d(320, 256, kernel_size=(2, 2, 2), stride=(2, 2, 2), bias=False)
    (2): ConvTranspose3d(256, 128, kernel_size=(2, 2, 2), stride=(2, 2, 2), bias=False)
    (3): ConvTranspose3d(128, 64, kernel_size=(2, 2, 2), stride=(2, 2, 2), bias=False)
    (4): ConvTranspose3d(64, 32, kernel_size=(2, 2, 2), stride=(2, 2, 2), bias=False)
  )
  (seg_outputs): ModuleList(
    (0): Conv3d(320, 2, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
    (1): Conv3d(256, 2, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
    (2): Conv3d(128, 2, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
    (3): Conv3d(64, 2, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
    (4): Conv3d(32, 2, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
  )
)
SuusA - Load checkpoint (final, latest, best)
2022-11-01 08:31:46.704411: loading checkpoint /exports/lkeb-hpc/smaijer/results/nnUNet/3d_fullres/Task601/nnUNetTrainerV2__nnUNetPlansv2.1/fold_0/model_final_checkpoint.model train= True
SuusB run_training - zet learning rate als  
2022-11-01 08:31:46.980067: Suus1 maybe_update_lr lr: (-0.009511+0.00309j)
SuusC - run_training!
using pin_memory on device 0
using pin_memory on device 0
Suus for now disable cause it breaks the logs
2022-11-01 08:32:05.997821: Unable to plot network architecture:
2022-11-01 08:32:06.039370: local variable 'g' referenced before assignment
2022-11-01 08:32:06.040914: 
printing the network instead:

2022-11-01 08:32:06.068619: Generic_UNet(
  (encoder): Generic_UNETEncoder()
  (decoder): Generic_UNETDecoder()
  (conv_blocks_localization): ModuleList(
    (0): Sequential(
      (0): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(640, 320, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
      (1): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(320, 320, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
    )
    (1): Sequential(
      (0): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(512, 256, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
      (1): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(256, 256, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
    )
    (2): Sequential(
      (0): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(256, 128, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
      (1): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(128, 128, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
    )
    (3): Sequential(
      (0): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(128, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
      (1): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
    )
    (4): Sequential(
      (0): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(64, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
      (1): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(32, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
    )
  )
  (conv_blocks_context): ModuleList(
    (0): StackedConvLayers(
      (blocks): Sequential(
        (0): ConvDropoutNormNonlin(
          (conv): Conv3d(1, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (instnorm): InstanceNorm3d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
        )
        (1): ConvDropoutNormNonlin(
          (conv): Conv3d(32, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (instnorm): InstanceNorm3d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
        )
      )
    )
    (1): StackedConvLayers(
      (blocks): Sequential(
        (0): ConvDropoutNormNonlin(
          (conv): Conv3d(32, 64, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1))
          (instnorm): InstanceNorm3d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
        )
        (1): ConvDropoutNormNonlin(
          (conv): Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (instnorm): InstanceNorm3d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
        )
      )
    )
    (2): StackedConvLayers(
      (blocks): Sequential(
        (0): ConvDropoutNormNonlin(
          (conv): Conv3d(64, 128, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1))
          (instnorm): InstanceNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
        )
        (1): ConvDropoutNormNonlin(
          (conv): Conv3d(128, 128, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (instnorm): InstanceNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
        )
      )
    )
    (3): StackedConvLayers(
      (blocks): Sequential(
        (0): ConvDropoutNormNonlin(
          (conv): Conv3d(128, 256, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1))
          (instnorm): InstanceNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
        )
        (1): ConvDropoutNormNonlin(
          (conv): Conv3d(256, 256, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (instnorm): InstanceNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
        )
      )
    )
    (4): StackedConvLayers(
      (blocks): Sequential(
        (0): ConvDropoutNormNonlin(
          (conv): Conv3d(256, 320, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1))
          (instnorm): InstanceNorm3d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
        )
        (1): ConvDropoutNormNonlin(
          (conv): Conv3d(320, 320, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (instnorm): InstanceNorm3d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
        )
      )
    )
    (5): Sequential(
      (0): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(320, 320, kernel_size=(3, 3, 3), stride=(1, 2, 2), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
      (1): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(320, 320, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
    )
  )
  (td): ModuleList()
  (tu): ModuleList(
    (0): ConvTranspose3d(320, 320, kernel_size=(1, 2, 2), stride=(1, 2, 2), bias=False)
    (1): ConvTranspose3d(320, 256, kernel_size=(2, 2, 2), stride=(2, 2, 2), bias=False)
    (2): ConvTranspose3d(256, 128, kernel_size=(2, 2, 2), stride=(2, 2, 2), bias=False)
    (3): ConvTranspose3d(128, 64, kernel_size=(2, 2, 2), stride=(2, 2, 2), bias=False)
    (4): ConvTranspose3d(64, 32, kernel_size=(2, 2, 2), stride=(2, 2, 2), bias=False)
  )
  (seg_outputs): ModuleList(
    (0): Conv3d(320, 2, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
    (1): Conv3d(256, 2, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
    (2): Conv3d(128, 2, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
    (3): Conv3d(64, 2, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
    (4): Conv3d(32, 2, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
  )
)
2022-11-01 08:32:06.111111: 

2022-11-01 08:32:06.327713: saving checkpoint...
2022-11-01 08:32:07.641131: done, saving took 1.52 seconds
suus panc_0507 voeg toe aan pred_gt tuples voor later
suus panc_0514 voeg toe aan pred_gt tuples voor later
suus panc_0558 voeg toe aan pred_gt tuples voor later
suus panc_0589 voeg toe aan pred_gt tuples voor later
suus panc_0590 voeg toe aan pred_gt tuples voor later
suus panc_0597 voeg toe aan pred_gt tuples voor later
suus panc_0600 voeg toe aan pred_gt tuples voor later
2022-11-01 08:32:08.188583: finished prediction
2022-11-01 08:32:08.192526: evaluation of raw predictions
2022-11-01 08:32:11.792548: determining postprocessing
Foreground vs background
before: 0.8244826882381543
after:  0.8286837892746389
Removing all but the largest foreground region improved results!
for_which_classes [1]
min_valid_object_sizes None
Only one class present, no need to do each class separately as this is covered in fg vs bg
done
for which classes:
[[1]]
min_object_sizes
None
done


Please cite the following paper when using nnUNet:

Isensee, F., Jaeger, P.F., Kohl, S.A.A. et al. "nnU-Net: a self-configuring method for deep learning-based biomedical image segmentation." Nat Methods (2020). https://doi.org/10.1038/s41592-020-01008-z


If you have questions or suggestions, feel free to open an issue at https://github.com/MIC-DKFZ/nnUNet

Suus0 - run_training. Args:
Namespace(network='3d_fullres', network_trainer='nnUNetTrainerV2', task='601', fold='1', validation_only=False, continue_training=True, p='nnUNetPlansv2.1', use_compressed_data=False, deterministic=False, npz=False, find_lr=False, valbest=False, fp32=False, val_folder='validation_raw', disable_saving=False, disable_postprocessing_on_folds=False, val_disable_overwrite=False, disable_next_stage_pred=False, pretrained_weights=None)
###############################################
I am running the following nnUNet: 3d_fullres
My trainer class is:  <class 'nnunet.training.network_training.nnUNetTrainerV2.nnUNetTrainerV2'>
For that I will be using the following configuration:
num_classes:  1
modalities:  {0: 'MRI'}
use_mask_for_norm OrderedDict([(0, False)])
keep_only_largest_region None
min_region_size_per_class None
min_size_per_class None
normalization_schemes OrderedDict([(0, 'nonCT')])
stages...

stage:  0
{'batch_size': 2, 'num_pool_per_axis': [4, 5, 5], 'patch_size': array([ 96, 128, 192]), 'median_patient_size_in_voxels': array([167, 226, 319]), 'current_spacing': array([1.70314997, 1.1875    , 1.1875    ]), 'original_spacing': array([1.70314997, 1.1875    , 1.1875    ]), 'do_dummy_2D_data_aug': False, 'pool_op_kernel_sizes': [[2, 2, 2], [2, 2, 2], [2, 2, 2], [2, 2, 2], [1, 2, 2]], 'conv_kernel_sizes': [[3, 3, 3], [3, 3, 3], [3, 3, 3], [3, 3, 3], [3, 3, 3], [3, 3, 3]]}

I am using stage 0 from these plans
I am using sample dice + CE loss

I am using data from this folder:  /exports/lkeb-hpc/smaijer/data/nnUNet_preprocessed/Task601/nnUNetData_plans_v2.1
###############################################
Suus1 - Initialise de NetworkTrainer
Suus2 - Initialise de nnUNetTrainer
Suus3 - Initialise de nnUNetTrainerV2
Suus4 - Initialise de trainer echt
Suus5 - zet de plans properties
Suus6 - Zet de data augmentation params
Suus7 - zet deep supervision weights die de meerdere outputs prioriteit geven
loading dataset
loading all case properties
2022-11-01 08:32:25.186845: Using splits from existing split file: /exports/lkeb-hpc/smaijer/data/nnUNet_preprocessed/Task601/splits_final.pkl
2022-11-01 08:32:25.193809: The split file contains 5 splits.
2022-11-01 08:32:25.196309: Desired fold for training: 1
2022-11-01 08:32:25.197685: This split has 27 training and 7 validation cases.
unpacking dataset
done
Suus8 - Maak network aan (BELANGRIJK!)
SuusB - first stride 
Suus10 - StackedConvLayers, input: 1 en output: 32, first_stride: None, num_convs: 2, conv_kwargs: {'stride': 1, 'dilation': 1, 'bias': True, 'kernel_size': [3, 3, 3], 'padding': [1, 1, 1]}
SuusA - first_stride [2, 2, 2]
Suus10 - StackedConvLayers, input: 32 en output: 64, first_stride: [2, 2, 2], num_convs: 2, conv_kwargs: {'stride': 1, 'dilation': 1, 'bias': True, 'kernel_size': [3, 3, 3], 'padding': [1, 1, 1]}
SuusA - first_stride [2, 2, 2]
Suus10 - StackedConvLayers, input: 64 en output: 128, first_stride: [2, 2, 2], num_convs: 2, conv_kwargs: {'stride': 1, 'dilation': 1, 'bias': True, 'kernel_size': [3, 3, 3], 'padding': [1, 1, 1]}
SuusA - first_stride [2, 2, 2]
Suus10 - StackedConvLayers, input: 128 en output: 256, first_stride: [2, 2, 2], num_convs: 2, conv_kwargs: {'stride': 1, 'dilation': 1, 'bias': True, 'kernel_size': [3, 3, 3], 'padding': [1, 1, 1]}
SuusA - first_stride [2, 2, 2]
Suus10 - StackedConvLayers, input: 256 en output: 320, first_stride: [2, 2, 2], num_convs: 2, conv_kwargs: {'stride': 1, 'dilation': 1, 'bias': True, 'kernel_size': [3, 3, 3], 'padding': [1, 1, 1]}
Suus10 - StackedConvLayers, input: 320 en output: 320, first_stride: [1, 2, 2], num_convs: 1, conv_kwargs: {'stride': 1, 'dilation': 1, 'bias': True, 'kernel_size': [3, 3, 3], 'padding': [1, 1, 1]}
Suus10 - StackedConvLayers, input: 320 en output: 320, first_stride: None, num_convs: 1, conv_kwargs: {'stride': 1, 'dilation': 1, 'bias': True, 'kernel_size': [3, 3, 3], 'padding': [1, 1, 1]}
Suus10 - StackedConvLayers, input: 640 en output: 320, first_stride: None, num_convs: 1, conv_kwargs: {'stride': 1, 'dilation': 1, 'bias': True, 'kernel_size': [3, 3, 3], 'padding': [1, 1, 1]}
Suus10 - StackedConvLayers, input: 320 en output: 320, first_stride: None, num_convs: 1, conv_kwargs: {'stride': 1, 'dilation': 1, 'bias': True, 'kernel_size': [3, 3, 3], 'padding': [1, 1, 1]}
Suus10 - StackedConvLayers, input: 512 en output: 256, first_stride: None, num_convs: 1, conv_kwargs: {'stride': 1, 'dilation': 1, 'bias': True, 'kernel_size': [3, 3, 3], 'padding': [1, 1, 1]}
Suus10 - StackedConvLayers, input: 256 en output: 256, first_stride: None, num_convs: 1, conv_kwargs: {'stride': 1, 'dilation': 1, 'bias': True, 'kernel_size': [3, 3, 3], 'padding': [1, 1, 1]}
Suus10 - StackedConvLayers, input: 256 en output: 128, first_stride: None, num_convs: 1, conv_kwargs: {'stride': 1, 'dilation': 1, 'bias': True, 'kernel_size': [3, 3, 3], 'padding': [1, 1, 1]}
Suus10 - StackedConvLayers, input: 128 en output: 128, first_stride: None, num_convs: 1, conv_kwargs: {'stride': 1, 'dilation': 1, 'bias': True, 'kernel_size': [3, 3, 3], 'padding': [1, 1, 1]}
Suus10 - StackedConvLayers, input: 128 en output: 64, first_stride: None, num_convs: 1, conv_kwargs: {'stride': 1, 'dilation': 1, 'bias': True, 'kernel_size': [3, 3, 3], 'padding': [1, 1, 1]}
Suus10 - StackedConvLayers, input: 64 en output: 64, first_stride: None, num_convs: 1, conv_kwargs: {'stride': 1, 'dilation': 1, 'bias': True, 'kernel_size': [3, 3, 3], 'padding': [1, 1, 1]}
Suus10 - StackedConvLayers, input: 64 en output: 32, first_stride: None, num_convs: 1, conv_kwargs: {'stride': 1, 'dilation': 1, 'bias': True, 'kernel_size': [3, 3, 3], 'padding': [1, 1, 1]}
Suus10 - StackedConvLayers, input: 32 en output: 32, first_stride: None, num_convs: 1, conv_kwargs: {'stride': 1, 'dilation': 1, 'bias': True, 'kernel_size': [3, 3, 3], 'padding': [1, 1, 1]}
Generic_UNet(
  (encoder): Generic_UNETEncoder()
  (decoder): Generic_UNETDecoder()
  (conv_blocks_localization): ModuleList(
    (0): Sequential(
      (0): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(640, 320, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
      (1): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(320, 320, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
    )
    (1): Sequential(
      (0): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(512, 256, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
      (1): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(256, 256, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
    )
    (2): Sequential(
      (0): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(256, 128, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
      (1): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(128, 128, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
    )
    (3): Sequential(
      (0): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(128, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
      (1): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
    )
    (4): Sequential(
      (0): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(64, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
      (1): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(32, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
    )
  )
  (conv_blocks_context): ModuleList(
    (0): StackedConvLayers(
      (blocks): Sequential(
        (0): ConvDropoutNormNonlin(
          (conv): Conv3d(1, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (instnorm): InstanceNorm3d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
        )
        (1): ConvDropoutNormNonlin(
          (conv): Conv3d(32, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (instnorm): InstanceNorm3d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
        )
      )
    )
    (1): StackedConvLayers(
      (blocks): Sequential(
        (0): ConvDropoutNormNonlin(
          (conv): Conv3d(32, 64, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1))
          (instnorm): InstanceNorm3d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
        )
        (1): ConvDropoutNormNonlin(
          (conv): Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (instnorm): InstanceNorm3d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
        )
      )
    )
    (2): StackedConvLayers(
      (blocks): Sequential(
        (0): ConvDropoutNormNonlin(
          (conv): Conv3d(64, 128, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1))
          (instnorm): InstanceNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
        )
        (1): ConvDropoutNormNonlin(
          (conv): Conv3d(128, 128, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (instnorm): InstanceNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
        )
      )
    )
    (3): StackedConvLayers(
      (blocks): Sequential(
        (0): ConvDropoutNormNonlin(
          (conv): Conv3d(128, 256, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1))
          (instnorm): InstanceNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
        )
        (1): ConvDropoutNormNonlin(
          (conv): Conv3d(256, 256, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (instnorm): InstanceNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
        )
      )
    )
    (4): StackedConvLayers(
      (blocks): Sequential(
        (0): ConvDropoutNormNonlin(
          (conv): Conv3d(256, 320, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1))
          (instnorm): InstanceNorm3d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
        )
        (1): ConvDropoutNormNonlin(
          (conv): Conv3d(320, 320, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (instnorm): InstanceNorm3d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
        )
      )
    )
    (5): Sequential(
      (0): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(320, 320, kernel_size=(3, 3, 3), stride=(1, 2, 2), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
      (1): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(320, 320, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
    )
  )
  (td): ModuleList()
  (tu): ModuleList(
    (0): ConvTranspose3d(320, 320, kernel_size=(1, 2, 2), stride=(1, 2, 2), bias=False)
    (1): ConvTranspose3d(320, 256, kernel_size=(2, 2, 2), stride=(2, 2, 2), bias=False)
    (2): ConvTranspose3d(256, 128, kernel_size=(2, 2, 2), stride=(2, 2, 2), bias=False)
    (3): ConvTranspose3d(128, 64, kernel_size=(2, 2, 2), stride=(2, 2, 2), bias=False)
    (4): ConvTranspose3d(64, 32, kernel_size=(2, 2, 2), stride=(2, 2, 2), bias=False)
  )
  (seg_outputs): ModuleList(
    (0): Conv3d(320, 2, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
    (1): Conv3d(256, 2, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
    (2): Conv3d(128, 2, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
    (3): Conv3d(64, 2, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
    (4): Conv3d(32, 2, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
  )
)
SuusA - Load checkpoint (final, latest, best)
2022-11-01 08:32:26.932374: loading checkpoint /exports/lkeb-hpc/smaijer/results/nnUNet/3d_fullres/Task601/nnUNetTrainerV2__nnUNetPlansv2.1/fold_1/model_latest.model train= True
SuusB run_training - zet learning rate als  
2022-11-01 08:32:27.179860: Suus1 maybe_update_lr lr: (-0.001197+0.000389j)
SuusC - run_training!
using pin_memory on device 0
using pin_memory on device 0
Suus for now disable cause it breaks the logs
2022-11-01 08:32:44.714620: Unable to plot network architecture:
2022-11-01 08:32:44.759693: local variable 'g' referenced before assignment
2022-11-01 08:32:44.761625: 
printing the network instead:

2022-11-01 08:32:44.763074: Generic_UNet(
  (encoder): Generic_UNETEncoder()
  (decoder): Generic_UNETDecoder()
  (conv_blocks_localization): ModuleList(
    (0): Sequential(
      (0): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(640, 320, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
      (1): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(320, 320, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
    )
    (1): Sequential(
      (0): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(512, 256, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
      (1): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(256, 256, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
    )
    (2): Sequential(
      (0): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(256, 128, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
      (1): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(128, 128, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
    )
    (3): Sequential(
      (0): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(128, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
      (1): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
    )
    (4): Sequential(
      (0): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(64, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
      (1): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(32, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
    )
  )
  (conv_blocks_context): ModuleList(
    (0): StackedConvLayers(
      (blocks): Sequential(
        (0): ConvDropoutNormNonlin(
          (conv): Conv3d(1, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (instnorm): InstanceNorm3d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
        )
        (1): ConvDropoutNormNonlin(
          (conv): Conv3d(32, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (instnorm): InstanceNorm3d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
        )
      )
    )
    (1): StackedConvLayers(
      (blocks): Sequential(
        (0): ConvDropoutNormNonlin(
          (conv): Conv3d(32, 64, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1))
          (instnorm): InstanceNorm3d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
        )
        (1): ConvDropoutNormNonlin(
          (conv): Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (instnorm): InstanceNorm3d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
        )
      )
    )
    (2): StackedConvLayers(
      (blocks): Sequential(
        (0): ConvDropoutNormNonlin(
          (conv): Conv3d(64, 128, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1))
          (instnorm): InstanceNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
        )
        (1): ConvDropoutNormNonlin(
          (conv): Conv3d(128, 128, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (instnorm): InstanceNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
        )
      )
    )
    (3): StackedConvLayers(
      (blocks): Sequential(
        (0): ConvDropoutNormNonlin(
          (conv): Conv3d(128, 256, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1))
          (instnorm): InstanceNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
        )
        (1): ConvDropoutNormNonlin(
          (conv): Conv3d(256, 256, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (instnorm): InstanceNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
        )
      )
    )
    (4): StackedConvLayers(
      (blocks): Sequential(
        (0): ConvDropoutNormNonlin(
          (conv): Conv3d(256, 320, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1))
          (instnorm): InstanceNorm3d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
        )
        (1): ConvDropoutNormNonlin(
          (conv): Conv3d(320, 320, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (instnorm): InstanceNorm3d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
        )
      )
    )
    (5): Sequential(
      (0): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(320, 320, kernel_size=(3, 3, 3), stride=(1, 2, 2), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
      (1): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(320, 320, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
    )
  )
  (td): ModuleList()
  (tu): ModuleList(
    (0): ConvTranspose3d(320, 320, kernel_size=(1, 2, 2), stride=(1, 2, 2), bias=False)
    (1): ConvTranspose3d(320, 256, kernel_size=(2, 2, 2), stride=(2, 2, 2), bias=False)
    (2): ConvTranspose3d(256, 128, kernel_size=(2, 2, 2), stride=(2, 2, 2), bias=False)
    (3): ConvTranspose3d(128, 64, kernel_size=(2, 2, 2), stride=(2, 2, 2), bias=False)
    (4): ConvTranspose3d(64, 32, kernel_size=(2, 2, 2), stride=(2, 2, 2), bias=False)
  )
  (seg_outputs): ModuleList(
    (0): Conv3d(320, 2, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
    (1): Conv3d(256, 2, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
    (2): Conv3d(128, 2, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
    (3): Conv3d(64, 2, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
    (4): Conv3d(32, 2, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
  )
)
2022-11-01 08:32:44.767256: 

2022-11-01 08:32:45.029786: saving checkpoint...
2022-11-01 08:32:46.184676: done, saving took 1.42 seconds
panc_0532 (2, 127, 282, 353)
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 127, 282, 353)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 31], [0, 51, 103, 154], [0, 80, 161]]
number of tiles: 24
computing Gaussian
done
prediction done
suus panc_0532 transposed
suus panc_0532 not saving softmax
suus panc_0532 voeg toe aan pred_gt tuples voor later
panc_0538 (2, 113, 285, 353)
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 113, 285, 353)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 17], [0, 52, 105, 157], [0, 80, 161]]
number of tiles: 24
using precomputed Gaussian
prediction done
suus panc_0538 transposed
suus panc_0538 not saving softmax
suus panc_0538 voeg toe aan pred_gt tuples voor later
panc_0540 (2, 117, 250, 316)
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 117, 250, 316)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 21], [0, 61, 122], [0, 62, 124]]
number of tiles: 18
using precomputed Gaussian
prediction done
suus panc_0540 transposed
suus panc_0540 not saving softmax
suus panc_0540 voeg toe aan pred_gt tuples voor later
panc_0554 (2, 208, 156, 354)
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 208, 156, 354)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 37, 75, 112], [0, 28], [0, 81, 162]]
number of tiles: 24
using precomputed Gaussian
prediction done
suus panc_0554 transposed
suus panc_0554 not saving softmax
suus panc_0554 voeg toe aan pred_gt tuples voor later
panc_0580 (2, 222, 152, 319)
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 222, 152, 319)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 42, 84, 126], [0, 24], [0, 64, 127]]
number of tiles: 24
using precomputed Gaussian
prediction done
suus panc_0580 transposed
suus panc_0580 not saving softmax
suus panc_0580 voeg toe aan pred_gt tuples voor later
panc_0585 (2, 127, 258, 319)
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 127, 258, 319)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 31], [0, 43, 87, 130], [0, 64, 127]]
number of tiles: 24
using precomputed Gaussian
prediction done
suus panc_0585 transposed
suus panc_0585 not saving softmax
suus panc_0585 voeg toe aan pred_gt tuples voor later
panc_0586 (2, 263, 182, 307)
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 263, 182, 307)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 42, 84, 125, 167], [0, 54], [0, 58, 115]]
number of tiles: 30
using precomputed Gaussian
prediction done
suus panc_0586 transposed
suus panc_0586 not saving softmax
suus panc_0586 voeg toe aan pred_gt tuples voor later
2022-11-01 08:34:01.620973: finished prediction
2022-11-01 08:34:01.626384: evaluation of raw predictions
2022-11-01 08:34:04.066097: determining postprocessing
Foreground vs background
before: 0.8701998800011724
after:  0.8700506314885373
Only one class present, no need to do each class separately as this is covered in fg vs bg
done
for which classes:
[]
min_object_sizes
None
force_separate_z: None interpolation order: 1
separate z: False lowres axis None
no separate z, order 1
suus we gaan schrijven naar /exports/lkeb-hpc/smaijer/results/nnUNet/3d_fullres/Task601/nnUNetTrainerV2__nnUNetPlansv2.1/fold_1/validation_raw/panc_0532.nii.gz
[Timing] - Resampling the segmentation to original shape took 0.8230686187744141 seconds
[Timing] - Saving the segmentation took 0.052646636962890625 seconds
force_separate_z: None interpolation order: 1
separate z: False lowres axis None
no separate z, order 1
suus we gaan schrijven naar /exports/lkeb-hpc/smaijer/results/nnUNet/3d_fullres/Task601/nnUNetTrainerV2__nnUNetPlansv2.1/fold_1/validation_raw/panc_0538.nii.gz
[Timing] - Resampling the segmentation to original shape took 0.7337000370025635 seconds
[Timing] - Saving the segmentation took 0.06080484390258789 seconds
force_separate_z: None interpolation order: 1
separate z: False lowres axis None
no separate z, order 1
suus we gaan schrijven naar /exports/lkeb-hpc/smaijer/results/nnUNet/3d_fullres/Task601/nnUNetTrainerV2__nnUNetPlansv2.1/fold_1/validation_raw/panc_0540.nii.gz
[Timing] - Resampling the segmentation to original shape took 0.44893884658813477 seconds
[Timing] - Saving the segmentation took 0.03765606880187988 seconds
force_separate_z: None interpolation order: 1
separate z: False lowres axis None
no separate z, order 1
suus we gaan schrijven naar /exports/lkeb-hpc/smaijer/results/nnUNet/3d_fullres/Task601/nnUNetTrainerV2__nnUNetPlansv2.1/fold_1/validation_raw/panc_0580.nii.gz
[Timing] - Resampling the segmentation to original shape took 0.8700621128082275 seconds
[Timing] - Saving the segmentation took 0.05804324150085449 seconds
force_separate_z: None interpolation order: 1
separate z: False lowres axis None
no separate z, order 1
suus we gaan schrijven naar /exports/lkeb-hpc/smaijer/results/nnUNet/3d_fullres/Task601/nnUNetTrainerV2__nnUNetPlansv2.1/fold_1/validation_raw/panc_0554.nii.gz
[Timing] - Resampling the segmentation to original shape took 4.548385381698608 seconds
[Timing] - Saving the segmentation took 0.2597637176513672 seconds
force_separate_z: None interpolation order: 1
separate z: False lowres axis None
no separate z, order 1
suus we gaan schrijven naar /exports/lkeb-hpc/smaijer/results/nnUNet/3d_fullres/Task601/nnUNetTrainerV2__nnUNetPlansv2.1/fold_1/validation_raw/panc_0585.nii.gz
[Timing] - Resampling the segmentation to original shape took 0.7852692604064941 seconds
[Timing] - Saving the segmentation took 0.052039384841918945 seconds
force_separate_z: None interpolation order: 1
separate z: False lowres axis None
no separate z, order 1
suus we gaan schrijven naar /exports/lkeb-hpc/smaijer/results/nnUNet/3d_fullres/Task601/nnUNetTrainerV2__nnUNetPlansv2.1/fold_1/validation_raw/panc_0586.nii.gz
[Timing] - Resampling the segmentation to original shape took 1.5511598587036133 seconds
[Timing] - Saving the segmentation took 0.0845789909362793 seconds
done


Please cite the following paper when using nnUNet:

Isensee, F., Jaeger, P.F., Kohl, S.A.A. et al. "nnU-Net: a self-configuring method for deep learning-based biomedical image segmentation." Nat Methods (2020). https://doi.org/10.1038/s41592-020-01008-z


If you have questions or suggestions, feel free to open an issue at https://github.com/MIC-DKFZ/nnUNet

Suus0 - run_training. Args:
Namespace(network='3d_fullres', network_trainer='nnUNetTrainerV2', task='601', fold='2', validation_only=False, continue_training=True, p='nnUNetPlansv2.1', use_compressed_data=False, deterministic=False, npz=False, find_lr=False, valbest=False, fp32=False, val_folder='validation_raw', disable_saving=False, disable_postprocessing_on_folds=False, val_disable_overwrite=False, disable_next_stage_pred=False, pretrained_weights=None)
###############################################
I am running the following nnUNet: 3d_fullres
My trainer class is:  <class 'nnunet.training.network_training.nnUNetTrainerV2.nnUNetTrainerV2'>
For that I will be using the following configuration:
num_classes:  1
modalities:  {0: 'MRI'}
use_mask_for_norm OrderedDict([(0, False)])
keep_only_largest_region None
min_region_size_per_class None
min_size_per_class None
normalization_schemes OrderedDict([(0, 'nonCT')])
stages...

stage:  0
{'batch_size': 2, 'num_pool_per_axis': [4, 5, 5], 'patch_size': array([ 96, 128, 192]), 'median_patient_size_in_voxels': array([167, 226, 319]), 'current_spacing': array([1.70314997, 1.1875    , 1.1875    ]), 'original_spacing': array([1.70314997, 1.1875    , 1.1875    ]), 'do_dummy_2D_data_aug': False, 'pool_op_kernel_sizes': [[2, 2, 2], [2, 2, 2], [2, 2, 2], [2, 2, 2], [1, 2, 2]], 'conv_kernel_sizes': [[3, 3, 3], [3, 3, 3], [3, 3, 3], [3, 3, 3], [3, 3, 3], [3, 3, 3]]}

I am using stage 0 from these plans
I am using sample dice + CE loss

I am using data from this folder:  /exports/lkeb-hpc/smaijer/data/nnUNet_preprocessed/Task601/nnUNetData_plans_v2.1
###############################################
Suus1 - Initialise de NetworkTrainer
Suus2 - Initialise de nnUNetTrainer
Suus3 - Initialise de nnUNetTrainerV2
Suus4 - Initialise de trainer echt
Suus5 - zet de plans properties
Suus6 - Zet de data augmentation params
Suus7 - zet deep supervision weights die de meerdere outputs prioriteit geven
loading dataset
loading all case properties
2022-11-01 08:34:16.862290: Using splits from existing split file: /exports/lkeb-hpc/smaijer/data/nnUNet_preprocessed/Task601/splits_final.pkl
2022-11-01 08:34:16.871340: The split file contains 5 splits.
2022-11-01 08:34:16.873277: Desired fold for training: 2
2022-11-01 08:34:16.875108: This split has 27 training and 7 validation cases.
unpacking dataset
done
Suus8 - Maak network aan (BELANGRIJK!)
SuusB - first stride 
Suus10 - StackedConvLayers, input: 1 en output: 32, first_stride: None, num_convs: 2, conv_kwargs: {'stride': 1, 'dilation': 1, 'bias': True, 'kernel_size': [3, 3, 3], 'padding': [1, 1, 1]}
SuusA - first_stride [2, 2, 2]
Suus10 - StackedConvLayers, input: 32 en output: 64, first_stride: [2, 2, 2], num_convs: 2, conv_kwargs: {'stride': 1, 'dilation': 1, 'bias': True, 'kernel_size': [3, 3, 3], 'padding': [1, 1, 1]}
SuusA - first_stride [2, 2, 2]
Suus10 - StackedConvLayers, input: 64 en output: 128, first_stride: [2, 2, 2], num_convs: 2, conv_kwargs: {'stride': 1, 'dilation': 1, 'bias': True, 'kernel_size': [3, 3, 3], 'padding': [1, 1, 1]}
SuusA - first_stride [2, 2, 2]
Suus10 - StackedConvLayers, input: 128 en output: 256, first_stride: [2, 2, 2], num_convs: 2, conv_kwargs: {'stride': 1, 'dilation': 1, 'bias': True, 'kernel_size': [3, 3, 3], 'padding': [1, 1, 1]}
SuusA - first_stride [2, 2, 2]
Suus10 - StackedConvLayers, input: 256 en output: 320, first_stride: [2, 2, 2], num_convs: 2, conv_kwargs: {'stride': 1, 'dilation': 1, 'bias': True, 'kernel_size': [3, 3, 3], 'padding': [1, 1, 1]}
Suus10 - StackedConvLayers, input: 320 en output: 320, first_stride: [1, 2, 2], num_convs: 1, conv_kwargs: {'stride': 1, 'dilation': 1, 'bias': True, 'kernel_size': [3, 3, 3], 'padding': [1, 1, 1]}
Suus10 - StackedConvLayers, input: 320 en output: 320, first_stride: None, num_convs: 1, conv_kwargs: {'stride': 1, 'dilation': 1, 'bias': True, 'kernel_size': [3, 3, 3], 'padding': [1, 1, 1]}
Suus10 - StackedConvLayers, input: 640 en output: 320, first_stride: None, num_convs: 1, conv_kwargs: {'stride': 1, 'dilation': 1, 'bias': True, 'kernel_size': [3, 3, 3], 'padding': [1, 1, 1]}
Suus10 - StackedConvLayers, input: 320 en output: 320, first_stride: None, num_convs: 1, conv_kwargs: {'stride': 1, 'dilation': 1, 'bias': True, 'kernel_size': [3, 3, 3], 'padding': [1, 1, 1]}
Suus10 - StackedConvLayers, input: 512 en output: 256, first_stride: None, num_convs: 1, conv_kwargs: {'stride': 1, 'dilation': 1, 'bias': True, 'kernel_size': [3, 3, 3], 'padding': [1, 1, 1]}
Suus10 - StackedConvLayers, input: 256 en output: 256, first_stride: None, num_convs: 1, conv_kwargs: {'stride': 1, 'dilation': 1, 'bias': True, 'kernel_size': [3, 3, 3], 'padding': [1, 1, 1]}
Suus10 - StackedConvLayers, input: 256 en output: 128, first_stride: None, num_convs: 1, conv_kwargs: {'stride': 1, 'dilation': 1, 'bias': True, 'kernel_size': [3, 3, 3], 'padding': [1, 1, 1]}
Suus10 - StackedConvLayers, input: 128 en output: 128, first_stride: None, num_convs: 1, conv_kwargs: {'stride': 1, 'dilation': 1, 'bias': True, 'kernel_size': [3, 3, 3], 'padding': [1, 1, 1]}
Suus10 - StackedConvLayers, input: 128 en output: 64, first_stride: None, num_convs: 1, conv_kwargs: {'stride': 1, 'dilation': 1, 'bias': True, 'kernel_size': [3, 3, 3], 'padding': [1, 1, 1]}
Suus10 - StackedConvLayers, input: 64 en output: 64, first_stride: None, num_convs: 1, conv_kwargs: {'stride': 1, 'dilation': 1, 'bias': True, 'kernel_size': [3, 3, 3], 'padding': [1, 1, 1]}
Suus10 - StackedConvLayers, input: 64 en output: 32, first_stride: None, num_convs: 1, conv_kwargs: {'stride': 1, 'dilation': 1, 'bias': True, 'kernel_size': [3, 3, 3], 'padding': [1, 1, 1]}
Suus10 - StackedConvLayers, input: 32 en output: 32, first_stride: None, num_convs: 1, conv_kwargs: {'stride': 1, 'dilation': 1, 'bias': True, 'kernel_size': [3, 3, 3], 'padding': [1, 1, 1]}
Generic_UNet(
  (encoder): Generic_UNETEncoder()
  (decoder): Generic_UNETDecoder()
  (conv_blocks_localization): ModuleList(
    (0): Sequential(
      (0): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(640, 320, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
      (1): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(320, 320, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
    )
    (1): Sequential(
      (0): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(512, 256, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
      (1): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(256, 256, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
    )
    (2): Sequential(
      (0): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(256, 128, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
      (1): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(128, 128, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
    )
    (3): Sequential(
      (0): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(128, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
      (1): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
    )
    (4): Sequential(
      (0): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(64, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
      (1): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(32, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
    )
  )
  (conv_blocks_context): ModuleList(
    (0): StackedConvLayers(
      (blocks): Sequential(
        (0): ConvDropoutNormNonlin(
          (conv): Conv3d(1, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (instnorm): InstanceNorm3d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
        )
        (1): ConvDropoutNormNonlin(
          (conv): Conv3d(32, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (instnorm): InstanceNorm3d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
        )
      )
    )
    (1): StackedConvLayers(
      (blocks): Sequential(
        (0): ConvDropoutNormNonlin(
          (conv): Conv3d(32, 64, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1))
          (instnorm): InstanceNorm3d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
        )
        (1): ConvDropoutNormNonlin(
          (conv): Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (instnorm): InstanceNorm3d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
        )
      )
    )
    (2): StackedConvLayers(
      (blocks): Sequential(
        (0): ConvDropoutNormNonlin(
          (conv): Conv3d(64, 128, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1))
          (instnorm): InstanceNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
        )
        (1): ConvDropoutNormNonlin(
          (conv): Conv3d(128, 128, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (instnorm): InstanceNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
        )
      )
    )
    (3): StackedConvLayers(
      (blocks): Sequential(
        (0): ConvDropoutNormNonlin(
          (conv): Conv3d(128, 256, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1))
          (instnorm): InstanceNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
        )
        (1): ConvDropoutNormNonlin(
          (conv): Conv3d(256, 256, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (instnorm): InstanceNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
        )
      )
    )
    (4): StackedConvLayers(
      (blocks): Sequential(
        (0): ConvDropoutNormNonlin(
          (conv): Conv3d(256, 320, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1))
          (instnorm): InstanceNorm3d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
        )
        (1): ConvDropoutNormNonlin(
          (conv): Conv3d(320, 320, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (instnorm): InstanceNorm3d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
        )
      )
    )
    (5): Sequential(
      (0): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(320, 320, kernel_size=(3, 3, 3), stride=(1, 2, 2), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
      (1): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(320, 320, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
    )
  )
  (td): ModuleList()
  (tu): ModuleList(
    (0): ConvTranspose3d(320, 320, kernel_size=(1, 2, 2), stride=(1, 2, 2), bias=False)
    (1): ConvTranspose3d(320, 256, kernel_size=(2, 2, 2), stride=(2, 2, 2), bias=False)
    (2): ConvTranspose3d(256, 128, kernel_size=(2, 2, 2), stride=(2, 2, 2), bias=False)
    (3): ConvTranspose3d(128, 64, kernel_size=(2, 2, 2), stride=(2, 2, 2), bias=False)
    (4): ConvTranspose3d(64, 32, kernel_size=(2, 2, 2), stride=(2, 2, 2), bias=False)
  )
  (seg_outputs): ModuleList(
    (0): Conv3d(320, 2, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
    (1): Conv3d(256, 2, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
    (2): Conv3d(128, 2, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
    (3): Conv3d(64, 2, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
    (4): Conv3d(32, 2, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
  )
)
SuusA - Load checkpoint (final, latest, best)
2022-11-01 08:34:18.652747: loading checkpoint /exports/lkeb-hpc/smaijer/results/nnUNet/3d_fullres/Task601/nnUNetTrainerV2__nnUNetPlansv2.1/fold_2/model_best.model train= True
SuusB run_training - zet learning rate als  
2022-11-01 08:34:29.215966: Suus1 maybe_update_lr lr: 0.000747
SuusC - run_training!
using pin_memory on device 0
using pin_memory on device 0
Suus for now disable cause it breaks the logs
2022-11-01 08:34:43.106484: Unable to plot network architecture:
2022-11-01 08:34:43.146116: local variable 'g' referenced before assignment
2022-11-01 08:34:43.179148: 
printing the network instead:

2022-11-01 08:34:43.189958: Generic_UNet(
  (encoder): Generic_UNETEncoder()
  (decoder): Generic_UNETDecoder()
  (conv_blocks_localization): ModuleList(
    (0): Sequential(
      (0): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(640, 320, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
      (1): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(320, 320, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
    )
    (1): Sequential(
      (0): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(512, 256, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
      (1): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(256, 256, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
    )
    (2): Sequential(
      (0): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(256, 128, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
      (1): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(128, 128, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
    )
    (3): Sequential(
      (0): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(128, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
      (1): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
    )
    (4): Sequential(
      (0): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(64, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
      (1): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(32, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
    )
  )
  (conv_blocks_context): ModuleList(
    (0): StackedConvLayers(
      (blocks): Sequential(
        (0): ConvDropoutNormNonlin(
          (conv): Conv3d(1, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (instnorm): InstanceNorm3d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
        )
        (1): ConvDropoutNormNonlin(
          (conv): Conv3d(32, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (instnorm): InstanceNorm3d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
        )
      )
    )
    (1): StackedConvLayers(
      (blocks): Sequential(
        (0): ConvDropoutNormNonlin(
          (conv): Conv3d(32, 64, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1))
          (instnorm): InstanceNorm3d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
        )
        (1): ConvDropoutNormNonlin(
          (conv): Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (instnorm): InstanceNorm3d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
        )
      )
    )
    (2): StackedConvLayers(
      (blocks): Sequential(
        (0): ConvDropoutNormNonlin(
          (conv): Conv3d(64, 128, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1))
          (instnorm): InstanceNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
        )
        (1): ConvDropoutNormNonlin(
          (conv): Conv3d(128, 128, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (instnorm): InstanceNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
        )
      )
    )
    (3): StackedConvLayers(
      (blocks): Sequential(
        (0): ConvDropoutNormNonlin(
          (conv): Conv3d(128, 256, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1))
          (instnorm): InstanceNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
        )
        (1): ConvDropoutNormNonlin(
          (conv): Conv3d(256, 256, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (instnorm): InstanceNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
        )
      )
    )
    (4): StackedConvLayers(
      (blocks): Sequential(
        (0): ConvDropoutNormNonlin(
          (conv): Conv3d(256, 320, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1))
          (instnorm): InstanceNorm3d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
        )
        (1): ConvDropoutNormNonlin(
          (conv): Conv3d(320, 320, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (instnorm): InstanceNorm3d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
        )
      )
    )
    (5): Sequential(
      (0): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(320, 320, kernel_size=(3, 3, 3), stride=(1, 2, 2), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
      (1): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(320, 320, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
    )
  )
  (td): ModuleList()
  (tu): ModuleList(
    (0): ConvTranspose3d(320, 320, kernel_size=(1, 2, 2), stride=(1, 2, 2), bias=False)
    (1): ConvTranspose3d(320, 256, kernel_size=(2, 2, 2), stride=(2, 2, 2), bias=False)
    (2): ConvTranspose3d(256, 128, kernel_size=(2, 2, 2), stride=(2, 2, 2), bias=False)
    (3): ConvTranspose3d(128, 64, kernel_size=(2, 2, 2), stride=(2, 2, 2), bias=False)
    (4): ConvTranspose3d(64, 32, kernel_size=(2, 2, 2), stride=(2, 2, 2), bias=False)
  )
  (seg_outputs): ModuleList(
    (0): Conv3d(320, 2, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
    (1): Conv3d(256, 2, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
    (2): Conv3d(128, 2, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
    (3): Conv3d(64, 2, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
    (4): Conv3d(32, 2, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
  )
)
2022-11-01 08:34:43.195664: 

2022-11-01 08:34:43.201279: 
epoch:  472
2022-11-01 08:36:43.123312: train loss : -1.8102
2022-11-01 08:36:57.062817: validation loss: -1.7548
2022-11-01 08:36:57.097328: Average global foreground Dice: [0.9028]
2022-11-01 08:36:57.135164: (interpret this as an estimate for the Dice of the different classes. This is not exact.)
2022-11-01 08:36:58.660008: Suus1 maybe_update_lr lr: 0.000723
2022-11-01 08:36:58.689086: saving best epoch checkpoint...
2022-11-01 08:36:58.808999: saving checkpoint...
2022-11-01 08:36:59.929462: done, saving took 1.19 seconds
2022-11-01 08:36:59.974392: This epoch took 136.771156 s

2022-11-01 08:36:59.995139: 
epoch:  473
2022-11-01 08:38:39.618271: train loss : -1.8069
2022-11-01 08:38:49.977643: validation loss: -1.7167
2022-11-01 08:38:50.013551: Average global foreground Dice: [0.8965]
2022-11-01 08:38:50.046847: (interpret this as an estimate for the Dice of the different classes. This is not exact.)
2022-11-01 08:38:51.265145: Suus1 maybe_update_lr lr: 0.000699
2022-11-01 08:38:51.284604: This epoch took 111.286226 s

2022-11-01 08:38:51.292877: 
epoch:  474
2022-11-01 08:40:38.182565: train loss : -1.7991
2022-11-01 08:40:47.613285: validation loss: -1.7090
2022-11-01 08:40:47.680372: Average global foreground Dice: [0.8945]
2022-11-01 08:40:47.717497: (interpret this as an estimate for the Dice of the different classes. This is not exact.)
2022-11-01 08:40:48.568655: Suus1 maybe_update_lr lr: 0.000675
2022-11-01 08:40:48.591224: This epoch took 117.278127 s

2022-11-01 08:40:48.623092: 
epoch:  475
2022-11-01 08:42:32.067064: train loss : -1.7982
2022-11-01 08:42:41.951457: validation loss: -1.6855
2022-11-01 08:42:41.986528: Average global foreground Dice: [0.8919]
2022-11-01 08:42:42.022610: (interpret this as an estimate for the Dice of the different classes. This is not exact.)
2022-11-01 08:42:43.834696: Suus1 maybe_update_lr lr: 0.00065
2022-11-01 08:42:43.871546: This epoch took 115.215422 s

2022-11-01 08:42:43.902087: 
epoch:  476
2022-11-01 08:44:29.502209: train loss : -1.7997
2022-11-01 08:44:40.607493: validation loss: -1.7406
2022-11-01 08:44:40.651319: Average global foreground Dice: [0.9018]
2022-11-01 08:44:40.653776: (interpret this as an estimate for the Dice of the different classes. This is not exact.)
2022-11-01 08:44:42.192111: Suus1 maybe_update_lr lr: 0.000626
2022-11-01 08:44:42.193945: This epoch took 118.248876 s

2022-11-01 08:44:42.195248: 
epoch:  477
2022-11-01 08:46:35.836087: train loss : -1.7876
2022-11-01 08:46:44.170340: validation loss: -1.7225
2022-11-01 08:46:44.174694: Average global foreground Dice: [0.8909]
2022-11-01 08:46:44.176335: (interpret this as an estimate for the Dice of the different classes. This is not exact.)
2022-11-01 08:46:44.699176: Suus1 maybe_update_lr lr: 0.000601
2022-11-01 08:46:44.701375: This epoch took 122.504747 s

2022-11-01 08:46:44.703307: 
epoch:  478
2022-11-01 08:48:31.332118: train loss : -1.8078
2022-11-01 08:48:41.023927: validation loss: -1.7415
2022-11-01 08:48:41.060298: Average global foreground Dice: [0.8952]
2022-11-01 08:48:41.100304: (interpret this as an estimate for the Dice of the different classes. This is not exact.)
2022-11-01 08:48:41.877630: Suus1 maybe_update_lr lr: 0.000577
2022-11-01 08:48:41.900112: This epoch took 117.195358 s

2022-11-01 08:48:41.911651: 
epoch:  479
2022-11-01 08:50:23.168621: train loss : -1.8059
2022-11-01 08:50:34.894347: validation loss: -1.7284
2022-11-01 08:50:34.913241: Average global foreground Dice: [0.8904]
2022-11-01 08:50:34.915031: (interpret this as an estimate for the Dice of the different classes. This is not exact.)
2022-11-01 08:50:36.440118: Suus1 maybe_update_lr lr: 0.000552
2022-11-01 08:50:36.496106: This epoch took 114.569991 s

2022-11-01 08:50:36.545056: 
epoch:  480
2022-11-01 08:52:17.740890: train loss : -1.7848
2022-11-01 08:52:29.502839: validation loss: -1.6799
2022-11-01 08:52:29.555926: Average global foreground Dice: [0.891]
2022-11-01 08:52:29.641094: (interpret this as an estimate for the Dice of the different classes. This is not exact.)
2022-11-01 08:52:30.649035: Suus1 maybe_update_lr lr: 0.000527
2022-11-01 08:52:30.651087: This epoch took 114.073006 s

2022-11-01 08:52:30.653443: 
epoch:  481
2022-11-01 08:54:12.435260: train loss : -1.7938
2022-11-01 08:54:22.794258: validation loss: -1.7387
2022-11-01 08:54:22.877621: Average global foreground Dice: [0.8976]
2022-11-01 08:54:22.932682: (interpret this as an estimate for the Dice of the different classes. This is not exact.)
2022-11-01 08:54:23.786837: Suus1 maybe_update_lr lr: 0.000502
2022-11-01 08:54:23.819173: This epoch took 113.163431 s

2022-11-01 08:54:23.856083: 
epoch:  482
2022-11-01 08:56:03.878553: train loss : -1.7955
2022-11-01 08:56:15.138175: validation loss: -1.7278
2022-11-01 08:56:15.207892: Average global foreground Dice: [0.8926]
2022-11-01 08:56:15.259053: (interpret this as an estimate for the Dice of the different classes. This is not exact.)
2022-11-01 08:56:16.198480: Suus1 maybe_update_lr lr: 0.000477
2022-11-01 08:56:16.239271: This epoch took 112.343096 s

2022-11-01 08:56:16.272089: 
epoch:  483
2022-11-01 08:57:52.453751: train loss : -1.7889
2022-11-01 08:58:04.310190: validation loss: -1.7067
2022-11-01 08:58:05.002839: Average global foreground Dice: [0.8915]
2022-11-01 08:58:05.427531: (interpret this as an estimate for the Dice of the different classes. This is not exact.)
2022-11-01 08:58:06.943617: Suus1 maybe_update_lr lr: 0.000451
2022-11-01 08:58:06.952595: This epoch took 110.633479 s

2022-11-01 08:58:06.954060: 
epoch:  484
2022-11-01 08:59:45.841933: train loss : -1.7999
2022-11-01 08:59:55.993567: validation loss: -1.7334
2022-11-01 08:59:56.054497: Average global foreground Dice: [0.8932]
2022-11-01 08:59:56.084651: (interpret this as an estimate for the Dice of the different classes. This is not exact.)
2022-11-01 08:59:57.114743: Suus1 maybe_update_lr lr: 0.000426
2022-11-01 08:59:57.141900: This epoch took 110.186476 s

2022-11-01 08:59:57.167708: 
epoch:  485
2022-11-01 09:01:36.951400: train loss : -1.8162
2022-11-01 09:01:48.173408: validation loss: -1.7548
2022-11-01 09:01:48.215884: Average global foreground Dice: [0.8995]
2022-11-01 09:01:48.249149: (interpret this as an estimate for the Dice of the different classes. This is not exact.)
2022-11-01 09:01:49.057904: Suus1 maybe_update_lr lr: 0.0004
2022-11-01 09:01:49.088720: This epoch took 111.882643 s

2022-11-01 09:01:49.114087: 
epoch:  486
2022-11-01 09:03:28.536556: train loss : -1.8160
2022-11-01 09:03:39.174377: validation loss: -1.7252
2022-11-01 09:03:39.201027: Average global foreground Dice: [0.8905]
2022-11-01 09:03:39.219355: (interpret this as an estimate for the Dice of the different classes. This is not exact.)
2022-11-01 09:03:40.089849: Suus1 maybe_update_lr lr: 0.000375
2022-11-01 09:03:40.131332: This epoch took 110.994223 s

2022-11-01 09:03:40.174241: 
epoch:  487
2022-11-01 09:05:21.585793: train loss : -1.7934
2022-11-01 09:05:34.729857: validation loss: -1.6898
2022-11-01 09:05:34.773757: Average global foreground Dice: [0.888]
2022-11-01 09:05:34.801399: (interpret this as an estimate for the Dice of the different classes. This is not exact.)
2022-11-01 09:05:35.996428: Suus1 maybe_update_lr lr: 0.000348
2022-11-01 09:05:36.082895: This epoch took 115.871795 s

2022-11-01 09:05:36.121084: 
epoch:  488
2022-11-01 09:07:21.362614: train loss : -1.8037
2022-11-01 09:07:29.739395: validation loss: -1.7169
2022-11-01 09:07:29.771433: Average global foreground Dice: [0.896]
2022-11-01 09:07:29.802194: (interpret this as an estimate for the Dice of the different classes. This is not exact.)
2022-11-01 09:07:30.520715: Suus1 maybe_update_lr lr: 0.000322
2022-11-01 09:07:30.582153: This epoch took 114.397044 s

2022-11-01 09:07:30.652583: 
epoch:  489
2022-11-01 09:09:09.988688: train loss : -1.7863
2022-11-01 09:09:20.593171: validation loss: -1.7119
2022-11-01 09:09:20.636850: Average global foreground Dice: [0.8927]
2022-11-01 09:09:20.666691: (interpret this as an estimate for the Dice of the different classes. This is not exact.)
2022-11-01 09:09:21.921649: Suus1 maybe_update_lr lr: 0.000296
2022-11-01 09:09:22.009520: This epoch took 111.320349 s

2022-11-01 09:09:22.060250: 
epoch:  490
2022-11-01 09:10:55.441453: train loss : -1.8053
2022-11-01 09:11:07.155661: validation loss: -1.7318
2022-11-01 09:11:07.219048: Average global foreground Dice: [0.886]
2022-11-01 09:11:07.311755: (interpret this as an estimate for the Dice of the different classes. This is not exact.)
2022-11-01 09:11:08.843626: Suus1 maybe_update_lr lr: 0.000269
2022-11-01 09:11:08.845369: This epoch took 106.772278 s

2022-11-01 09:11:08.846816: 
epoch:  491
2022-11-01 09:12:50.697928: train loss : -1.8009
2022-11-01 09:12:58.714414: validation loss: -1.7383
2022-11-01 09:12:58.758756: Average global foreground Dice: [0.8945]
2022-11-01 09:12:58.783158: (interpret this as an estimate for the Dice of the different classes. This is not exact.)
2022-11-01 09:12:59.825925: Suus1 maybe_update_lr lr: 0.000242
2022-11-01 09:12:59.858272: This epoch took 111.010073 s

2022-11-01 09:12:59.883134: 
epoch:  492
2022-11-01 09:14:38.080423: train loss : -1.8088
2022-11-01 09:14:49.047407: validation loss: -1.7415
2022-11-01 09:14:49.102756: Average global foreground Dice: [0.8994]
2022-11-01 09:14:49.112694: (interpret this as an estimate for the Dice of the different classes. This is not exact.)
2022-11-01 09:14:49.964547: Suus1 maybe_update_lr lr: 0.000215
2022-11-01 09:14:50.005431: This epoch took 110.090949 s

2022-11-01 09:14:50.046073: 
epoch:  493
2022-11-01 09:16:30.309362: train loss : -1.8101
2022-11-01 09:16:40.571271: validation loss: -1.7178
2022-11-01 09:16:40.659455: Average global foreground Dice: [0.8962]
2022-11-01 09:16:40.718076: (interpret this as an estimate for the Dice of the different classes. This is not exact.)
2022-11-01 09:16:41.743842: Suus1 maybe_update_lr lr: 0.000187
2022-11-01 09:16:41.804355: This epoch took 111.719203 s

2022-11-01 09:16:41.844535: 
epoch:  494
2022-11-01 09:18:23.536484: train loss : -1.8149
2022-11-01 09:18:34.595064: validation loss: -1.7236
2022-11-01 09:18:34.654591: Average global foreground Dice: [0.8875]
2022-11-01 09:18:34.696083: (interpret this as an estimate for the Dice of the different classes. This is not exact.)
2022-11-01 09:18:35.379085: Suus1 maybe_update_lr lr: 0.000158
2022-11-01 09:18:35.439190: This epoch took 113.559112 s

2022-11-01 09:18:35.490944: 
epoch:  495
2022-11-01 09:20:16.497645: train loss : -1.8029
2022-11-01 09:20:25.794575: validation loss: -1.7021
2022-11-01 09:20:25.815385: Average global foreground Dice: [0.8917]
2022-11-01 09:20:25.829685: (interpret this as an estimate for the Dice of the different classes. This is not exact.)
2022-11-01 09:20:26.500831: Suus1 maybe_update_lr lr: 0.00013
2022-11-01 09:20:26.502929: This epoch took 110.992731 s

2022-11-01 09:20:26.509514: 
epoch:  496
2022-11-01 09:22:13.293432: train loss : -1.8263
2022-11-01 09:22:22.970447: validation loss: -1.7119
2022-11-01 09:22:23.016037: Average global foreground Dice: [0.8987]
2022-11-01 09:22:23.020924: (interpret this as an estimate for the Dice of the different classes. This is not exact.)
2022-11-01 09:22:23.857948: Suus1 maybe_update_lr lr: 0.0001
2022-11-01 09:22:23.859787: This epoch took 117.318511 s

2022-11-01 09:22:23.861214: 
epoch:  497
2022-11-01 09:24:07.789408: train loss : -1.7998
2022-11-01 09:24:18.568306: validation loss: -1.7184
2022-11-01 09:24:18.585946: Average global foreground Dice: [0.891]
2022-11-01 09:24:18.589168: (interpret this as an estimate for the Dice of the different classes. This is not exact.)
2022-11-01 09:24:19.386710: Suus1 maybe_update_lr lr: 6.9e-05
2022-11-01 09:24:19.429676: This epoch took 115.566909 s

2022-11-01 09:24:19.462435: 
epoch:  498
2022-11-01 09:26:08.740973: train loss : -1.7999
2022-11-01 09:26:17.339749: validation loss: -1.7416
2022-11-01 09:26:17.430656: Average global foreground Dice: [0.8949]
2022-11-01 09:26:17.457088: (interpret this as an estimate for the Dice of the different classes. This is not exact.)
2022-11-01 09:26:18.397606: Suus1 maybe_update_lr lr: 3.7e-05
2022-11-01 09:26:18.431148: This epoch took 118.929744 s

2022-11-01 09:26:18.458220: 
epoch:  499
2022-11-01 09:28:00.956658: train loss : -1.8015
2022-11-01 09:28:10.494176: validation loss: -1.7328
2022-11-01 09:28:10.520837: Average global foreground Dice: [0.8889]
2022-11-01 09:28:10.560116: (interpret this as an estimate for the Dice of the different classes. This is not exact.)
2022-11-01 09:28:11.433689: Suus1 maybe_update_lr lr: 0.0
2022-11-01 09:28:11.522079: saving scheduled checkpoint file...
2022-11-01 09:28:11.730504: saving checkpoint...
2022-11-01 09:28:13.006134: done, saving took 1.37 seconds
2022-11-01 09:28:13.063258: done
2022-11-01 09:28:13.096078: This epoch took 114.593910 s

2022-11-01 09:28:13.209057: saving checkpoint...
2022-11-01 09:28:14.309933: done, saving took 1.17 seconds
panc_0548 (2, 127, 258, 318)
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 127, 258, 318)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 31], [0, 43, 87, 130], [0, 63, 126]]
number of tiles: 24
computing Gaussian
done
prediction done
suus panc_0548 transposed
suus panc_0548 not saving softmax
suus panc_0548 voeg toe aan pred_gt tuples voor later
panc_0551 (2, 127, 273, 336)
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 127, 273, 336)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 31], [0, 48, 97, 145], [0, 72, 144]]
number of tiles: 24
using precomputed Gaussian
prediction done
suus panc_0551 transposed
suus panc_0551 not saving softmax
suus panc_0551 voeg toe aan pred_gt tuples voor later
panc_0555 (2, 127, 269, 335)
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 127, 269, 335)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 31], [0, 47, 94, 141], [0, 72, 143]]
number of tiles: 24
using precomputed Gaussian
prediction done
suus panc_0555 transposed
suus panc_0555 not saving softmax
suus panc_0555 voeg toe aan pred_gt tuples voor later
panc_0578 (2, 220, 156, 354)
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 220, 156, 354)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 41, 83, 124], [0, 28], [0, 81, 162]]
number of tiles: 24
using precomputed Gaussian
prediction done
suus panc_0578 transposed
suus panc_0578 not saving softmax
suus panc_0578 voeg toe aan pred_gt tuples voor later
panc_0588 (2, 239, 156, 354)
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 239, 156, 354)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 48, 95, 143], [0, 28], [0, 81, 162]]
number of tiles: 24
using precomputed Gaussian
prediction done
suus panc_0588 transposed
suus panc_0588 not saving softmax
suus panc_0588 voeg toe aan pred_gt tuples voor later
panc_0593 (2, 127, 273, 336)
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 127, 273, 336)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 31], [0, 48, 97, 145], [0, 72, 144]]
number of tiles: 24
using precomputed Gaussian
prediction done
suus panc_0593 transposed
suus panc_0593 not saving softmax
suus panc_0593 voeg toe aan pred_gt tuples voor later
panc_0594 (2, 235, 156, 354)
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 235, 156, 354)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 46, 93, 139], [0, 28], [0, 81, 162]]
number of tiles: 24
using precomputed Gaussian
prediction done
suus panc_0594 transposed
suus panc_0594 not saving softmax
suus panc_0594 voeg toe aan pred_gt tuples voor later
2022-11-01 09:29:31.278488: finished prediction
2022-11-01 09:29:31.281775: evaluation of raw predictions
2022-11-01 09:29:33.812478: determining postprocessing
Foreground vs background
before: 0.9016548758210478
after:  0.9016548758210478
Only one class present, no need to do each class separately as this is covered in fg vs bg
done
for which classes:
[]
min_object_sizes
None
force_separate_z: None interpolation order: 1
separate z: False lowres axis None
no separate z, order 1
suus we gaan schrijven naar /exports/lkeb-hpc/smaijer/results/nnUNet/3d_fullres/Task601/nnUNetTrainerV2__nnUNetPlansv2.1/fold_2/validation_raw/panc_0555.nii.gz
[Timing] - Resampling the segmentation to original shape took 0.6643731594085693 seconds
[Timing] - Saving the segmentation took 0.04435133934020996 seconds
force_separate_z: None interpolation order: 1
separate z: True lowres axis [0]
separate z, order in z is 0 order inplane is 1
suus we gaan schrijven naar /exports/lkeb-hpc/smaijer/results/nnUNet/3d_fullres/Task601/nnUNetTrainerV2__nnUNetPlansv2.1/fold_2/validation_raw/panc_0551.nii.gz
[Timing] - Resampling the segmentation to original shape took 5.4276134967803955 seconds
[Timing] - Saving the segmentation took 0.12418007850646973 seconds
force_separate_z: None interpolation order: 1
separate z: False lowres axis None
no separate z, order 1
suus we gaan schrijven naar /exports/lkeb-hpc/smaijer/results/nnUNet/3d_fullres/Task601/nnUNetTrainerV2__nnUNetPlansv2.1/fold_2/validation_raw/panc_0548.nii.gz
[Timing] - Resampling the segmentation to original shape took 0.8204300403594971 seconds
[Timing] - Saving the segmentation took 0.052396297454833984 seconds
force_separate_z: None interpolation order: 1
separate z: False lowres axis None
no separate z, order 1
suus we gaan schrijven naar /exports/lkeb-hpc/smaijer/results/nnUNet/3d_fullres/Task601/nnUNetTrainerV2__nnUNetPlansv2.1/fold_2/validation_raw/panc_0578.nii.gz
[Timing] - Resampling the segmentation to original shape took 4.83098292350769 seconds
[Timing] - Saving the segmentation took 0.26554274559020996 seconds
force_separate_z: None interpolation order: 1
separate z: False lowres axis None
no separate z, order 1
suus we gaan schrijven naar /exports/lkeb-hpc/smaijer/results/nnUNet/3d_fullres/Task601/nnUNetTrainerV2__nnUNetPlansv2.1/fold_2/validation_raw/panc_0594.nii.gz
[Timing] - Resampling the segmentation to original shape took 5.048898220062256 seconds
[Timing] - Saving the segmentation took 0.2598557472229004 seconds
done


Please cite the following paper when using nnUNet:

Isensee, F., Jaeger, P.F., Kohl, S.A.A. et al. "nnU-Net: a self-configuring method for deep learning-based biomedical image segmentation." Nat Methods (2020). https://doi.org/10.1038/s41592-020-01008-z


If you have questions or suggestions, feel free to open an issue at https://github.com/MIC-DKFZ/nnUNet

Suus0 - run_training. Args:
Namespace(network='3d_fullres', network_trainer='nnUNetTrainerV2', task='601', fold='3', validation_only=False, continue_training=True, p='nnUNetPlansv2.1', use_compressed_data=False, deterministic=False, npz=False, find_lr=False, valbest=False, fp32=False, val_folder='validation_raw', disable_saving=False, disable_postprocessing_on_folds=False, val_disable_overwrite=False, disable_next_stage_pred=False, pretrained_weights=None)
###############################################
I am running the following nnUNet: 3d_fullres
My trainer class is:  <class 'nnunet.training.network_training.nnUNetTrainerV2.nnUNetTrainerV2'>
For that I will be using the following configuration:
num_classes:  1
modalities:  {0: 'MRI'}
use_mask_for_norm OrderedDict([(0, False)])
keep_only_largest_region None
min_region_size_per_class None
min_size_per_class None
normalization_schemes OrderedDict([(0, 'nonCT')])
stages...

stage:  0
{'batch_size': 2, 'num_pool_per_axis': [4, 5, 5], 'patch_size': array([ 96, 128, 192]), 'median_patient_size_in_voxels': array([167, 226, 319]), 'current_spacing': array([1.70314997, 1.1875    , 1.1875    ]), 'original_spacing': array([1.70314997, 1.1875    , 1.1875    ]), 'do_dummy_2D_data_aug': False, 'pool_op_kernel_sizes': [[2, 2, 2], [2, 2, 2], [2, 2, 2], [2, 2, 2], [1, 2, 2]], 'conv_kernel_sizes': [[3, 3, 3], [3, 3, 3], [3, 3, 3], [3, 3, 3], [3, 3, 3], [3, 3, 3]]}

I am using stage 0 from these plans
I am using sample dice + CE loss

I am using data from this folder:  /exports/lkeb-hpc/smaijer/data/nnUNet_preprocessed/Task601/nnUNetData_plans_v2.1
###############################################
Suus1 - Initialise de NetworkTrainer
Suus2 - Initialise de nnUNetTrainer
Suus3 - Initialise de nnUNetTrainerV2
Suus4 - Initialise de trainer echt
Suus5 - zet de plans properties
Suus6 - Zet de data augmentation params
Suus7 - zet deep supervision weights die de meerdere outputs prioriteit geven
loading dataset
loading all case properties
2022-11-01 09:29:47.354030: Using splits from existing split file: /exports/lkeb-hpc/smaijer/data/nnUNet_preprocessed/Task601/splits_final.pkl
2022-11-01 09:29:47.361510: The split file contains 5 splits.
2022-11-01 09:29:47.363381: Desired fold for training: 3
2022-11-01 09:29:47.365134: This split has 27 training and 7 validation cases.
unpacking dataset
done
Suus8 - Maak network aan (BELANGRIJK!)
SuusB - first stride 
Suus10 - StackedConvLayers, input: 1 en output: 32, first_stride: None, num_convs: 2, conv_kwargs: {'stride': 1, 'dilation': 1, 'bias': True, 'kernel_size': [3, 3, 3], 'padding': [1, 1, 1]}
SuusA - first_stride [2, 2, 2]
Suus10 - StackedConvLayers, input: 32 en output: 64, first_stride: [2, 2, 2], num_convs: 2, conv_kwargs: {'stride': 1, 'dilation': 1, 'bias': True, 'kernel_size': [3, 3, 3], 'padding': [1, 1, 1]}
SuusA - first_stride [2, 2, 2]
Suus10 - StackedConvLayers, input: 64 en output: 128, first_stride: [2, 2, 2], num_convs: 2, conv_kwargs: {'stride': 1, 'dilation': 1, 'bias': True, 'kernel_size': [3, 3, 3], 'padding': [1, 1, 1]}
SuusA - first_stride [2, 2, 2]
Suus10 - StackedConvLayers, input: 128 en output: 256, first_stride: [2, 2, 2], num_convs: 2, conv_kwargs: {'stride': 1, 'dilation': 1, 'bias': True, 'kernel_size': [3, 3, 3], 'padding': [1, 1, 1]}
SuusA - first_stride [2, 2, 2]
Suus10 - StackedConvLayers, input: 256 en output: 320, first_stride: [2, 2, 2], num_convs: 2, conv_kwargs: {'stride': 1, 'dilation': 1, 'bias': True, 'kernel_size': [3, 3, 3], 'padding': [1, 1, 1]}
Suus10 - StackedConvLayers, input: 320 en output: 320, first_stride: [1, 2, 2], num_convs: 1, conv_kwargs: {'stride': 1, 'dilation': 1, 'bias': True, 'kernel_size': [3, 3, 3], 'padding': [1, 1, 1]}
Suus10 - StackedConvLayers, input: 320 en output: 320, first_stride: None, num_convs: 1, conv_kwargs: {'stride': 1, 'dilation': 1, 'bias': True, 'kernel_size': [3, 3, 3], 'padding': [1, 1, 1]}
Suus10 - StackedConvLayers, input: 640 en output: 320, first_stride: None, num_convs: 1, conv_kwargs: {'stride': 1, 'dilation': 1, 'bias': True, 'kernel_size': [3, 3, 3], 'padding': [1, 1, 1]}
Suus10 - StackedConvLayers, input: 320 en output: 320, first_stride: None, num_convs: 1, conv_kwargs: {'stride': 1, 'dilation': 1, 'bias': True, 'kernel_size': [3, 3, 3], 'padding': [1, 1, 1]}
Suus10 - StackedConvLayers, input: 512 en output: 256, first_stride: None, num_convs: 1, conv_kwargs: {'stride': 1, 'dilation': 1, 'bias': True, 'kernel_size': [3, 3, 3], 'padding': [1, 1, 1]}
Suus10 - StackedConvLayers, input: 256 en output: 256, first_stride: None, num_convs: 1, conv_kwargs: {'stride': 1, 'dilation': 1, 'bias': True, 'kernel_size': [3, 3, 3], 'padding': [1, 1, 1]}
Suus10 - StackedConvLayers, input: 256 en output: 128, first_stride: None, num_convs: 1, conv_kwargs: {'stride': 1, 'dilation': 1, 'bias': True, 'kernel_size': [3, 3, 3], 'padding': [1, 1, 1]}
Suus10 - StackedConvLayers, input: 128 en output: 128, first_stride: None, num_convs: 1, conv_kwargs: {'stride': 1, 'dilation': 1, 'bias': True, 'kernel_size': [3, 3, 3], 'padding': [1, 1, 1]}
Suus10 - StackedConvLayers, input: 128 en output: 64, first_stride: None, num_convs: 1, conv_kwargs: {'stride': 1, 'dilation': 1, 'bias': True, 'kernel_size': [3, 3, 3], 'padding': [1, 1, 1]}
Suus10 - StackedConvLayers, input: 64 en output: 64, first_stride: None, num_convs: 1, conv_kwargs: {'stride': 1, 'dilation': 1, 'bias': True, 'kernel_size': [3, 3, 3], 'padding': [1, 1, 1]}
Suus10 - StackedConvLayers, input: 64 en output: 32, first_stride: None, num_convs: 1, conv_kwargs: {'stride': 1, 'dilation': 1, 'bias': True, 'kernel_size': [3, 3, 3], 'padding': [1, 1, 1]}
Suus10 - StackedConvLayers, input: 32 en output: 32, first_stride: None, num_convs: 1, conv_kwargs: {'stride': 1, 'dilation': 1, 'bias': True, 'kernel_size': [3, 3, 3], 'padding': [1, 1, 1]}
Generic_UNet(
  (encoder): Generic_UNETEncoder()
  (decoder): Generic_UNETDecoder()
  (conv_blocks_localization): ModuleList(
    (0): Sequential(
      (0): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(640, 320, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
      (1): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(320, 320, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
    )
    (1): Sequential(
      (0): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(512, 256, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
      (1): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(256, 256, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
    )
    (2): Sequential(
      (0): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(256, 128, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
      (1): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(128, 128, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
    )
    (3): Sequential(
      (0): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(128, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
      (1): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
    )
    (4): Sequential(
      (0): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(64, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
      (1): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(32, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
    )
  )
  (conv_blocks_context): ModuleList(
    (0): StackedConvLayers(
      (blocks): Sequential(
        (0): ConvDropoutNormNonlin(
          (conv): Conv3d(1, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (instnorm): InstanceNorm3d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
        )
        (1): ConvDropoutNormNonlin(
          (conv): Conv3d(32, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (instnorm): InstanceNorm3d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
        )
      )
    )
    (1): StackedConvLayers(
      (blocks): Sequential(
        (0): ConvDropoutNormNonlin(
          (conv): Conv3d(32, 64, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1))
          (instnorm): InstanceNorm3d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
        )
        (1): ConvDropoutNormNonlin(
          (conv): Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (instnorm): InstanceNorm3d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
        )
      )
    )
    (2): StackedConvLayers(
      (blocks): Sequential(
        (0): ConvDropoutNormNonlin(
          (conv): Conv3d(64, 128, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1))
          (instnorm): InstanceNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
        )
        (1): ConvDropoutNormNonlin(
          (conv): Conv3d(128, 128, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (instnorm): InstanceNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
        )
      )
    )
    (3): StackedConvLayers(
      (blocks): Sequential(
        (0): ConvDropoutNormNonlin(
          (conv): Conv3d(128, 256, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1))
          (instnorm): InstanceNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
        )
        (1): ConvDropoutNormNonlin(
          (conv): Conv3d(256, 256, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (instnorm): InstanceNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
        )
      )
    )
    (4): StackedConvLayers(
      (blocks): Sequential(
        (0): ConvDropoutNormNonlin(
          (conv): Conv3d(256, 320, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1))
          (instnorm): InstanceNorm3d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
        )
        (1): ConvDropoutNormNonlin(
          (conv): Conv3d(320, 320, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (instnorm): InstanceNorm3d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
        )
      )
    )
    (5): Sequential(
      (0): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(320, 320, kernel_size=(3, 3, 3), stride=(1, 2, 2), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
      (1): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(320, 320, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
    )
  )
  (td): ModuleList()
  (tu): ModuleList(
    (0): ConvTranspose3d(320, 320, kernel_size=(1, 2, 2), stride=(1, 2, 2), bias=False)
    (1): ConvTranspose3d(320, 256, kernel_size=(2, 2, 2), stride=(2, 2, 2), bias=False)
    (2): ConvTranspose3d(256, 128, kernel_size=(2, 2, 2), stride=(2, 2, 2), bias=False)
    (3): ConvTranspose3d(128, 64, kernel_size=(2, 2, 2), stride=(2, 2, 2), bias=False)
    (4): ConvTranspose3d(64, 32, kernel_size=(2, 2, 2), stride=(2, 2, 2), bias=False)
  )
  (seg_outputs): ModuleList(
    (0): Conv3d(320, 2, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
    (1): Conv3d(256, 2, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
    (2): Conv3d(128, 2, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
    (3): Conv3d(64, 2, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
    (4): Conv3d(32, 2, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
  )
)
SuusA - Load checkpoint (final, latest, best)
2022-11-01 09:29:49.150164: loading checkpoint /exports/lkeb-hpc/smaijer/results/nnUNet/3d_fullres/Task601/nnUNetTrainerV2__nnUNetPlansv2.1/fold_3/model_best.model train= True
SuusB run_training - zet learning rate als  
2022-11-01 09:29:59.731228: Suus1 maybe_update_lr lr: 0.000269
SuusC - run_training!
using pin_memory on device 0
using pin_memory on device 0
Suus for now disable cause it breaks the logs
2022-11-01 09:30:18.263676: Unable to plot network architecture:
2022-11-01 09:30:18.319076: local variable 'g' referenced before assignment
2022-11-01 09:30:18.364066: 
printing the network instead:

2022-11-01 09:30:18.402605: Generic_UNet(
  (encoder): Generic_UNETEncoder()
  (decoder): Generic_UNETDecoder()
  (conv_blocks_localization): ModuleList(
    (0): Sequential(
      (0): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(640, 320, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
      (1): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(320, 320, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
    )
    (1): Sequential(
      (0): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(512, 256, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
      (1): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(256, 256, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
    )
    (2): Sequential(
      (0): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(256, 128, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
      (1): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(128, 128, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
    )
    (3): Sequential(
      (0): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(128, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
      (1): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
    )
    (4): Sequential(
      (0): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(64, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
      (1): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(32, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
    )
  )
  (conv_blocks_context): ModuleList(
    (0): StackedConvLayers(
      (blocks): Sequential(
        (0): ConvDropoutNormNonlin(
          (conv): Conv3d(1, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (instnorm): InstanceNorm3d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
        )
        (1): ConvDropoutNormNonlin(
          (conv): Conv3d(32, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (instnorm): InstanceNorm3d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
        )
      )
    )
    (1): StackedConvLayers(
      (blocks): Sequential(
        (0): ConvDropoutNormNonlin(
          (conv): Conv3d(32, 64, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1))
          (instnorm): InstanceNorm3d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
        )
        (1): ConvDropoutNormNonlin(
          (conv): Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (instnorm): InstanceNorm3d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
        )
      )
    )
    (2): StackedConvLayers(
      (blocks): Sequential(
        (0): ConvDropoutNormNonlin(
          (conv): Conv3d(64, 128, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1))
          (instnorm): InstanceNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
        )
        (1): ConvDropoutNormNonlin(
          (conv): Conv3d(128, 128, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (instnorm): InstanceNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
        )
      )
    )
    (3): StackedConvLayers(
      (blocks): Sequential(
        (0): ConvDropoutNormNonlin(
          (conv): Conv3d(128, 256, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1))
          (instnorm): InstanceNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
        )
        (1): ConvDropoutNormNonlin(
          (conv): Conv3d(256, 256, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (instnorm): InstanceNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
        )
      )
    )
    (4): StackedConvLayers(
      (blocks): Sequential(
        (0): ConvDropoutNormNonlin(
          (conv): Conv3d(256, 320, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1))
          (instnorm): InstanceNorm3d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
        )
        (1): ConvDropoutNormNonlin(
          (conv): Conv3d(320, 320, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (instnorm): InstanceNorm3d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
        )
      )
    )
    (5): Sequential(
      (0): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(320, 320, kernel_size=(3, 3, 3), stride=(1, 2, 2), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
      (1): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(320, 320, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
    )
  )
  (td): ModuleList()
  (tu): ModuleList(
    (0): ConvTranspose3d(320, 320, kernel_size=(1, 2, 2), stride=(1, 2, 2), bias=False)
    (1): ConvTranspose3d(320, 256, kernel_size=(2, 2, 2), stride=(2, 2, 2), bias=False)
    (2): ConvTranspose3d(256, 128, kernel_size=(2, 2, 2), stride=(2, 2, 2), bias=False)
    (3): ConvTranspose3d(128, 64, kernel_size=(2, 2, 2), stride=(2, 2, 2), bias=False)
    (4): ConvTranspose3d(64, 32, kernel_size=(2, 2, 2), stride=(2, 2, 2), bias=False)
  )
  (seg_outputs): ModuleList(
    (0): Conv3d(320, 2, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
    (1): Conv3d(256, 2, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
    (2): Conv3d(128, 2, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
    (3): Conv3d(64, 2, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
    (4): Conv3d(32, 2, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
  )
)
2022-11-01 09:30:18.428973: 

2022-11-01 09:30:18.442768: 
epoch:  491
2022-11-01 09:32:00.794698: train loss : -1.8053
2022-11-01 09:32:09.065847: validation loss: -1.6088
2022-11-01 09:32:09.072035: Average global foreground Dice: [0.8637]
2022-11-01 09:32:09.097737: (interpret this as an estimate for the Dice of the different classes. This is not exact.)
2022-11-01 09:32:10.181293: Suus1 maybe_update_lr lr: 0.000242
2022-11-01 09:32:10.214335: This epoch took 111.756446 s

2022-11-01 09:32:10.236146: 
epoch:  492
2022-11-01 09:33:47.145258: train loss : -1.8167
2022-11-01 09:33:56.956179: validation loss: -1.6016
2022-11-01 09:33:57.097031: Average global foreground Dice: [0.8777]
2022-11-01 09:33:57.148105: (interpret this as an estimate for the Dice of the different classes. This is not exact.)
2022-11-01 09:33:57.975027: Suus1 maybe_update_lr lr: 0.000215
2022-11-01 09:33:58.014406: This epoch took 107.760977 s

2022-11-01 09:33:58.029471: 
epoch:  493
2022-11-01 09:35:42.821092: train loss : -1.8018
2022-11-01 09:35:55.181982: validation loss: -1.5322
2022-11-01 09:35:55.201469: Average global foreground Dice: [0.8679]
2022-11-01 09:35:55.241076: (interpret this as an estimate for the Dice of the different classes. This is not exact.)
2022-11-01 09:35:56.176341: Suus1 maybe_update_lr lr: 0.000187
2022-11-01 09:35:56.216260: This epoch took 118.169056 s

2022-11-01 09:35:56.257074: 
epoch:  494
2022-11-01 09:37:33.390859: train loss : -1.7804
2022-11-01 09:37:42.271778: validation loss: -1.5704
2022-11-01 09:37:42.301697: Average global foreground Dice: [0.8622]
2022-11-01 09:37:42.339088: (interpret this as an estimate for the Dice of the different classes. This is not exact.)
2022-11-01 09:37:43.496793: Suus1 maybe_update_lr lr: 0.000158
2022-11-01 09:37:43.518183: This epoch took 107.218420 s

2022-11-01 09:37:43.541099: 
epoch:  495
2022-11-01 09:39:20.711677: train loss : -1.8114
2022-11-01 09:39:31.519381: validation loss: -1.5919
2022-11-01 09:39:31.564585: Average global foreground Dice: [0.8717]
2022-11-01 09:39:31.594520: (interpret this as an estimate for the Dice of the different classes. This is not exact.)
2022-11-01 09:39:32.605806: Suus1 maybe_update_lr lr: 0.00013
2022-11-01 09:39:32.655582: This epoch took 109.110134 s

2022-11-01 09:39:32.703093: 
epoch:  496
2022-11-01 09:41:13.013359: train loss : -1.8012
2022-11-01 09:41:24.365053: validation loss: -1.5948
2022-11-01 09:41:24.431435: Average global foreground Dice: [0.872]
2022-11-01 09:41:24.467152: (interpret this as an estimate for the Dice of the different classes. This is not exact.)
2022-11-01 09:41:26.043974: Suus1 maybe_update_lr lr: 0.0001
2022-11-01 09:41:26.083194: This epoch took 113.344098 s

2022-11-01 09:41:26.103090: 
epoch:  497
2022-11-01 09:42:59.084792: train loss : -1.8145
2022-11-01 09:43:10.120359: validation loss: -1.6794
2022-11-01 09:43:10.152308: Average global foreground Dice: [0.8873]
2022-11-01 09:43:10.177103: (interpret this as an estimate for the Dice of the different classes. This is not exact.)
2022-11-01 09:43:11.231778: Suus1 maybe_update_lr lr: 6.9e-05
2022-11-01 09:43:11.288099: This epoch took 105.163008 s

2022-11-01 09:43:11.354073: 
epoch:  498
2022-11-01 09:44:50.499716: train loss : -1.8041
2022-11-01 09:45:03.527403: validation loss: -1.5657
2022-11-01 09:45:03.561802: Average global foreground Dice: [0.8626]
2022-11-01 09:45:03.603137: (interpret this as an estimate for the Dice of the different classes. This is not exact.)
2022-11-01 09:45:04.684310: Suus1 maybe_update_lr lr: 3.7e-05
2022-11-01 09:45:04.715169: This epoch took 113.316077 s

2022-11-01 09:45:04.745427: 
epoch:  499
2022-11-01 09:46:45.721546: train loss : -1.8093
2022-11-01 09:46:55.780736: validation loss: -1.6371
2022-11-01 09:46:55.799539: Average global foreground Dice: [0.8842]
2022-11-01 09:46:55.822183: (interpret this as an estimate for the Dice of the different classes. This is not exact.)
2022-11-01 09:46:56.723664: Suus1 maybe_update_lr lr: 0.0
2022-11-01 09:46:56.752429: saving scheduled checkpoint file...
2022-11-01 09:46:56.865232: saving checkpoint...
2022-11-01 09:46:58.031515: done, saving took 1.25 seconds
2022-11-01 09:46:58.151787: done
2022-11-01 09:46:58.183746: This epoch took 113.395638 s

2022-11-01 09:46:58.326421: saving checkpoint...
2022-11-01 09:46:59.280235: done, saving took 1.05 seconds
panc_0557 (2, 216, 141, 352)
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 216, 141, 352)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 40, 80, 120], [0, 13], [0, 80, 160]]
number of tiles: 24
computing Gaussian
done
prediction done
suus panc_0557 transposed
suus panc_0557 not saving softmax
suus panc_0557 voeg toe aan pred_gt tuples voor later
panc_0570 (2, 127, 258, 318)
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 127, 258, 318)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 31], [0, 43, 87, 130], [0, 63, 126]]
number of tiles: 24
using precomputed Gaussian
prediction done
suus panc_0570 transposed
suus panc_0570 not saving softmax
suus panc_0570 voeg toe aan pred_gt tuples voor later
panc_0571 (2, 127, 269, 336)
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 127, 269, 336)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 31], [0, 47, 94, 141], [0, 72, 144]]
number of tiles: 24
using precomputed Gaussian
prediction done
suus panc_0571 transposed
suus panc_0571 not saving softmax
suus panc_0571 voeg toe aan pred_gt tuples voor later
panc_0587 (2, 127, 259, 319)
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 127, 259, 319)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 31], [0, 44, 87, 131], [0, 64, 127]]
number of tiles: 24
using precomputed Gaussian
prediction done
suus panc_0587 transposed
suus panc_0587 not saving softmax
suus panc_0587 voeg toe aan pred_gt tuples voor later
panc_0592 (2, 227, 156, 352)
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 227, 156, 352)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 44, 87, 131], [0, 28], [0, 80, 160]]
number of tiles: 24
using precomputed Gaussian
prediction done
suus panc_0592 transposed
suus panc_0592 not saving softmax
suus panc_0592 voeg toe aan pred_gt tuples voor later
panc_0596 (2, 208, 156, 351)
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 208, 156, 351)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 37, 75, 112], [0, 28], [0, 80, 159]]
number of tiles: 24
using precomputed Gaussian
prediction done
suus panc_0596 transposed
suus panc_0596 not saving softmax
suus panc_0596 voeg toe aan pred_gt tuples voor later
panc_0599 (2, 127, 258, 319)
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 127, 258, 319)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 31], [0, 43, 87, 130], [0, 64, 127]]
number of tiles: 24
using precomputed Gaussian
prediction done
suus panc_0599 transposed
suus panc_0599 not saving softmax
suus panc_0599 voeg toe aan pred_gt tuples voor later
2022-11-01 09:48:10.883818: finished prediction
2022-11-01 09:48:10.886503: evaluation of raw predictions
2022-11-01 09:48:13.369472: determining postprocessing
Foreground vs background
before: 0.8493619183112846
after:  0.8493950881461805
Removing all but the largest foreground region improved results!
for_which_classes [1]
min_valid_object_sizes None
Only one class present, no need to do each class separately as this is covered in fg vs bg
done
for which classes:
[[1]]
min_object_sizes
None
force_separate_z: None interpolation order: 1
separate z: False lowres axis None
no separate z, order 1
suus we gaan schrijven naar /exports/lkeb-hpc/smaijer/results/nnUNet/3d_fullres/Task601/nnUNetTrainerV2__nnUNetPlansv2.1/fold_3/validation_raw/panc_0557.nii.gz
[Timing] - Resampling the segmentation to original shape took 4.2437920570373535 seconds
[Timing] - Saving the segmentation took 0.24271178245544434 seconds
force_separate_z: None interpolation order: 1
separate z: False lowres axis None
no separate z, order 1
suus we gaan schrijven naar /exports/lkeb-hpc/smaijer/results/nnUNet/3d_fullres/Task601/nnUNetTrainerV2__nnUNetPlansv2.1/fold_3/validation_raw/panc_0570.nii.gz
[Timing] - Resampling the segmentation to original shape took 0.7978572845458984 seconds
[Timing] - Saving the segmentation took 0.051776885986328125 seconds
force_separate_z: None interpolation order: 1
separate z: False lowres axis None
no separate z, order 1
suus we gaan schrijven naar /exports/lkeb-hpc/smaijer/results/nnUNet/3d_fullres/Task601/nnUNetTrainerV2__nnUNetPlansv2.1/fold_3/validation_raw/panc_0587.nii.gz
[Timing] - Resampling the segmentation to original shape took 0.7725701332092285 seconds
[Timing] - Saving the segmentation took 0.08855915069580078 seconds
force_separate_z: None interpolation order: 1
separate z: False lowres axis None
no separate z, order 1
suus we gaan schrijven naar /exports/lkeb-hpc/smaijer/results/nnUNet/3d_fullres/Task601/nnUNetTrainerV2__nnUNetPlansv2.1/fold_3/validation_raw/panc_0571.nii.gz
[Timing] - Resampling the segmentation to original shape took 0.7907774448394775 seconds
[Timing] - Saving the segmentation took 0.05089974403381348 seconds
force_separate_z: None interpolation order: 1
separate z: False lowres axis None
no separate z, order 1
suus we gaan schrijven naar /exports/lkeb-hpc/smaijer/results/nnUNet/3d_fullres/Task601/nnUNetTrainerV2__nnUNetPlansv2.1/fold_3/validation_raw/panc_0596.nii.gz
[Timing] - Resampling the segmentation to original shape took 4.455979347229004 seconds
[Timing] - Saving the segmentation took 0.25728368759155273 seconds
force_separate_z: None interpolation order: 1
separate z: False lowres axis None
no separate z, order 1
suus we gaan schrijven naar /exports/lkeb-hpc/smaijer/results/nnUNet/3d_fullres/Task601/nnUNetTrainerV2__nnUNetPlansv2.1/fold_3/validation_raw/panc_0599.nii.gz
[Timing] - Resampling the segmentation to original shape took 0.77518630027771 seconds
[Timing] - Saving the segmentation took 0.05102348327636719 seconds
force_separate_z: None interpolation order: 1
separate z: False lowres axis None
no separate z, order 1
suus we gaan schrijven naar /exports/lkeb-hpc/smaijer/results/nnUNet/3d_fullres/Task601/nnUNetTrainerV2__nnUNetPlansv2.1/fold_3/validation_raw/panc_0592.nii.gz
[Timing] - Resampling the segmentation to original shape took 5.137256860733032 seconds
[Timing] - Saving the segmentation took 0.2627999782562256 seconds
done


Please cite the following paper when using nnUNet:

Isensee, F., Jaeger, P.F., Kohl, S.A.A. et al. "nnU-Net: a self-configuring method for deep learning-based biomedical image segmentation." Nat Methods (2020). https://doi.org/10.1038/s41592-020-01008-z


If you have questions or suggestions, feel free to open an issue at https://github.com/MIC-DKFZ/nnUNet

Suus0 - run_training. Args:
Namespace(network='3d_fullres', network_trainer='nnUNetTrainerV2', task='601', fold='4', validation_only=False, continue_training=True, p='nnUNetPlansv2.1', use_compressed_data=False, deterministic=False, npz=False, find_lr=False, valbest=False, fp32=False, val_folder='validation_raw', disable_saving=False, disable_postprocessing_on_folds=False, val_disable_overwrite=False, disable_next_stage_pred=False, pretrained_weights=None)
###############################################
I am running the following nnUNet: 3d_fullres
My trainer class is:  <class 'nnunet.training.network_training.nnUNetTrainerV2.nnUNetTrainerV2'>
For that I will be using the following configuration:
num_classes:  1
modalities:  {0: 'MRI'}
use_mask_for_norm OrderedDict([(0, False)])
keep_only_largest_region None
min_region_size_per_class None
min_size_per_class None
normalization_schemes OrderedDict([(0, 'nonCT')])
stages...

stage:  0
{'batch_size': 2, 'num_pool_per_axis': [4, 5, 5], 'patch_size': array([ 96, 128, 192]), 'median_patient_size_in_voxels': array([167, 226, 319]), 'current_spacing': array([1.70314997, 1.1875    , 1.1875    ]), 'original_spacing': array([1.70314997, 1.1875    , 1.1875    ]), 'do_dummy_2D_data_aug': False, 'pool_op_kernel_sizes': [[2, 2, 2], [2, 2, 2], [2, 2, 2], [2, 2, 2], [1, 2, 2]], 'conv_kernel_sizes': [[3, 3, 3], [3, 3, 3], [3, 3, 3], [3, 3, 3], [3, 3, 3], [3, 3, 3]]}

I am using stage 0 from these plans
I am using sample dice + CE loss

I am using data from this folder:  /exports/lkeb-hpc/smaijer/data/nnUNet_preprocessed/Task601/nnUNetData_plans_v2.1
###############################################
Suus1 - Initialise de NetworkTrainer
Suus2 - Initialise de nnUNetTrainer
Suus3 - Initialise de nnUNetTrainerV2
Suus4 - Initialise de trainer echt
Suus5 - zet de plans properties
Suus6 - Zet de data augmentation params
Suus7 - zet deep supervision weights die de meerdere outputs prioriteit geven
loading dataset
loading all case properties
2022-11-01 09:48:26.538479: Using splits from existing split file: /exports/lkeb-hpc/smaijer/data/nnUNet_preprocessed/Task601/splits_final.pkl
2022-11-01 09:48:26.544647: The split file contains 5 splits.
2022-11-01 09:48:26.546212: Desired fold for training: 4
2022-11-01 09:48:26.547756: This split has 28 training and 6 validation cases.
unpacking dataset
done
Suus8 - Maak network aan (BELANGRIJK!)
SuusB - first stride 
Suus10 - StackedConvLayers, input: 1 en output: 32, first_stride: None, num_convs: 2, conv_kwargs: {'stride': 1, 'dilation': 1, 'bias': True, 'kernel_size': [3, 3, 3], 'padding': [1, 1, 1]}
SuusA - first_stride [2, 2, 2]
Suus10 - StackedConvLayers, input: 32 en output: 64, first_stride: [2, 2, 2], num_convs: 2, conv_kwargs: {'stride': 1, 'dilation': 1, 'bias': True, 'kernel_size': [3, 3, 3], 'padding': [1, 1, 1]}
SuusA - first_stride [2, 2, 2]
Suus10 - StackedConvLayers, input: 64 en output: 128, first_stride: [2, 2, 2], num_convs: 2, conv_kwargs: {'stride': 1, 'dilation': 1, 'bias': True, 'kernel_size': [3, 3, 3], 'padding': [1, 1, 1]}
SuusA - first_stride [2, 2, 2]
Suus10 - StackedConvLayers, input: 128 en output: 256, first_stride: [2, 2, 2], num_convs: 2, conv_kwargs: {'stride': 1, 'dilation': 1, 'bias': True, 'kernel_size': [3, 3, 3], 'padding': [1, 1, 1]}
SuusA - first_stride [2, 2, 2]
Suus10 - StackedConvLayers, input: 256 en output: 320, first_stride: [2, 2, 2], num_convs: 2, conv_kwargs: {'stride': 1, 'dilation': 1, 'bias': True, 'kernel_size': [3, 3, 3], 'padding': [1, 1, 1]}
Suus10 - StackedConvLayers, input: 320 en output: 320, first_stride: [1, 2, 2], num_convs: 1, conv_kwargs: {'stride': 1, 'dilation': 1, 'bias': True, 'kernel_size': [3, 3, 3], 'padding': [1, 1, 1]}
Suus10 - StackedConvLayers, input: 320 en output: 320, first_stride: None, num_convs: 1, conv_kwargs: {'stride': 1, 'dilation': 1, 'bias': True, 'kernel_size': [3, 3, 3], 'padding': [1, 1, 1]}
Suus10 - StackedConvLayers, input: 640 en output: 320, first_stride: None, num_convs: 1, conv_kwargs: {'stride': 1, 'dilation': 1, 'bias': True, 'kernel_size': [3, 3, 3], 'padding': [1, 1, 1]}
Suus10 - StackedConvLayers, input: 320 en output: 320, first_stride: None, num_convs: 1, conv_kwargs: {'stride': 1, 'dilation': 1, 'bias': True, 'kernel_size': [3, 3, 3], 'padding': [1, 1, 1]}
Suus10 - StackedConvLayers, input: 512 en output: 256, first_stride: None, num_convs: 1, conv_kwargs: {'stride': 1, 'dilation': 1, 'bias': True, 'kernel_size': [3, 3, 3], 'padding': [1, 1, 1]}
Suus10 - StackedConvLayers, input: 256 en output: 256, first_stride: None, num_convs: 1, conv_kwargs: {'stride': 1, 'dilation': 1, 'bias': True, 'kernel_size': [3, 3, 3], 'padding': [1, 1, 1]}
Suus10 - StackedConvLayers, input: 256 en output: 128, first_stride: None, num_convs: 1, conv_kwargs: {'stride': 1, 'dilation': 1, 'bias': True, 'kernel_size': [3, 3, 3], 'padding': [1, 1, 1]}
Suus10 - StackedConvLayers, input: 128 en output: 128, first_stride: None, num_convs: 1, conv_kwargs: {'stride': 1, 'dilation': 1, 'bias': True, 'kernel_size': [3, 3, 3], 'padding': [1, 1, 1]}
Suus10 - StackedConvLayers, input: 128 en output: 64, first_stride: None, num_convs: 1, conv_kwargs: {'stride': 1, 'dilation': 1, 'bias': True, 'kernel_size': [3, 3, 3], 'padding': [1, 1, 1]}
Suus10 - StackedConvLayers, input: 64 en output: 64, first_stride: None, num_convs: 1, conv_kwargs: {'stride': 1, 'dilation': 1, 'bias': True, 'kernel_size': [3, 3, 3], 'padding': [1, 1, 1]}
Suus10 - StackedConvLayers, input: 64 en output: 32, first_stride: None, num_convs: 1, conv_kwargs: {'stride': 1, 'dilation': 1, 'bias': True, 'kernel_size': [3, 3, 3], 'padding': [1, 1, 1]}
Suus10 - StackedConvLayers, input: 32 en output: 32, first_stride: None, num_convs: 1, conv_kwargs: {'stride': 1, 'dilation': 1, 'bias': True, 'kernel_size': [3, 3, 3], 'padding': [1, 1, 1]}
Generic_UNet(
  (encoder): Generic_UNETEncoder()
  (decoder): Generic_UNETDecoder()
  (conv_blocks_localization): ModuleList(
    (0): Sequential(
      (0): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(640, 320, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
      (1): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(320, 320, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
    )
    (1): Sequential(
      (0): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(512, 256, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
      (1): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(256, 256, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
    )
    (2): Sequential(
      (0): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(256, 128, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
      (1): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(128, 128, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
    )
    (3): Sequential(
      (0): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(128, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
      (1): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
    )
    (4): Sequential(
      (0): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(64, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
      (1): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(32, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
    )
  )
  (conv_blocks_context): ModuleList(
    (0): StackedConvLayers(
      (blocks): Sequential(
        (0): ConvDropoutNormNonlin(
          (conv): Conv3d(1, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (instnorm): InstanceNorm3d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
        )
        (1): ConvDropoutNormNonlin(
          (conv): Conv3d(32, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (instnorm): InstanceNorm3d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
        )
      )
    )
    (1): StackedConvLayers(
      (blocks): Sequential(
        (0): ConvDropoutNormNonlin(
          (conv): Conv3d(32, 64, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1))
          (instnorm): InstanceNorm3d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
        )
        (1): ConvDropoutNormNonlin(
          (conv): Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (instnorm): InstanceNorm3d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
        )
      )
    )
    (2): StackedConvLayers(
      (blocks): Sequential(
        (0): ConvDropoutNormNonlin(
          (conv): Conv3d(64, 128, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1))
          (instnorm): InstanceNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
        )
        (1): ConvDropoutNormNonlin(
          (conv): Conv3d(128, 128, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (instnorm): InstanceNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
        )
      )
    )
    (3): StackedConvLayers(
      (blocks): Sequential(
        (0): ConvDropoutNormNonlin(
          (conv): Conv3d(128, 256, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1))
          (instnorm): InstanceNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
        )
        (1): ConvDropoutNormNonlin(
          (conv): Conv3d(256, 256, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (instnorm): InstanceNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
        )
      )
    )
    (4): StackedConvLayers(
      (blocks): Sequential(
        (0): ConvDropoutNormNonlin(
          (conv): Conv3d(256, 320, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1))
          (instnorm): InstanceNorm3d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
        )
        (1): ConvDropoutNormNonlin(
          (conv): Conv3d(320, 320, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (instnorm): InstanceNorm3d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
        )
      )
    )
    (5): Sequential(
      (0): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(320, 320, kernel_size=(3, 3, 3), stride=(1, 2, 2), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
      (1): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(320, 320, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
    )
  )
  (td): ModuleList()
  (tu): ModuleList(
    (0): ConvTranspose3d(320, 320, kernel_size=(1, 2, 2), stride=(1, 2, 2), bias=False)
    (1): ConvTranspose3d(320, 256, kernel_size=(2, 2, 2), stride=(2, 2, 2), bias=False)
    (2): ConvTranspose3d(256, 128, kernel_size=(2, 2, 2), stride=(2, 2, 2), bias=False)
    (3): ConvTranspose3d(128, 64, kernel_size=(2, 2, 2), stride=(2, 2, 2), bias=False)
    (4): ConvTranspose3d(64, 32, kernel_size=(2, 2, 2), stride=(2, 2, 2), bias=False)
  )
  (seg_outputs): ModuleList(
    (0): Conv3d(320, 2, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
    (1): Conv3d(256, 2, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
    (2): Conv3d(128, 2, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
    (3): Conv3d(64, 2, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
    (4): Conv3d(32, 2, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
  )
)
SuusA - Load checkpoint (final, latest, best)
2022-11-01 09:48:28.335697: loading checkpoint /exports/lkeb-hpc/smaijer/results/nnUNet/3d_fullres/Task601/nnUNetTrainerV2__nnUNetPlansv2.1/fold_4/model_best.model train= True
SuusB run_training - zet learning rate als  
2022-11-01 09:48:37.854838: Suus1 maybe_update_lr lr: 0.000771
SuusC - run_training!
using pin_memory on device 0
using pin_memory on device 0
Suus for now disable cause it breaks the logs
2022-11-01 09:48:56.114418: Unable to plot network architecture:
2022-11-01 09:48:56.130308: local variable 'g' referenced before assignment
2022-11-01 09:48:56.132219: 
printing the network instead:

2022-11-01 09:48:56.134241: Generic_UNet(
  (encoder): Generic_UNETEncoder()
  (decoder): Generic_UNETDecoder()
  (conv_blocks_localization): ModuleList(
    (0): Sequential(
      (0): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(640, 320, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
      (1): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(320, 320, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
    )
    (1): Sequential(
      (0): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(512, 256, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
      (1): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(256, 256, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
    )
    (2): Sequential(
      (0): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(256, 128, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
      (1): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(128, 128, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
    )
    (3): Sequential(
      (0): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(128, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
      (1): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
    )
    (4): Sequential(
      (0): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(64, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
      (1): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(32, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
    )
  )
  (conv_blocks_context): ModuleList(
    (0): StackedConvLayers(
      (blocks): Sequential(
        (0): ConvDropoutNormNonlin(
          (conv): Conv3d(1, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (instnorm): InstanceNorm3d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
        )
        (1): ConvDropoutNormNonlin(
          (conv): Conv3d(32, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (instnorm): InstanceNorm3d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
        )
      )
    )
    (1): StackedConvLayers(
      (blocks): Sequential(
        (0): ConvDropoutNormNonlin(
          (conv): Conv3d(32, 64, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1))
          (instnorm): InstanceNorm3d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
        )
        (1): ConvDropoutNormNonlin(
          (conv): Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (instnorm): InstanceNorm3d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
        )
      )
    )
    (2): StackedConvLayers(
      (blocks): Sequential(
        (0): ConvDropoutNormNonlin(
          (conv): Conv3d(64, 128, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1))
          (instnorm): InstanceNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
        )
        (1): ConvDropoutNormNonlin(
          (conv): Conv3d(128, 128, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (instnorm): InstanceNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
        )
      )
    )
    (3): StackedConvLayers(
      (blocks): Sequential(
        (0): ConvDropoutNormNonlin(
          (conv): Conv3d(128, 256, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1))
          (instnorm): InstanceNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
        )
        (1): ConvDropoutNormNonlin(
          (conv): Conv3d(256, 256, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (instnorm): InstanceNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
        )
      )
    )
    (4): StackedConvLayers(
      (blocks): Sequential(
        (0): ConvDropoutNormNonlin(
          (conv): Conv3d(256, 320, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1))
          (instnorm): InstanceNorm3d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
        )
        (1): ConvDropoutNormNonlin(
          (conv): Conv3d(320, 320, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (instnorm): InstanceNorm3d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
        )
      )
    )
    (5): Sequential(
      (0): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(320, 320, kernel_size=(3, 3, 3), stride=(1, 2, 2), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
      (1): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(320, 320, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
    )
  )
  (td): ModuleList()
  (tu): ModuleList(
    (0): ConvTranspose3d(320, 320, kernel_size=(1, 2, 2), stride=(1, 2, 2), bias=False)
    (1): ConvTranspose3d(320, 256, kernel_size=(2, 2, 2), stride=(2, 2, 2), bias=False)
    (2): ConvTranspose3d(256, 128, kernel_size=(2, 2, 2), stride=(2, 2, 2), bias=False)
    (3): ConvTranspose3d(128, 64, kernel_size=(2, 2, 2), stride=(2, 2, 2), bias=False)
    (4): ConvTranspose3d(64, 32, kernel_size=(2, 2, 2), stride=(2, 2, 2), bias=False)
  )
  (seg_outputs): ModuleList(
    (0): Conv3d(320, 2, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
    (1): Conv3d(256, 2, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
    (2): Conv3d(128, 2, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
    (3): Conv3d(64, 2, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
    (4): Conv3d(32, 2, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
  )
)
2022-11-01 09:48:56.137920: 

2022-11-01 09:48:56.139756: 
epoch:  471
2022-11-01 09:50:48.229142: train loss : -1.8300
2022-11-01 09:51:02.113526: validation loss: -1.5863
2022-11-01 09:51:02.146930: Average global foreground Dice: [0.8429]
2022-11-01 09:51:02.184180: (interpret this as an estimate for the Dice of the different classes. This is not exact.)
2022-11-01 09:51:03.481866: Suus1 maybe_update_lr lr: 0.000747
2022-11-01 09:51:03.516122: saving best epoch checkpoint...
2022-11-01 09:51:03.702749: saving checkpoint...
2022-11-01 09:51:05.539220: done, saving took 1.96 seconds
2022-11-01 09:51:05.594475: This epoch took 129.440384 s

2022-11-01 09:51:05.600062: 
epoch:  472
2022-11-01 09:52:45.514200: train loss : -1.8242
2022-11-01 09:52:55.741791: validation loss: -1.5680
2022-11-01 09:52:55.777733: Average global foreground Dice: [0.8374]
2022-11-01 09:52:55.808128: (interpret this as an estimate for the Dice of the different classes. This is not exact.)
2022-11-01 09:52:57.806118: Suus1 maybe_update_lr lr: 0.000723
2022-11-01 09:52:57.839336: This epoch took 112.223837 s

2022-11-01 09:52:57.873112: 
epoch:  473
2022-11-01 09:54:41.329294: train loss : -1.7806
2022-11-01 09:54:51.026501: validation loss: -1.4435
2022-11-01 09:54:51.070663: Average global foreground Dice: [0.8381]
2022-11-01 09:54:51.135133: (interpret this as an estimate for the Dice of the different classes. This is not exact.)
2022-11-01 09:54:52.029542: Suus1 maybe_update_lr lr: 0.000699
2022-11-01 09:54:52.070479: This epoch took 114.147370 s

2022-11-01 09:54:52.099301: 
epoch:  474
2022-11-01 09:56:31.685313: train loss : -1.7933
2022-11-01 09:56:43.151542: validation loss: -1.5446
2022-11-01 09:56:43.189114: Average global foreground Dice: [0.8363]
2022-11-01 09:56:43.218446: (interpret this as an estimate for the Dice of the different classes. This is not exact.)
2022-11-01 09:56:44.132214: Suus1 maybe_update_lr lr: 0.000675
2022-11-01 09:56:44.144823: This epoch took 112.042000 s

2022-11-01 09:56:44.146234: 
epoch:  475
2022-11-01 09:58:28.488962: train loss : -1.7881
2022-11-01 09:58:39.378394: validation loss: -1.4745
2022-11-01 09:58:39.414539: Average global foreground Dice: [0.8411]
2022-11-01 09:58:39.454122: (interpret this as an estimate for the Dice of the different classes. This is not exact.)
2022-11-01 09:58:40.228762: Suus1 maybe_update_lr lr: 0.00065
2022-11-01 09:58:40.245704: This epoch took 116.096640 s

2022-11-01 09:58:40.268286: 
epoch:  476
2022-11-01 10:00:26.059220: train loss : -1.8186
2022-11-01 10:00:39.975939: validation loss: -1.4392
2022-11-01 10:00:40.024984: Average global foreground Dice: [0.8381]
2022-11-01 10:00:40.041876: (interpret this as an estimate for the Dice of the different classes. This is not exact.)
2022-11-01 10:00:41.102780: Suus1 maybe_update_lr lr: 0.000626
2022-11-01 10:00:41.138249: This epoch took 120.836096 s

2022-11-01 10:00:41.169281: 
epoch:  477
2022-11-01 10:02:28.585730: train loss : -1.7993
2022-11-01 10:02:39.031529: validation loss: -1.5103
2022-11-01 10:02:39.097518: Average global foreground Dice: [0.8394]
2022-11-01 10:02:39.130100: (interpret this as an estimate for the Dice of the different classes. This is not exact.)
2022-11-01 10:02:40.059410: Suus1 maybe_update_lr lr: 0.000601
2022-11-01 10:02:40.091150: This epoch took 118.895175 s

2022-11-01 10:02:40.133247: 
epoch:  478
2022-11-01 10:04:21.737893: train loss : -1.8183
2022-11-01 10:04:31.664996: validation loss: -1.5028
2022-11-01 10:04:31.701647: Average global foreground Dice: [0.8339]
2022-11-01 10:04:31.755104: (interpret this as an estimate for the Dice of the different classes. This is not exact.)
2022-11-01 10:04:32.806641: Suus1 maybe_update_lr lr: 0.000577
2022-11-01 10:04:32.859438: This epoch took 112.687333 s

2022-11-01 10:04:32.861575: 
epoch:  479
2022-11-01 10:06:13.329572: train loss : -1.8154
2022-11-01 10:06:24.354242: validation loss: -1.5084
2022-11-01 10:06:24.414643: Average global foreground Dice: [0.8343]
2022-11-01 10:06:24.440637: (interpret this as an estimate for the Dice of the different classes. This is not exact.)
2022-11-01 10:06:25.709792: Suus1 maybe_update_lr lr: 0.000552
2022-11-01 10:06:25.755953: This epoch took 112.892478 s

2022-11-01 10:06:25.774727: 
epoch:  480
2022-11-01 10:08:05.461290: train loss : -1.8296
2022-11-01 10:08:14.519268: validation loss: -1.5239
2022-11-01 10:08:14.544606: Average global foreground Dice: [0.8395]
2022-11-01 10:08:14.575091: (interpret this as an estimate for the Dice of the different classes. This is not exact.)
2022-11-01 10:08:15.764657: Suus1 maybe_update_lr lr: 0.000527
2022-11-01 10:08:15.795711: This epoch took 110.019316 s

2022-11-01 10:08:15.823663: 
epoch:  481
2022-11-01 10:09:59.513745: train loss : -1.8120
2022-11-01 10:10:10.781115: validation loss: -1.5918
2022-11-01 10:10:10.856826: Average global foreground Dice: [0.8443]
2022-11-01 10:10:10.883336: (interpret this as an estimate for the Dice of the different classes. This is not exact.)
2022-11-01 10:10:12.391739: Suus1 maybe_update_lr lr: 0.000502
2022-11-01 10:10:12.423294: This epoch took 116.568213 s

2022-11-01 10:10:12.445065: 
epoch:  482
2022-11-01 10:11:54.657169: train loss : -1.8116
2022-11-01 10:12:04.706576: validation loss: -1.4548
2022-11-01 10:12:04.758219: Average global foreground Dice: [0.8383]
2022-11-01 10:12:04.791318: (interpret this as an estimate for the Dice of the different classes. This is not exact.)
2022-11-01 10:12:05.536410: Suus1 maybe_update_lr lr: 0.000477
2022-11-01 10:12:05.568148: This epoch took 113.102786 s

2022-11-01 10:12:05.588489: 
epoch:  483
2022-11-01 10:13:51.948048: train loss : -1.7837
2022-11-01 10:14:00.624771: validation loss: -1.5157
2022-11-01 10:14:00.657771: Average global foreground Dice: [0.8402]
2022-11-01 10:14:00.690097: (interpret this as an estimate for the Dice of the different classes. This is not exact.)
2022-11-01 10:14:02.027495: Suus1 maybe_update_lr lr: 0.000451
2022-11-01 10:14:02.128135: This epoch took 116.508060 s

2022-11-01 10:14:02.193237: 
epoch:  484
2022-11-01 10:15:49.032819: train loss : -1.8089
2022-11-01 10:16:00.759138: validation loss: -1.5291
2022-11-01 10:16:00.783339: Average global foreground Dice: [0.8397]
2022-11-01 10:16:00.812073: (interpret this as an estimate for the Dice of the different classes. This is not exact.)
2022-11-01 10:16:02.112788: Suus1 maybe_update_lr lr: 0.000426
2022-11-01 10:16:02.146136: This epoch took 119.925006 s

2022-11-01 10:16:02.399088: 
epoch:  485
2022-11-01 10:17:43.351085: train loss : -1.7978
2022-11-01 10:17:55.575124: validation loss: -1.5449
2022-11-01 10:17:55.668657: Average global foreground Dice: [0.8395]
2022-11-01 10:17:55.731084: (interpret this as an estimate for the Dice of the different classes. This is not exact.)
2022-11-01 10:17:56.607809: Suus1 maybe_update_lr lr: 0.0004
2022-11-01 10:17:56.611190: This epoch took 114.179089 s

2022-11-01 10:17:56.644085: 
epoch:  486
2022-11-01 10:19:42.115094: train loss : -1.7828
2022-11-01 10:19:53.790490: validation loss: -1.5113
2022-11-01 10:19:53.835184: Average global foreground Dice: [0.8407]
2022-11-01 10:19:53.893111: (interpret this as an estimate for the Dice of the different classes. This is not exact.)
2022-11-01 10:19:54.826889: Suus1 maybe_update_lr lr: 0.000375
2022-11-01 10:19:54.864144: This epoch took 118.190018 s

2022-11-01 10:19:54.920064: 
epoch:  487
2022-11-01 10:21:36.513695: train loss : -1.8166
2022-11-01 10:21:47.768726: validation loss: -1.5006
2022-11-01 10:21:47.815743: Average global foreground Dice: [0.8371]
2022-11-01 10:21:47.870113: (interpret this as an estimate for the Dice of the different classes. This is not exact.)
2022-11-01 10:21:48.564846: Suus1 maybe_update_lr lr: 0.000348
2022-11-01 10:21:48.624160: This epoch took 113.670054 s

2022-11-01 10:21:48.648164: 
epoch:  488
2022-11-01 10:23:31.901584: train loss : -1.8108
2022-11-01 10:23:42.591840: validation loss: -1.5116
2022-11-01 10:23:42.666741: Average global foreground Dice: [0.8381]
2022-11-01 10:23:42.733203: (interpret this as an estimate for the Dice of the different classes. This is not exact.)
2022-11-01 10:23:43.566530: Suus1 maybe_update_lr lr: 0.000322
2022-11-01 10:23:43.617026: This epoch took 114.908948 s

2022-11-01 10:23:43.674353: 
epoch:  489
2022-11-01 10:25:30.506464: train loss : -1.8083
2022-11-01 10:25:41.662362: validation loss: -1.5428
2022-11-01 10:25:41.705040: Average global foreground Dice: [0.8357]
2022-11-01 10:25:41.744269: (interpret this as an estimate for the Dice of the different classes. This is not exact.)
2022-11-01 10:25:42.594585: Suus1 maybe_update_lr lr: 0.000296
2022-11-01 10:25:42.630457: This epoch took 118.942191 s

2022-11-01 10:25:42.666493: 
epoch:  490
2022-11-01 10:27:20.155911: train loss : -1.8184
2022-11-01 10:27:30.547335: validation loss: -1.5294
2022-11-01 10:27:30.597633: Average global foreground Dice: [0.843]
2022-11-01 10:27:30.646096: (interpret this as an estimate for the Dice of the different classes. This is not exact.)
2022-11-01 10:27:31.786945: Suus1 maybe_update_lr lr: 0.000269
2022-11-01 10:27:31.818153: This epoch took 109.106859 s

2022-11-01 10:27:31.862049: 
epoch:  491
2022-11-01 10:29:12.790108: train loss : -1.8238
2022-11-01 10:29:24.942236: validation loss: -1.5440
2022-11-01 10:29:24.974442: Average global foreground Dice: [0.8466]
2022-11-01 10:29:24.976221: (interpret this as an estimate for the Dice of the different classes. This is not exact.)
2022-11-01 10:29:26.664021: Suus1 maybe_update_lr lr: 0.000242
2022-11-01 10:29:26.697098: This epoch took 114.802030 s

2022-11-01 10:29:26.807648: 
epoch:  492
2022-11-01 10:31:02.763682: train loss : -1.8177
2022-11-01 10:31:14.731705: validation loss: -1.5021
2022-11-01 10:31:14.772773: Average global foreground Dice: [0.8336]
2022-11-01 10:31:14.810107: (interpret this as an estimate for the Dice of the different classes. This is not exact.)
2022-11-01 10:31:17.149868: Suus1 maybe_update_lr lr: 0.000215
2022-11-01 10:31:17.182151: This epoch took 110.333997 s

2022-11-01 10:31:17.205420: 
epoch:  493
2022-11-01 10:32:56.190557: train loss : -1.8347
2022-11-01 10:33:06.295807: validation loss: -1.5692
2022-11-01 10:33:06.329926: Average global foreground Dice: [0.8466]
2022-11-01 10:33:06.369683: (interpret this as an estimate for the Dice of the different classes. This is not exact.)
2022-11-01 10:33:07.241614: Suus1 maybe_update_lr lr: 0.000187
2022-11-01 10:33:07.250144: This epoch took 110.011043 s

2022-11-01 10:33:07.251920: 
epoch:  494
2022-11-01 10:34:50.086200: train loss : -1.8284
2022-11-01 10:35:02.228954: validation loss: -1.5058
2022-11-01 10:35:02.276627: Average global foreground Dice: [0.8278]
2022-11-01 10:35:02.353096: (interpret this as an estimate for the Dice of the different classes. This is not exact.)
2022-11-01 10:35:03.331120: Suus1 maybe_update_lr lr: 0.000158
2022-11-01 10:35:03.377136: This epoch took 116.123506 s

2022-11-01 10:35:03.465097: 
epoch:  495
2022-11-01 10:36:48.621294: train loss : -1.8312
2022-11-01 10:36:58.652994: validation loss: -1.5516
2022-11-01 10:36:58.689644: Average global foreground Dice: [0.8412]
2022-11-01 10:36:58.709124: (interpret this as an estimate for the Dice of the different classes. This is not exact.)
2022-11-01 10:36:59.842558: Suus1 maybe_update_lr lr: 0.00013
2022-11-01 10:36:59.850964: This epoch took 116.311884 s

2022-11-01 10:36:59.871117: 
epoch:  496
2022-11-01 10:38:40.951395: train loss : -1.8223
2022-11-01 10:38:50.886998: validation loss: -1.5491
2022-11-01 10:38:50.917221: Average global foreground Dice: [0.8387]
2022-11-01 10:38:51.007084: (interpret this as an estimate for the Dice of the different classes. This is not exact.)
2022-11-01 10:38:52.379827: Suus1 maybe_update_lr lr: 0.0001
2022-11-01 10:38:52.383662: This epoch took 112.473567 s

2022-11-01 10:38:52.404118: 
epoch:  497
2022-11-01 10:40:36.976828: train loss : -1.8215
2022-11-01 10:40:47.444937: validation loss: -1.5685
2022-11-01 10:40:47.484767: Average global foreground Dice: [0.8483]
2022-11-01 10:40:47.528106: (interpret this as an estimate for the Dice of the different classes. This is not exact.)
2022-11-01 10:40:49.315016: Suus1 maybe_update_lr lr: 6.9e-05
2022-11-01 10:40:49.436299: This epoch took 116.991180 s

2022-11-01 10:40:49.541107: 
epoch:  498
2022-11-01 10:42:25.893638: train loss : -1.8286
2022-11-01 10:42:39.266136: validation loss: -1.5868
2022-11-01 10:42:39.299214: Average global foreground Dice: [0.8415]
2022-11-01 10:42:39.395077: (interpret this as an estimate for the Dice of the different classes. This is not exact.)
2022-11-01 10:42:40.449413: Suus1 maybe_update_lr lr: 3.7e-05
2022-11-01 10:42:40.486256: This epoch took 110.876449 s

2022-11-01 10:42:40.525076: 
epoch:  499
2022-11-01 10:44:22.650557: train loss : -1.8189
2022-11-01 10:44:32.949174: validation loss: -1.5312
2022-11-01 10:44:33.001304: Average global foreground Dice: [0.8385]
2022-11-01 10:44:33.047034: (interpret this as an estimate for the Dice of the different classes. This is not exact.)
2022-11-01 10:44:34.461636: Suus1 maybe_update_lr lr: 0.0
2022-11-01 10:44:34.659601: saving scheduled checkpoint file...
2022-11-01 10:44:34.824473: saving checkpoint...
2022-11-01 10:44:36.542809: done, saving took 1.78 seconds
2022-11-01 10:44:36.559846: done
2022-11-01 10:44:36.570389: This epoch took 116.001320 s

2022-11-01 10:44:36.607522: saving checkpoint...
2022-11-01 10:44:37.865135: done, saving took 1.29 seconds
panc_0508 (2, 263, 101, 307)
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 263, 128, 307)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 42, 84, 125, 167], [0], [0, 58, 115]]
number of tiles: 15
computing Gaussian
done
prediction done
suus panc_0508 transposed
suus panc_0508 not saving softmax
suus panc_0508 voeg toe aan pred_gt tuples voor later
panc_0510 (2, 263, 131, 307)
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 263, 131, 307)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 42, 84, 125, 167], [0, 3], [0, 58, 115]]
number of tiles: 30
using precomputed Gaussian
prediction done
suus panc_0510 transposed
suus panc_0510 not saving softmax
suus panc_0510 voeg toe aan pred_gt tuples voor later
panc_0518 (2, 235, 202, 296)
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 235, 202, 296)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 46, 93, 139], [0, 37, 74], [0, 52, 104]]
number of tiles: 36
using precomputed Gaussian
prediction done
suus panc_0518 transposed
suus panc_0518 not saving softmax
suus panc_0518 voeg toe aan pred_gt tuples voor later
panc_0530 (2, 113, 288, 319)
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 113, 288, 319)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 17], [0, 53, 107, 160], [0, 64, 127]]
number of tiles: 24
using precomputed Gaussian
prediction done
suus panc_0530 transposed
suus panc_0530 not saving softmax
suus panc_0530 voeg toe aan pred_gt tuples voor later
panc_0541 (2, 127, 289, 319)
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 127, 289, 319)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 31], [0, 54, 107, 161], [0, 64, 127]]
number of tiles: 24
using precomputed Gaussian
prediction done
suus panc_0541 transposed
suus panc_0541 not saving softmax
suus panc_0541 voeg toe aan pred_gt tuples voor later
panc_0595 (2, 127, 258, 319)
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 127, 258, 319)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 31], [0, 43, 87, 130], [0, 64, 127]]
number of tiles: 24
using precomputed Gaussian
prediction done
suus panc_0595 transposed
suus panc_0595 not saving softmax
suus panc_0595 voeg toe aan pred_gt tuples voor later
2022-11-01 10:45:43.030907: finished prediction
2022-11-01 10:45:43.033993: evaluation of raw predictions
2022-11-01 10:45:45.181653: determining postprocessing
Foreground vs background
before: 0.846734165267593
after:  0.8111467351431632
Only one class present, no need to do each class separately as this is covered in fg vs bg
done
for which classes:
[]
min_object_sizes
None
force_separate_z: None interpolation order: 1
separate z: False lowres axis None
no separate z, order 1
suus we gaan schrijven naar /exports/lkeb-hpc/smaijer/results/nnUNet/3d_fullres/Task601/nnUNetTrainerV2__nnUNetPlansv2.1/fold_4/validation_raw/panc_0508.nii.gz
[Timing] - Resampling the segmentation to original shape took 0.8993048667907715 seconds
[Timing] - Saving the segmentation took 0.056210994720458984 seconds
force_separate_z: None interpolation order: 1
separate z: False lowres axis None
no separate z, order 1
suus we gaan schrijven naar /exports/lkeb-hpc/smaijer/results/nnUNet/3d_fullres/Task601/nnUNetTrainerV2__nnUNetPlansv2.1/fold_4/validation_raw/panc_0510.nii.gz
[Timing] - Resampling the segmentation to original shape took 1.1511962413787842 seconds
[Timing] - Saving the segmentation took 0.06819558143615723 seconds
force_separate_z: None interpolation order: 1
separate z: False lowres axis None
no separate z, order 1
suus we gaan schrijven naar /exports/lkeb-hpc/smaijer/results/nnUNet/3d_fullres/Task601/nnUNetTrainerV2__nnUNetPlansv2.1/fold_4/validation_raw/panc_0530.nii.gz
[Timing] - Resampling the segmentation to original shape took 0.797072172164917 seconds
[Timing] - Saving the segmentation took 0.06107807159423828 seconds
force_separate_z: None interpolation order: 1
separate z: False lowres axis None
no separate z, order 1
suus we gaan schrijven naar /exports/lkeb-hpc/smaijer/results/nnUNet/3d_fullres/Task601/nnUNetTrainerV2__nnUNetPlansv2.1/fold_4/validation_raw/panc_0518.nii.gz
[Timing] - Resampling the segmentation to original shape took 2.2092044353485107 seconds
[Timing] - Saving the segmentation took 0.12615609169006348 seconds
done
Start postprocessing..


Please cite the following paper when using nnUNet:

Isensee, F., Jaeger, P.F., Kohl, S.A.A. et al. "nnU-Net: a self-configuring method for deep learning-based biomedical image segmentation." Nat Methods (2020). https://doi.org/10.1038/s41592-020-01008-z


If you have questions or suggestions, feel free to open an issue at https://github.com/MIC-DKFZ/nnUNet

Foreground vs background
before: 0.8588323684766814
after:  0.8533932677638767
Only one class present, no need to do each class separately as this is covered in fg vs bg
done
for which classes:
[]
min_object_sizes
None
done
Done postprocessing! Now start inferencing its own train and test files.


Please cite the following paper when using nnUNet:

Isensee, F., Jaeger, P.F., Kohl, S.A.A. et al. "nnU-Net: a self-configuring method for deep learning-based biomedical image segmentation." Nat Methods (2020). https://doi.org/10.1038/s41592-020-01008-z


If you have questions or suggestions, feel free to open an issue at https://github.com/MIC-DKFZ/nnUNet

using model stored in  /exports/lkeb-hpc/smaijer/results/nnUNet/3d_fullres/Task601/nnUNetTrainerV2__nnUNetPlansv2.1
This model expects 1 input modalities for each image
Found 34 unique case ids, here are some examples: ['panc_0508' 'panc_0540' 'panc_0590' 'panc_0589' 'panc_0530' 'panc_0597'
 'panc_0586' 'panc_0600' 'panc_0589' 'panc_0507']
If they don't look right, make sure to double check your filenames. They must end with _0000.nii.gz etc
number of cases: 34
number of cases that still need to be predicted: 34
emptying cuda cache
loading parameters for folds, None
folds is None so we will automatically look for output folders (not using 'all'!)
found the following folds:  ['/exports/lkeb-hpc/smaijer/results/nnUNet/3d_fullres/Task601/nnUNetTrainerV2__nnUNetPlansv2.1/fold_0', '/exports/lkeb-hpc/smaijer/results/nnUNet/3d_fullres/Task601/nnUNetTrainerV2__nnUNetPlansv2.1/fold_1', '/exports/lkeb-hpc/smaijer/results/nnUNet/3d_fullres/Task601/nnUNetTrainerV2__nnUNetPlansv2.1/fold_2', '/exports/lkeb-hpc/smaijer/results/nnUNet/3d_fullres/Task601/nnUNetTrainerV2__nnUNetPlansv2.1/fold_3', '/exports/lkeb-hpc/smaijer/results/nnUNet/3d_fullres/Task601/nnUNetTrainerV2__nnUNetPlansv2.1/fold_4']
Suus1 - Initialise de NetworkTrainer
Suus2 - Initialise de nnUNetTrainer
Suus3 - Initialise de nnUNetTrainerV2
Suus5 - zet de plans properties
Suus4 - Initialise de trainer echt
Suus5 - zet de plans properties
Suus6 - Zet de data augmentation params
Suus7 - zet deep supervision weights die de meerdere outputs prioriteit geven
Suus8 - Maak network aan (BELANGRIJK!)
SuusB - first stride 
Suus10 - StackedConvLayers, input: 1 en output: 32, first_stride: None, num_convs: 2, conv_kwargs: {'stride': 1, 'dilation': 1, 'bias': True, 'kernel_size': [3, 3, 3], 'padding': [1, 1, 1]}
SuusA - first_stride [2, 2, 2]
Suus10 - StackedConvLayers, input: 32 en output: 64, first_stride: [2, 2, 2], num_convs: 2, conv_kwargs: {'stride': 1, 'dilation': 1, 'bias': True, 'kernel_size': [3, 3, 3], 'padding': [1, 1, 1]}
SuusA - first_stride [2, 2, 2]
Suus10 - StackedConvLayers, input: 64 en output: 128, first_stride: [2, 2, 2], num_convs: 2, conv_kwargs: {'stride': 1, 'dilation': 1, 'bias': True, 'kernel_size': [3, 3, 3], 'padding': [1, 1, 1]}
SuusA - first_stride [2, 2, 2]
Suus10 - StackedConvLayers, input: 128 en output: 256, first_stride: [2, 2, 2], num_convs: 2, conv_kwargs: {'stride': 1, 'dilation': 1, 'bias': True, 'kernel_size': [3, 3, 3], 'padding': [1, 1, 1]}
SuusA - first_stride [2, 2, 2]
Suus10 - StackedConvLayers, input: 256 en output: 320, first_stride: [2, 2, 2], num_convs: 2, conv_kwargs: {'stride': 1, 'dilation': 1, 'bias': True, 'kernel_size': [3, 3, 3], 'padding': [1, 1, 1]}
Suus10 - StackedConvLayers, input: 320 en output: 320, first_stride: [1, 2, 2], num_convs: 1, conv_kwargs: {'stride': 1, 'dilation': 1, 'bias': True, 'kernel_size': [3, 3, 3], 'padding': [1, 1, 1]}
Suus10 - StackedConvLayers, input: 320 en output: 320, first_stride: None, num_convs: 1, conv_kwargs: {'stride': 1, 'dilation': 1, 'bias': True, 'kernel_size': [3, 3, 3], 'padding': [1, 1, 1]}
Suus10 - StackedConvLayers, input: 640 en output: 320, first_stride: None, num_convs: 1, conv_kwargs: {'stride': 1, 'dilation': 1, 'bias': True, 'kernel_size': [3, 3, 3], 'padding': [1, 1, 1]}
Suus10 - StackedConvLayers, input: 320 en output: 320, first_stride: None, num_convs: 1, conv_kwargs: {'stride': 1, 'dilation': 1, 'bias': True, 'kernel_size': [3, 3, 3], 'padding': [1, 1, 1]}
Suus10 - StackedConvLayers, input: 512 en output: 256, first_stride: None, num_convs: 1, conv_kwargs: {'stride': 1, 'dilation': 1, 'bias': True, 'kernel_size': [3, 3, 3], 'padding': [1, 1, 1]}
Suus10 - StackedConvLayers, input: 256 en output: 256, first_stride: None, num_convs: 1, conv_kwargs: {'stride': 1, 'dilation': 1, 'bias': True, 'kernel_size': [3, 3, 3], 'padding': [1, 1, 1]}
Suus10 - StackedConvLayers, input: 256 en output: 128, first_stride: None, num_convs: 1, conv_kwargs: {'stride': 1, 'dilation': 1, 'bias': True, 'kernel_size': [3, 3, 3], 'padding': [1, 1, 1]}
Suus10 - StackedConvLayers, input: 128 en output: 128, first_stride: None, num_convs: 1, conv_kwargs: {'stride': 1, 'dilation': 1, 'bias': True, 'kernel_size': [3, 3, 3], 'padding': [1, 1, 1]}
Suus10 - StackedConvLayers, input: 128 en output: 64, first_stride: None, num_convs: 1, conv_kwargs: {'stride': 1, 'dilation': 1, 'bias': True, 'kernel_size': [3, 3, 3], 'padding': [1, 1, 1]}
Suus10 - StackedConvLayers, input: 64 en output: 64, first_stride: None, num_convs: 1, conv_kwargs: {'stride': 1, 'dilation': 1, 'bias': True, 'kernel_size': [3, 3, 3], 'padding': [1, 1, 1]}
Suus10 - StackedConvLayers, input: 64 en output: 32, first_stride: None, num_convs: 1, conv_kwargs: {'stride': 1, 'dilation': 1, 'bias': True, 'kernel_size': [3, 3, 3], 'padding': [1, 1, 1]}
Suus10 - StackedConvLayers, input: 32 en output: 32, first_stride: None, num_convs: 1, conv_kwargs: {'stride': 1, 'dilation': 1, 'bias': True, 'kernel_size': [3, 3, 3], 'padding': [1, 1, 1]}
Generic_UNet(
  (encoder): Generic_UNETEncoder()
  (decoder): Generic_UNETDecoder()
  (conv_blocks_localization): ModuleList(
    (0): Sequential(
      (0): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(640, 320, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
      (1): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(320, 320, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
    )
    (1): Sequential(
      (0): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(512, 256, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
      (1): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(256, 256, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
    )
    (2): Sequential(
      (0): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(256, 128, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
      (1): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(128, 128, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
    )
    (3): Sequential(
      (0): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(128, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
      (1): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
    )
    (4): Sequential(
      (0): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(64, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
      (1): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(32, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
    )
  )
  (conv_blocks_context): ModuleList(
    (0): StackedConvLayers(
      (blocks): Sequential(
        (0): ConvDropoutNormNonlin(
          (conv): Conv3d(1, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (instnorm): InstanceNorm3d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
        )
        (1): ConvDropoutNormNonlin(
          (conv): Conv3d(32, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (instnorm): InstanceNorm3d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
        )
      )
    )
    (1): StackedConvLayers(
      (blocks): Sequential(
        (0): ConvDropoutNormNonlin(
          (conv): Conv3d(32, 64, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1))
          (instnorm): InstanceNorm3d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
        )
        (1): ConvDropoutNormNonlin(
          (conv): Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (instnorm): InstanceNorm3d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
        )
      )
    )
    (2): StackedConvLayers(
      (blocks): Sequential(
        (0): ConvDropoutNormNonlin(
          (conv): Conv3d(64, 128, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1))
          (instnorm): InstanceNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
        )
        (1): ConvDropoutNormNonlin(
          (conv): Conv3d(128, 128, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (instnorm): InstanceNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
        )
      )
    )
    (3): StackedConvLayers(
      (blocks): Sequential(
        (0): ConvDropoutNormNonlin(
          (conv): Conv3d(128, 256, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1))
          (instnorm): InstanceNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
        )
        (1): ConvDropoutNormNonlin(
          (conv): Conv3d(256, 256, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (instnorm): InstanceNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
        )
      )
    )
    (4): StackedConvLayers(
      (blocks): Sequential(
        (0): ConvDropoutNormNonlin(
          (conv): Conv3d(256, 320, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1))
          (instnorm): InstanceNorm3d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
        )
        (1): ConvDropoutNormNonlin(
          (conv): Conv3d(320, 320, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (instnorm): InstanceNorm3d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
        )
      )
    )
    (5): Sequential(
      (0): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(320, 320, kernel_size=(3, 3, 3), stride=(1, 2, 2), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
      (1): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(320, 320, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
    )
  )
  (td): ModuleList()
  (tu): ModuleList(
    (0): ConvTranspose3d(320, 320, kernel_size=(1, 2, 2), stride=(1, 2, 2), bias=False)
    (1): ConvTranspose3d(320, 256, kernel_size=(2, 2, 2), stride=(2, 2, 2), bias=False)
    (2): ConvTranspose3d(256, 128, kernel_size=(2, 2, 2), stride=(2, 2, 2), bias=False)
    (3): ConvTranspose3d(128, 64, kernel_size=(2, 2, 2), stride=(2, 2, 2), bias=False)
    (4): ConvTranspose3d(64, 32, kernel_size=(2, 2, 2), stride=(2, 2, 2), bias=False)
  )
  (seg_outputs): ModuleList(
    (0): Conv3d(320, 2, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
    (1): Conv3d(256, 2, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
    (2): Conv3d(128, 2, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
    (3): Conv3d(64, 2, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
    (4): Conv3d(32, 2, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
  )
)
using the following model files:  ['/exports/lkeb-hpc/smaijer/results/nnUNet/3d_fullres/Task601/nnUNetTrainerV2__nnUNetPlansv2.1/fold_0/model_final_checkpoint.model', '/exports/lkeb-hpc/smaijer/results/nnUNet/3d_fullres/Task601/nnUNetTrainerV2__nnUNetPlansv2.1/fold_1/model_final_checkpoint.model', '/exports/lkeb-hpc/smaijer/results/nnUNet/3d_fullres/Task601/nnUNetTrainerV2__nnUNetPlansv2.1/fold_2/model_final_checkpoint.model', '/exports/lkeb-hpc/smaijer/results/nnUNet/3d_fullres/Task601/nnUNetTrainerV2__nnUNetPlansv2.1/fold_3/model_final_checkpoint.model', '/exports/lkeb-hpc/smaijer/results/nnUNet/3d_fullres/Task601/nnUNetTrainerV2__nnUNetPlansv2.1/fold_4/model_final_checkpoint.model']
starting preprocessing generator
[Timing] starting preprocessing generator took 2.9087066650390625e-05 seconds
starting prediction...
Preprocessing with 6 multithreads
predicting /exports/lkeb-hpc/smaijer/output/601/3d_fullres/nnUNetTrainerV2_1000/601/imagesTr/panc_0508.nii.gz
[Timing] loading took 0.05971193313598633 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 263, 128, 307)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 42, 84, 125, 167], [0], [0, 58, 115]]
number of tiles: 15
computing Gaussian
done
prediction done
[Timing] fold 0 prediction took 9.567484378814697 seconds
[Timing] loading another fold took 0.0334625244140625 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 263, 128, 307)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 42, 84, 125, 167], [0], [0, 58, 115]]
number of tiles: 15
using precomputed Gaussian
prediction done
[Timing] another fold took 6.164149761199951 seconds
[Timing] loading another fold took 0.03372931480407715 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 263, 128, 307)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 42, 84, 125, 167], [0], [0, 58, 115]]
number of tiles: 15
using precomputed Gaussian
prediction done
[Timing] another fold took 6.0425660610198975 seconds
[Timing] loading another fold took 0.033173322677612305 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 263, 128, 307)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 42, 84, 125, 167], [0], [0, 58, 115]]
number of tiles: 15
using precomputed Gaussian
prediction done
[Timing] another fold took 6.029170513153076 seconds
[Timing] loading another fold took 0.024975061416625977 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 263, 128, 307)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 42, 84, 125, 167], [0], [0, 58, 115]]
number of tiles: 15
using precomputed Gaussian
prediction done
[Timing] another fold took 5.852330446243286 seconds
[Timing] normalising with folds took 0.006049156188964844 seconds
[Timing] transposing backwards took 6.604194641113281e-05 seconds
[Timing] full prediction took 39.29815340042114 seconds
predicting /exports/lkeb-hpc/smaijer/output/601/3d_fullres/nnUNetTrainerV2_1000/601/imagesTr/panc_0507.nii.gz
[Timing] loading took 0.03754305839538574 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 106, 289, 319)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 10], [0, 54, 107, 161], [0, 64, 127]]
number of tiles: 24
using precomputed Gaussian
prediction done
[Timing] fold 0 prediction took 9.734178066253662 seconds
[Timing] loading another fold took 0.04287838935852051 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 106, 289, 319)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 10], [0, 54, 107, 161], [0, 64, 127]]
number of tiles: 24
using precomputed Gaussian
prediction done
[Timing] another fold took 9.310826301574707 seconds
[Timing] loading another fold took 0.039647579193115234 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 106, 289, 319)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 10], [0, 54, 107, 161], [0, 64, 127]]
number of tiles: 24
using precomputed Gaussian
prediction done
[Timing] another fold took 9.288721799850464 seconds
[Timing] loading another fold took 0.030385971069335938 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 106, 289, 319)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 10], [0, 54, 107, 161], [0, 64, 127]]
number of tiles: 24
using precomputed Gaussian
prediction done
[Timing] another fold took 9.27057433128357 seconds
[Timing] loading another fold took 0.023727893829345703 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 106, 289, 319)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 10], [0, 54, 107, 161], [0, 64, 127]]
number of tiles: 24
using precomputed Gaussian
prediction done
[Timing] another fold took 9.266763687133789 seconds
[Timing] normalising with folds took 0.0069730281829833984 seconds
[Timing] transposing backwards took 4.124641418457031e-05 seconds
[Timing] full prediction took 86.48354482650757 seconds
predicting /exports/lkeb-hpc/smaijer/output/601/3d_fullres/nnUNetTrainerV2_1000/601/imagesTr/panc_0530.nii.gz
[Timing] loading took 0.03708505630493164 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 113, 288, 319)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 17], [0, 53, 107, 160], [0, 64, 127]]
number of tiles: 24
using precomputed Gaussian
prediction done
[Timing] fold 0 prediction took 9.62175989151001 seconds
[Timing] loading another fold took 0.033429622650146484 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 113, 288, 319)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 17], [0, 53, 107, 160], [0, 64, 127]]
number of tiles: 24
using precomputed Gaussian
prediction done
[Timing] another fold took 9.295198678970337 seconds
[Timing] loading another fold took 0.03618931770324707 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 113, 288, 319)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 17], [0, 53, 107, 160], [0, 64, 127]]
number of tiles: 24
using precomputed Gaussian
prediction done
[Timing] another fold took 9.257418394088745 seconds
[Timing] loading another fold took 0.03413796424865723 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 113, 288, 319)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 17], [0, 53, 107, 160], [0, 64, 127]]
number of tiles: 24
using precomputed Gaussian
prediction done
[Timing] another fold took 9.25079345703125 seconds
[Timing] loading another fold took 0.022662639617919922 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 113, 288, 319)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 17], [0, 53, 107, 160], [0, 64, 127]]
number of tiles: 24
using precomputed Gaussian
prediction done
[Timing] another fold took 9.358184099197388 seconds
[Timing] normalising with folds took 0.007375478744506836 seconds
[Timing] transposing backwards took 7.963180541992188e-05 seconds
[Timing] full prediction took 133.53370070457458 seconds
predicting /exports/lkeb-hpc/smaijer/output/601/3d_fullres/nnUNetTrainerV2_1000/601/imagesTr/panc_0510.nii.gz
[Timing] loading took 0.031780242919921875 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 263, 131, 307)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 42, 84, 125, 167], [0, 3], [0, 58, 115]]
number of tiles: 30
using precomputed Gaussian
prediction done
[Timing] fold 0 prediction took 12.131663799285889 seconds
[Timing] loading another fold took 0.031343698501586914 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 263, 131, 307)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 42, 84, 125, 167], [0, 3], [0, 58, 115]]
number of tiles: 30
using precomputed Gaussian
prediction done
[Timing] another fold took 11.611951112747192 seconds
[Timing] loading another fold took 0.03298783302307129 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 263, 131, 307)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 42, 84, 125, 167], [0, 3], [0, 58, 115]]
number of tiles: 30
using precomputed Gaussian
prediction done
[Timing] another fold took 11.608692169189453 seconds
[Timing] loading another fold took 0.03251194953918457 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 263, 131, 307)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 42, 84, 125, 167], [0, 3], [0, 58, 115]]
number of tiles: 30
using precomputed Gaussian
prediction done
[Timing] another fold took 11.629868268966675 seconds
[Timing] loading another fold took 0.023555755615234375 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 263, 131, 307)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 42, 84, 125, 167], [0, 3], [0, 58, 115]]
number of tiles: 30
using precomputed Gaussian
prediction done
[Timing] another fold took 11.695152997970581 seconds
[Timing] normalising with folds took 0.008664846420288086 seconds
[Timing] transposing backwards took 3.4809112548828125e-05 seconds
[Timing] full prediction took 192.47070837020874 seconds
predicting /exports/lkeb-hpc/smaijer/output/601/3d_fullres/nnUNetTrainerV2_1000/601/imagesTr/panc_0514.nii.gz
[Timing] loading took 0.0330655574798584 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 263, 141, 307)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 42, 84, 125, 167], [0, 13], [0, 58, 115]]
number of tiles: 30
using precomputed Gaussian
prediction done
[Timing] fold 0 prediction took 11.994940519332886 seconds
[Timing] loading another fold took 0.03476905822753906 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 263, 141, 307)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 42, 84, 125, 167], [0, 13], [0, 58, 115]]
number of tiles: 30
using precomputed Gaussian
prediction done
[Timing] another fold took 11.669597625732422 seconds
[Timing] loading another fold took 0.031038522720336914 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 263, 141, 307)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 42, 84, 125, 167], [0, 13], [0, 58, 115]]
number of tiles: 30
using precomputed Gaussian
prediction done
[Timing] another fold took 11.742017269134521 seconds
[Timing] loading another fold took 0.02990269660949707 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 263, 141, 307)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 42, 84, 125, 167], [0, 13], [0, 58, 115]]
number of tiles: 30
using precomputed Gaussian
prediction done
[Timing] another fold took 11.724629878997803 seconds
[Timing] loading another fold took 0.023454666137695312 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 263, 141, 307)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 42, 84, 125, 167], [0, 13], [0, 58, 115]]
number of tiles: 30
using precomputed Gaussian
prediction done
[Timing] another fold took 11.661099910736084 seconds
[Timing] normalising with folds took 0.007944107055664062 seconds
[Timing] transposing backwards took 4.38690185546875e-05 seconds
[Timing] full prediction took 251.52813267707825 seconds
predicting /exports/lkeb-hpc/smaijer/output/601/3d_fullres/nnUNetTrainerV2_1000/601/imagesTr/panc_0518.nii.gz
[Timing] loading took 0.03239154815673828 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 235, 202, 296)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 46, 93, 139], [0, 37, 74], [0, 52, 104]]
number of tiles: 36
using precomputed Gaussian
prediction done
[Timing] fold 0 prediction took 14.459305763244629 seconds
[Timing] loading another fold took 0.03435802459716797 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 235, 202, 296)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 46, 93, 139], [0, 37, 74], [0, 52, 104]]
number of tiles: 36
using precomputed Gaussian
prediction done
[Timing] another fold took 13.927522420883179 seconds
[Timing] loading another fold took 0.03173542022705078 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 235, 202, 296)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 46, 93, 139], [0, 37, 74], [0, 52, 104]]
number of tiles: 36
using precomputed Gaussian
prediction done
[Timing] another fold took 13.96136736869812 seconds
[Timing] loading another fold took 0.031687021255493164 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 235, 202, 296)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 46, 93, 139], [0, 37, 74], [0, 52, 104]]
number of tiles: 36
using precomputed Gaussian
prediction done
[Timing] another fold took 13.894029378890991 seconds
[Timing] loading another fold took 0.0227353572845459 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 235, 202, 296)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 46, 93, 139], [0, 37, 74], [0, 52, 104]]
number of tiles: 36
using precomputed Gaussian
prediction done
[Timing] another fold took 13.93834400177002 seconds
[Timing] normalising with folds took 0.01154780387878418 seconds
[Timing] transposing backwards took 4.7206878662109375e-05 seconds
[Timing] full prediction took 321.9841947555542 seconds
predicting /exports/lkeb-hpc/smaijer/output/601/3d_fullres/nnUNetTrainerV2_1000/601/imagesTr/panc_0538.nii.gz
[Timing] loading took 0.04341006278991699 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 113, 285, 353)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 17], [0, 52, 105, 157], [0, 80, 161]]
number of tiles: 24
using precomputed Gaussian
prediction done
[Timing] fold 0 prediction took 10.295709133148193 seconds
[Timing] loading another fold took 0.03733944892883301 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 113, 285, 353)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 17], [0, 52, 105, 157], [0, 80, 161]]
number of tiles: 24
using precomputed Gaussian
prediction done
[Timing] another fold took 9.647666931152344 seconds
[Timing] loading another fold took 0.030513763427734375 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 113, 285, 353)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 17], [0, 52, 105, 157], [0, 80, 161]]
number of tiles: 24
using precomputed Gaussian
prediction done
[Timing] another fold took 9.414846181869507 seconds
[Timing] loading another fold took 0.030398845672607422 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 113, 285, 353)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 17], [0, 52, 105, 157], [0, 80, 161]]
number of tiles: 24
using precomputed Gaussian
prediction done
[Timing] another fold took 9.346695899963379 seconds
[Timing] loading another fold took 0.024327516555786133 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 113, 285, 353)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 17], [0, 52, 105, 157], [0, 80, 161]]
number of tiles: 24
using precomputed Gaussian
prediction done
[Timing] another fold took 9.429388761520386 seconds
[Timing] normalising with folds took 0.008152008056640625 seconds
[Timing] transposing backwards took 4.124641418457031e-05 seconds
[Timing] full prediction took 370.40358209609985 seconds
predicting /exports/lkeb-hpc/smaijer/output/601/3d_fullres/nnUNetTrainerV2_1000/601/imagesTr/panc_0532.nii.gz
[Timing] loading took 0.03506755828857422 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 127, 282, 353)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 31], [0, 51, 103, 154], [0, 80, 161]]
number of tiles: 24
using precomputed Gaussian
prediction done
[Timing] fold 0 prediction took 9.884323835372925 seconds
[Timing] loading another fold took 0.03799128532409668 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 127, 282, 353)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 31], [0, 51, 103, 154], [0, 80, 161]]
number of tiles: 24
using precomputed Gaussian
prediction done
[Timing] another fold took 9.373731851577759 seconds
[Timing] loading another fold took 0.031525373458862305 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 127, 282, 353)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 31], [0, 51, 103, 154], [0, 80, 161]]
number of tiles: 24
using precomputed Gaussian
prediction done
[Timing] another fold took 9.42723298072815 seconds
[Timing] loading another fold took 0.02911996841430664 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 127, 282, 353)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 31], [0, 51, 103, 154], [0, 80, 161]]
number of tiles: 24
using precomputed Gaussian
prediction done
[Timing] another fold took 9.467519760131836 seconds
[Timing] loading another fold took 0.024659395217895508 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 127, 282, 353)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 31], [0, 51, 103, 154], [0, 80, 161]]
number of tiles: 24
using precomputed Gaussian
prediction done
[Timing] another fold took 9.482107877731323 seconds
[Timing] normalising with folds took 0.011558055877685547 seconds
[Timing] transposing backwards took 4.9591064453125e-05 seconds
[Timing] full prediction took 418.3232674598694 seconds
predicting /exports/lkeb-hpc/smaijer/output/601/3d_fullres/nnUNetTrainerV2_1000/601/imagesTr/panc_0551.nii.gz
[Timing] loading took 0.03763222694396973 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 127, 273, 336)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 31], [0, 48, 97, 145], [0, 72, 144]]
number of tiles: 24
using precomputed Gaussian
prediction done
[Timing] fold 0 prediction took 10.065117597579956 seconds
[Timing] loading another fold took 0.04610276222229004 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 127, 273, 336)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 31], [0, 48, 97, 145], [0, 72, 144]]
number of tiles: 24
using precomputed Gaussian
prediction done
[Timing] another fold took 9.910369873046875 seconds
[Timing] loading another fold took 0.034668684005737305 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 127, 273, 336)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 31], [0, 48, 97, 145], [0, 72, 144]]
number of tiles: 24
using precomputed Gaussian
prediction done
[Timing] another fold took 9.555622816085815 seconds
[Timing] loading another fold took 0.03321194648742676 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 127, 273, 336)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 31], [0, 48, 97, 145], [0, 72, 144]]
number of tiles: 24
using precomputed Gaussian
prediction done
[Timing] another fold took 9.418735265731812 seconds
[Timing] loading another fold took 0.023602962493896484 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 127, 273, 336)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 31], [0, 48, 97, 145], [0, 72, 144]]
number of tiles: 24
using precomputed Gaussian
prediction done
[Timing] another fold took 9.431846857070923 seconds
[Timing] normalising with folds took 0.008278846740722656 seconds
[Timing] transposing backwards took 4.2438507080078125e-05 seconds
[Timing] full prediction took 466.99770641326904 seconds
predicting /exports/lkeb-hpc/smaijer/output/601/3d_fullres/nnUNetTrainerV2_1000/601/imagesTr/panc_0540.nii.gz
[Timing] loading took 0.0311887264251709 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 117, 250, 316)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 21], [0, 61, 122], [0, 62, 124]]
number of tiles: 18
using precomputed Gaussian
prediction done
[Timing] fold 0 prediction took 7.654662609100342 seconds
[Timing] loading another fold took 0.03380298614501953 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 117, 250, 316)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 21], [0, 61, 122], [0, 62, 124]]
number of tiles: 18
using precomputed Gaussian
prediction done
[Timing] another fold took 7.768199443817139 seconds
[Timing] loading another fold took 0.04131507873535156 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 117, 250, 316)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 21], [0, 61, 122], [0, 62, 124]]
number of tiles: 18
using precomputed Gaussian
prediction done
[Timing] another fold took 7.277264833450317 seconds
[Timing] loading another fold took 0.033449411392211914 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 117, 250, 316)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 21], [0, 61, 122], [0, 62, 124]]
number of tiles: 18
using precomputed Gaussian
prediction done
[Timing] another fold took 7.246655464172363 seconds
[Timing] loading another fold took 0.02577495574951172 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 117, 250, 316)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 21], [0, 61, 122], [0, 62, 124]]
number of tiles: 18
using precomputed Gaussian
prediction done
[Timing] another fold took 7.091367244720459 seconds
[Timing] normalising with folds took 0.0066106319427490234 seconds
[Timing] transposing backwards took 4.0531158447265625e-05 seconds
[Timing] full prediction took 504.29934334754944 seconds
predicting /exports/lkeb-hpc/smaijer/output/601/3d_fullres/nnUNetTrainerV2_1000/601/imagesTr/panc_0541.nii.gz
[Timing] loading took 0.03403759002685547 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 127, 289, 319)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 31], [0, 54, 107, 161], [0, 64, 127]]
number of tiles: 24
using precomputed Gaussian
prediction done
[Timing] fold 0 prediction took 9.85239577293396 seconds
[Timing] loading another fold took 0.030822277069091797 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 127, 289, 319)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 31], [0, 54, 107, 161], [0, 64, 127]]
number of tiles: 24
using precomputed Gaussian
prediction done
[Timing] another fold took 9.346663475036621 seconds
[Timing] loading another fold took 0.03664207458496094 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 127, 289, 319)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 31], [0, 54, 107, 161], [0, 64, 127]]
number of tiles: 24
using precomputed Gaussian
prediction done
[Timing] another fold took 9.345646381378174 seconds
[Timing] loading another fold took 0.02953648567199707 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 127, 289, 319)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 31], [0, 54, 107, 161], [0, 64, 127]]
number of tiles: 24
using precomputed Gaussian
prediction done
[Timing] another fold took 9.398478984832764 seconds
[Timing] loading another fold took 0.02263951301574707 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 127, 289, 319)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 31], [0, 54, 107, 161], [0, 64, 127]]
number of tiles: 24
using precomputed Gaussian
prediction done
[Timing] another fold took 9.349248886108398 seconds
[Timing] normalising with folds took 0.008346319198608398 seconds
[Timing] transposing backwards took 3.6716461181640625e-05 seconds
[Timing] full prediction took 551.856499671936 seconds
predicting /exports/lkeb-hpc/smaijer/output/601/3d_fullres/nnUNetTrainerV2_1000/601/imagesTr/panc_0548.nii.gz
[Timing] loading took 0.03572416305541992 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 127, 258, 318)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 31], [0, 43, 87, 130], [0, 63, 126]]
number of tiles: 24
using precomputed Gaussian
prediction done
[Timing] fold 0 prediction took 10.006876945495605 seconds
[Timing] loading another fold took 0.03589010238647461 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 127, 258, 318)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 31], [0, 43, 87, 130], [0, 63, 126]]
number of tiles: 24
using precomputed Gaussian
prediction done
[Timing] another fold took 9.689090251922607 seconds
[Timing] loading another fold took 0.030897855758666992 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 127, 258, 318)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 31], [0, 43, 87, 130], [0, 63, 126]]
number of tiles: 24
using precomputed Gaussian
prediction done
[Timing] another fold took 9.408266544342041 seconds
[Timing] loading another fold took 0.031110763549804688 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 127, 258, 318)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 31], [0, 43, 87, 130], [0, 63, 126]]
number of tiles: 24
using precomputed Gaussian
prediction done
[Timing] another fold took 9.366650104522705 seconds
[Timing] loading another fold took 0.026553630828857422 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 127, 258, 318)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 31], [0, 43, 87, 130], [0, 63, 126]]
number of tiles: 24
using precomputed Gaussian
prediction done
[Timing] another fold took 9.320849657058716 seconds
[Timing] normalising with folds took 0.007398128509521484 seconds
[Timing] transposing backwards took 4.9591064453125e-05 seconds
[Timing] full prediction took 599.9148778915405 seconds
predicting /exports/lkeb-hpc/smaijer/output/601/3d_fullres/nnUNetTrainerV2_1000/601/imagesTr/panc_0555.nii.gz
[Timing] loading took 0.03630185127258301 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 127, 269, 335)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 31], [0, 47, 94, 141], [0, 72, 143]]
number of tiles: 24
using precomputed Gaussian
prediction done
[Timing] fold 0 prediction took 9.977507829666138 seconds
[Timing] loading another fold took 0.03266739845275879 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 127, 269, 335)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 31], [0, 47, 94, 141], [0, 72, 143]]
number of tiles: 24
using precomputed Gaussian
prediction done
[Timing] another fold took 9.770252466201782 seconds
[Timing] loading another fold took 0.03391289710998535 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 127, 269, 335)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 31], [0, 47, 94, 141], [0, 72, 143]]
number of tiles: 24
using precomputed Gaussian
prediction done
[Timing] another fold took 9.341999769210815 seconds
[Timing] loading another fold took 0.029577970504760742 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 127, 269, 335)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 31], [0, 47, 94, 141], [0, 72, 143]]
number of tiles: 24
using precomputed Gaussian
prediction done
[Timing] another fold took 9.478393316268921 seconds
[Timing] loading another fold took 0.0227205753326416 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 127, 269, 335)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 31], [0, 47, 94, 141], [0, 72, 143]]
number of tiles: 24
using precomputed Gaussian
prediction done
[Timing] another fold took 9.422623634338379 seconds
[Timing] normalising with folds took 0.007951021194458008 seconds
[Timing] transposing backwards took 4.029273986816406e-05 seconds
[Timing] full prediction took 648.1803114414215 seconds
predicting /exports/lkeb-hpc/smaijer/output/601/3d_fullres/nnUNetTrainerV2_1000/601/imagesTr/panc_0554.nii.gz
[Timing] loading took 0.03494381904602051 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 208, 156, 354)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 37, 75, 112], [0, 28], [0, 81, 162]]
number of tiles: 24
using precomputed Gaussian
prediction done
[Timing] fold 0 prediction took 10.100682973861694 seconds
[Timing] loading another fold took 0.03624749183654785 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 208, 156, 354)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 37, 75, 112], [0, 28], [0, 81, 162]]
number of tiles: 24
using precomputed Gaussian
prediction done
[Timing] another fold took 9.849061012268066 seconds
[Timing] loading another fold took 0.032457828521728516 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 208, 156, 354)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 37, 75, 112], [0, 28], [0, 81, 162]]
number of tiles: 24
using precomputed Gaussian
prediction done
[Timing] another fold took 9.443492889404297 seconds
[Timing] loading another fold took 0.042766571044921875 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 208, 156, 354)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 37, 75, 112], [0, 28], [0, 81, 162]]
number of tiles: 24
using precomputed Gaussian
prediction done
[Timing] another fold took 9.431474685668945 seconds
[Timing] loading another fold took 0.02292466163635254 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 208, 156, 354)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 37, 75, 112], [0, 28], [0, 81, 162]]
number of tiles: 24
using precomputed Gaussian
prediction done
[Timing] another fold took 9.351069927215576 seconds
[Timing] normalising with folds took 0.00817561149597168 seconds
[Timing] transposing backwards took 4.744529724121094e-05 seconds
[Timing] full prediction took 696.6408038139343 seconds
predicting /exports/lkeb-hpc/smaijer/output/601/3d_fullres/nnUNetTrainerV2_1000/601/imagesTr/panc_0571.nii.gz
[Timing] loading took 0.036019325256347656 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 127, 269, 336)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 31], [0, 47, 94, 141], [0, 72, 144]]
number of tiles: 24
using precomputed Gaussian
prediction done
[Timing] fold 0 prediction took 9.883718013763428 seconds
[Timing] loading another fold took 0.033350467681884766 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 127, 269, 336)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 31], [0, 47, 94, 141], [0, 72, 144]]
number of tiles: 24
using precomputed Gaussian
prediction done
[Timing] another fold took 9.402052879333496 seconds
[Timing] loading another fold took 0.03058314323425293 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 127, 269, 336)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 31], [0, 47, 94, 141], [0, 72, 144]]
number of tiles: 24
using precomputed Gaussian
prediction done
[Timing] another fold took 9.372506141662598 seconds
[Timing] loading another fold took 0.031018495559692383 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 127, 269, 336)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 31], [0, 47, 94, 141], [0, 72, 144]]
number of tiles: 24
using precomputed Gaussian
prediction done
[Timing] another fold took 9.360831022262573 seconds
[Timing] loading another fold took 0.022477149963378906 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 127, 269, 336)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 31], [0, 47, 94, 141], [0, 72, 144]]
number of tiles: 24
using precomputed Gaussian
prediction done
[Timing] another fold took 9.344667434692383 seconds
[Timing] normalising with folds took 0.008177757263183594 seconds
[Timing] transposing backwards took 3.695487976074219e-05 seconds
[Timing] full prediction took 744.2797803878784 seconds
predicting /exports/lkeb-hpc/smaijer/output/601/3d_fullres/nnUNetTrainerV2_1000/601/imagesTr/panc_0557.nii.gz
[Timing] loading took 0.03433847427368164 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: preprocessing /exports/lkeb-hpc/smaijer/output/601/3d_fullres/nnUNetTrainerV2_1000/601/imagesTr/panc_0530.nii.gz
using preprocessor GenericPreprocessor
[Timing] Loading took 0.47574782371520996 seconds
before crop: (1, 64, 290, 320) after crop: (1, 64, 288, 319) spacing: [3.     1.1875 1.1875] 

ff voor mezelf want snap data files niet, hier lengte van data files1
no separate z, order 3
no separate z, order 1
before: {'spacing': array([3.    , 1.1875, 1.1875]), 'spacing_transposed': array([3.    , 1.1875, 1.1875]), 'data.shape (data is transposed)': (1, 64, 288, 319)} 
after:  {'spacing': array([1.70314997, 1.1875    , 1.1875    ]), 'data.shape (data is resampled)': (1, 113, 288, 319)} 

[Timing] Preprocessing specifics: loading&cropping took 0.8589978218078613, transposing took 3.0994415283203125e-05 and 6.4373016357421875e-06, resampling/normalizing took 4.923390865325928.
[Timing] preprocessing function took 5.802347183227539 seconds
(1, 113, 288, 319)
[Timing] total time for preprocessing this item is 39.25064778327942
preprocessing /exports/lkeb-hpc/smaijer/output/601/3d_fullres/nnUNetTrainerV2_1000/601/imagesTr/panc_0551.nii.gz
using preprocessor GenericPreprocessor
[Timing] Loading took 1.0259315967559814 seconds
before crop: (1, 72, 468, 576) after crop: (1, 72, 466, 574) spacing: [3.         0.69444442 0.69444442] 

ff voor mezelf want snap data files niet, hier lengte van data files1
separate z, order in z is 0 order inplane is 3
separate z, order in z is 0 order inplane is 1
before: {'spacing': array([3.        , 0.69444442, 0.69444442]), 'spacing_transposed': array([3.        , 0.69444442, 0.69444442]), 'data.shape (data is transposed)': (1, 72, 466, 574)} 
after:  {'spacing': array([1.70314997, 1.1875    , 1.1875    ]), 'data.shape (data is resampled)': (1, 127, 273, 336)} 

[Timing] Preprocessing specifics: loading&cropping took 2.3629417419433594, transposing took 1.4543533325195312e-05 and 1.9073486328125e-06, resampling/normalizing took 3.820671319961548.
[Timing] preprocessing function took 6.237297773361206 seconds
(1, 127, 273, 336)
[Timing] total time for preprocessing this item is 331.0730905532837
preprocessing /exports/lkeb-hpc/smaijer/output/601/3d_fullres/nnUNetTrainerV2_1000/601/imagesTr/panc_0571.nii.gz
using preprocessor GenericPreprocessor
[Timing] Loading took 0.5611379146575928 seconds
before crop: (1, 72, 258, 320) after crop: (1, 72, 256, 319) spacing: [3.   1.25 1.25] 

ff voor mezelf want snap data files niet, hier lengte van data files1
no separate z, order 3
no separate z, order 1
before: {'spacing': array([3.  , 1.25, 1.25]), 'spacing_transposed': array([3.  , 1.25, 1.25]), 'data.shape (data is transposed)': (1, 72, 256, 319)} 
after:  {'spacing': array([1.70314997, 1.1875    , 1.1875    ]), 'data.shape (data is resampled)': (1, 127, 269, 336)} 

[Timing] Preprocessing specifics: loading&cropping took 0.9598972797393799, transposing took 2.3365020751953125e-05 and 3.814697265625e-06, resampling/normalizing took 5.242880582809448.
[Timing] preprocessing function took 6.258631229400635 seconds
(1, 127, 269, 336)
[Timing] total time for preprocessing this item is 277.77223682403564
preprocessing /exports/lkeb-hpc/smaijer/output/601/3d_fullres/nnUNetTrainerV2_1000/601/imagesTr/panc_0588.nii.gz
using preprocessor GenericPreprocessor
[Timing] Loading took 2.104811429977417 seconds
before crop: (1, 512, 168, 512) after crop: (1, 496, 168, 512) spacing: [0.82029998 1.10000002 0.82029998] 

ff voor mezelf want snap data files niet, hier lengte van data files1
no separate z, order 3
no separate z, order 1
before: {'spacing': array([0.82029998, 1.10000002, 0.82029998]), 'spacing_transposed': array([0.82029998, 1.10000002, 0.82029998]), 'data.shape (data is transposed)': (1, 496, 168, 512)} 
after:  {'spacing': array([1.70314997, 1.1875    , 1.1875    ]), 'data.shape (data is resampled)': (1, 239, 156, 354)} 

[Timing] Preprocessing specifics: loading&cropping took 4.975811958312988, transposing took 3.361701965332031e-05 and 2.86102294921875e-06, resampling/normalizing took 9.670989751815796.
[Timing] preprocessing function took 14.705376386642456 seconds
(1, 239, 156, 354)
[Timing] total time for preprocessing this item is 288.5637481212616
preprocessing /exports/lkeb-hpc/smaijer/output/601/3d_fullres/nnUNetTrainerV2_1000/601/imagesTr/panc_0595.nii.gz
using preprocessor GenericPreprocessor
[Timing] Loading took 0.419539213180542 seconds
before crop: (1, 72, 260, 320) after crop: (1, 72, 258, 319) spacing: [3.     1.1875 1.1875] 

ff voor mezelf want snap data files niet, hier lengte van data files1
no separate z, order 3
no separate z, order 1
before: {'spacing': array([3.    , 1.1875, 1.1875]), 'spacing_transposed': array([3.    , 1.1875, 1.1875]), 'data.shape (data is transposed)': (1, 72, 258, 319)} 
after:  {'spacing': array([1.70314997, 1.1875    , 1.1875    ]), 'data.shape (data is resampled)': (1, 127, 258, 319)} 

[Timing] Preprocessing specifics: loading&cropping took 0.8363957405090332, transposing took 2.002716064453125e-05 and 2.86102294921875e-06, resampling/normalizing took 4.864197015762329.
[Timing] preprocessing function took 5.759002208709717 seconds
(1, 127, 258, 319)
[Timing] total time for preprocessing this item is 301.43903851509094
[Timing] This worker has ended successfully, no errors to report. It took 1525.7372994422913 seconds.
preprocessing /exports/lkeb-hpc/smaijer/output/601/3d_fullres/nnUNetTrainerV2_1000/601/imagesTr/panc_0518.nii.gz
using preprocessor GenericPreprocessor
[Timing] Loading took 1.1492507457733154 seconds
before crop: (1, 400, 120, 400) after crop: (1, 400, 120, 352) spacing: [1. 2. 1.] 

ff voor mezelf want snap data files niet, hier lengte van data files1
no separate z, order 3
no separate z, order 1
before: {'spacing': array([1., 2., 1.]), 'spacing_transposed': array([1., 2., 1.]), 'data.shape (data is transposed)': (1, 400, 120, 352)} 
after:  {'spacing': array([1.70314997, 1.1875    , 1.1875    ]), 'data.shape (data is resampled)': (1, 235, 202, 296)} 

[Timing] Preprocessing specifics: loading&cropping took 2.4316961765289307, transposing took 5.125999450683594e-05 and 4.291534423828125e-06, resampling/normalizing took 7.247341871261597.
[Timing] preprocessing function took 9.711745977401733 seconds
(1, 235, 202, 296)
[Timing] total time for preprocessing this item is 192.4117410182953
preprocessing /exports/lkeb-hpc/smaijer/output/601/3d_fullres/nnUNetTrainerV2_1000/601/imagesTr/panc_0548.nii.gz
using preprocessor GenericPreprocessor
[Timing] Loading took 0.49706459045410156 seconds
before crop: (1, 72, 260, 320) after crop: (1, 72, 258, 318) spacing: [3.     1.1875 1.1875] 

ff voor mezelf want snap data files niet, hier lengte van data files1
no separate z, order 3
no separate z, order 1
before: {'spacing': array([3.    , 1.1875, 1.1875]), 'spacing_transposed': array([3.    , 1.1875, 1.1875]), 'data.shape (data is transposed)': (1, 72, 258, 318)} 
after:  {'spacing': array([1.70314997, 1.1875    , 1.1875    ]), 'data.shape (data is resampled)': (1, 127, 258, 318)} 

[Timing] Preprocessing specifics: loading&cropping took 0.8982837200164795, transposing took 1.33514404296875e-05 and 1.1920928955078125e-06, resampling/normalizing took 4.840733766555786.
[Timing] preprocessing function took 5.799381494522095 seconds
(1, 127, 258, 318)
[Timing] total time for preprocessing this item is 311.82409834861755
preprocessing /exports/lkeb-hpc/smaijer/output/601/3d_fullres/nnUNetTrainerV2_1000/601/imagesTr/panc_0570.nii.gz
using preprocessor GenericPreprocessor
[Timing] Loading took 0.2869253158569336 seconds
before crop: (1, 72, 260, 320) after crop: (1, 72, 258, 318) spacing: [3.     1.1875 1.1875] 

ff voor mezelf want snap data files niet, hier lengte van data files1
no separate z, order 3
no separate z, order 1
before: {'spacing': array([3.    , 1.1875, 1.1875]), 'spacing_transposed': array([3.    , 1.1875, 1.1875]), 'data.shape (data is transposed)': (1, 72, 258, 318)} 
after:  {'spacing': array([1.70314997, 1.1875    , 1.1875    ]), 'data.shape (data is resampled)': (1, 127, 258, 318)} 

[Timing] Preprocessing specifics: loading&cropping took 0.7037014961242676, transposing took 1.6450881958007812e-05 and 1.6689300537109375e-06, resampling/normalizing took 4.841797828674316.
[Timing] preprocessing function took 5.596430778503418 seconds
(1, 127, 258, 318)
[Timing] total time for preprocessing this item is 287.69724440574646
preprocessing /exports/lkeb-hpc/smaijer/output/601/3d_fullres/nnUNetTrainerV2_1000/601/imagesTr/panc_0587.nii.gz
using preprocessor GenericPreprocessor
[Timing] Loading took 0.5485475063323975 seconds
before crop: (1, 72, 260, 320) after crop: (1, 72, 259, 319) spacing: [3.     1.1875 1.1875] 

ff voor mezelf want snap data files niet, hier lengte van data files1
no separate z, order 3
no separate z, order 1
before: {'spacing': array([3.    , 1.1875, 1.1875]), 'spacing_transposed': array([3.    , 1.1875, 1.1875]), 'data.shape (data is transposed)': (1, 72, 259, 319)} 
after:  {'spacing': array([1.70314997, 1.1875    , 1.1875    ]), 'data.shape (data is resampled)': (1, 127, 259, 319)} 

[Timing] Preprocessing specifics: loading&cropping took 0.9341013431549072, transposing took 2.09808349609375e-05 and 3.0994415283203125e-06, resampling/normalizing took 4.886070489883423.
[Timing] preprocessing function took 5.873414993286133 seconds
(1, 127, 259, 319)
[Timing] total time for preprocessing this item is 289.3658368587494
preprocessing /exports/lkeb-hpc/smaijer/output/601/3d_fullres/nnUNetTrainerV2_1000/601/imagesTr/panc_0594.nii.gz
using preprocessor GenericPreprocessor
[Timing] Loading took 0.6137638092041016 seconds
before crop: (1, 512, 168, 512) after crop: (1, 488, 168, 512) spacing: [0.82029998 1.10000002 0.82029998] 

ff voor mezelf want snap data files niet, hier lengte van data files1
no separate z, order 3
no separate z, order 1
before: {'spacing': array([0.82029998, 1.10000002, 0.82029998]), 'spacing_transposed': array([0.82029998, 1.10000002, 0.82029998]), 'data.shape (data is transposed)': (1, 488, 168, 512)} 
after:  {'spacing': array([1.70314997, 1.1875    , 1.1875    ]), 'data.shape (data is resampled)': (1, 235, 156, 354)} 

[Timing] Preprocessing specifics: loading&cropping took 3.4863293170928955, transposing took 4.220008850097656e-05 and 3.5762786865234375e-06, resampling/normalizing took 9.57990574836731.
[Timing] preprocessing function took 13.120576620101929 seconds
(1, 235, 156, 354)
[Timing] total time for preprocessing this item is 300.04509139060974
[Timing] This worker has ended successfully, no errors to report. It took 1620.5268936157227 seconds.
preprocessing /exports/lkeb-hpc/smaijer/output/601/3d_fullres/nnUNetTrainerV2_1000/601/imagesTr/panc_0508.nii.gz
using preprocessor GenericPreprocessor
[Timing] Loading took 0.7911491394042969 seconds
before crop: (1, 320, 80, 260) after crop: (1, 319, 80, 259) spacing: [1.40625 1.5     1.40625] 

ff voor mezelf want snap data files niet, hier lengte van data files1
no separate z, order 3
no separate z, order 1
before: {'spacing': array([1.40625, 1.5    , 1.40625]), 'spacing_transposed': array([1.40625, 1.5    , 1.40625]), 'data.shape (data is transposed)': (1, 319, 80, 259)} 
after:  {'spacing': array([1.70314997, 1.1875    , 1.1875    ]), 'data.shape (data is resampled)': (1, 263, 101, 307)} 

[Timing] Preprocessing specifics: loading&cropping took 1.2918424606323242, transposing took 9.965896606445312e-05 and 1.1205673217773438e-05, resampling/normalizing took 3.9919285774230957.
[Timing] preprocessing function took 5.291788578033447 seconds
(1, 263, 101, 307)
[Timing] total time for preprocessing this item is 5.2944512367248535
preprocessing /exports/lkeb-hpc/smaijer/output/601/3d_fullres/nnUNetTrainerV2_1000/601/imagesTr/panc_0538.nii.gz
using preprocessor GenericPreprocessor
[Timing] Loading took 0.33964109420776367 seconds
before crop: (1, 64, 260, 320) after crop: (1, 64, 258, 319) spacing: [3.     1.3125 1.3125] 

ff voor mezelf want snap data files niet, hier lengte van data files1
no separate z, order 3
no separate z, order 1
before: {'spacing': array([3.    , 1.3125, 1.3125]), 'spacing_transposed': array([3.    , 1.3125, 1.3125]), 'data.shape (data is transposed)': (1, 64, 258, 319)} 
after:  {'spacing': array([1.70314997, 1.1875    , 1.1875    ]), 'data.shape (data is resampled)': (1, 113, 285, 353)} 

[Timing] Preprocessing specifics: loading&cropping took 0.7207305431365967, transposing took 1.5974044799804688e-05 and 1.6689300537109375e-06, resampling/normalizing took 5.205322027206421.
[Timing] preprocessing function took 5.978282928466797 seconds
(1, 113, 285, 353)
[Timing] total time for preprocessing this item is 246.25717401504517
preprocessing /exports/lkeb-hpc/smaijer/output/601/3d_fullres/nnUNetTrainerV2_1000/601/imagesTr/panc_0555.nii.gz
using preprocessor GenericPreprocessor
[Timing] Loading took 0.4458658695220947 seconds
before crop: (1, 72, 232, 288) after crop: (1, 72, 230, 286) spacing: [3.         1.38888884 1.38888884] 

ff voor mezelf want snap data files niet, hier lengte van data files1
no separate z, order 3
no separate z, order 1
before: {'spacing': array([3.        , 1.38888884, 1.38888884]), 'spacing_transposed': array([3.        , 1.38888884, 1.38888884]), 'data.shape (data is transposed)': (1, 72, 230, 286)} 
after:  {'spacing': array([1.70314997, 1.1875    , 1.1875    ]), 'data.shape (data is resampled)': (1, 127, 269, 335)} 

[Timing] Preprocessing specifics: loading&cropping took 0.7608075141906738, transposing took 2.1696090698242188e-05 and 2.6226043701171875e-06, resampling/normalizing took 5.194054126739502.
[Timing] preprocessing function took 6.0109875202178955 seconds
(1, 127, 269, 335)
[Timing] total time for preprocessing this item is 300.3220272064209
preprocessing /exports/lkeb-hpc/smaijer/output/601/3d_fullres/nnUNetTrainerV2_1000/601/imagesTr/panc_0580.nii.gz
using preprocessor GenericPreprocessor
[Timing] Loading took 0.338315486907959 seconds
before crop: (1, 320, 60, 320) after crop: (1, 319, 60, 319) spacing: [1.1875 3.     1.1875] 

ff voor mezelf want snap data files niet, hier lengte van data files1
no separate z, order 3
no separate z, order 1
before: {'spacing': array([1.1875, 3.    , 1.1875]), 'spacing_transposed': array([1.1875, 3.    , 1.1875]), 'data.shape (data is transposed)': (1, 319, 60, 319)} 
after:  {'spacing': array([1.70314997, 1.1875    , 1.1875    ]), 'data.shape (data is resampled)': (1, 222, 152, 319)} 

[Timing] Preprocessing specifics: loading&cropping took 0.7370858192443848, transposing took 1.9550323486328125e-05 and 3.0994415283203125e-06, resampling/normalizing took 4.995427131652832.
[Timing] preprocessing function took 5.7942445278167725 seconds
(1, 222, 152, 319)
[Timing] total time for preprocessing this item is 288.13103771209717
preprocessing /exports/lkeb-hpc/smaijer/output/601/3d_fullres/nnUNetTrainerV2_1000/601/imagesTr/panc_0590.nii.gz
using preprocessor GenericPreprocessor
[Timing] Loading took 2.3305163383483887 seconds
before crop: (1, 512, 168, 512) after crop: (1, 497, 168, 510) spacing: [0.82029998 1.10000002 0.82029998] 

ff voor mezelf want snap data files niet, hier lengte van data files1
no separate z, order 3
no separate z, order 1
before: {'spacing': array([0.82029998, 1.10000002, 0.82029998]), 'spacing_transposed': array([0.82029998, 1.10000002, 0.82029998]), 'data.shape (data is transposed)': (1, 497, 168, 510)} 
after:  {'spacing': array([1.70314997, 1.1875    , 1.1875    ]), 'data.shape (data is resampled)': (1, 239, 156, 352)} 

[Timing] Preprocessing specifics: loading&cropping took 5.244937419891357, transposing took 4.887580871582031e-05 and 4.76837158203125e-06, resampling/normalizing took 9.20282244682312.
[Timing] preprocessing function took 14.505849599838257 seconds
(1, 239, 156, 352)
[Timing] total time for preprocessing this item is 301.4831819534302
preprocessing /exports/lkeb-hpc/smaijer/output/601/3d_fullres/nnUNetTrainerV2_1000/601/imagesTr/panc_0597.nii.gz
using preprocessor GenericPreprocessor
[Timing] Loading took 0.16267967224121094 seconds
before crop: (1, 320, 60, 320) after crop: (1, 319, 60, 319) spacing: [1.1875 3.     1.1875] 

ff voor mezelf want snap data files niet, hier lengte van data files1
no separate z, order 3
no separate z, order 1
before: {'spacing': array([1.1875, 3.    , 1.1875]), 'spacing_transposed': array([1.1875, 3.    , 1.1875]), 'data.shape (data is transposed)': (1, 319, 60, 319)} 
after:  {'spacing': array([1.70314997, 1.1875    , 1.1875    ]), 'data.shape (data is resampled)': (1, 222, 152, 319)} 

[Timing] Preprocessing specifics: loading&cropping took 0.547837495803833, transposing took 2.1696090698242188e-05 and 3.0994415283203125e-06, resampling/normalizing took 4.977087020874023.
[Timing] preprocessing function took 5.585135459899902 seconds
(1, 222, 152, 319)
[Timing] total time for preprocessing this item is 287.96899032592773
[Timing] This worker has ended successfully, no errors to report. It took 1667.6738801002502 seconds.
preprocessing /exports/lkeb-hpc/smaijer/output/601/3d_fullres/nnUNetTrainerV2_1000/601/imagesTr/panc_0507.nii.gz
using preprocessor GenericPreprocessor
[Timing] Loading took 0.4450874328613281 seconds
before crop: (1, 72, 290, 320) after crop: (1, 72, 289, 319) spacing: [2.5    1.1875 1.1875] 

ff voor mezelf want snap data files niet, hier lengte van data files1
no separate z, order 3
no separate z, order 1
before: {'spacing': array([2.5   , 1.1875, 1.1875]), 'spacing_transposed': array([2.5   , 1.1875, 1.1875]), 'data.shape (data is transposed)': (1, 72, 289, 319)} 
after:  {'spacing': array([1.70314997, 1.1875    , 1.1875    ]), 'data.shape (data is resampled)': (1, 106, 289, 319)} 

[Timing] Preprocessing specifics: loading&cropping took 0.918267011642456, transposing took 3.24249267578125e-05 and 6.198883056640625e-06, resampling/normalizing took 4.780511379241943.
[Timing] preprocessing function took 5.7138471603393555 seconds
(1, 106, 289, 319)
[Timing] total time for preprocessing this item is 5.717108964920044
preprocessing /exports/lkeb-hpc/smaijer/output/601/3d_fullres/nnUNetTrainerV2_1000/601/imagesTr/panc_0532.nii.gz
using preprocessor GenericPreprocessor
[Timing] Loading took 0.4227924346923828 seconds
before crop: (1, 72, 260, 320) after crop: (1, 72, 255, 319) spacing: [3.     1.3125 1.3125] 

ff voor mezelf want snap data files niet, hier lengte van data files1
no separate z, order 3
no separate z, order 1
before: {'spacing': array([3.    , 1.3125, 1.3125]), 'spacing_transposed': array([3.    , 1.3125, 1.3125]), 'data.shape (data is transposed)': (1, 72, 255, 319)} 
after:  {'spacing': array([1.70314997, 1.1875    , 1.1875    ]), 'data.shape (data is resampled)': (1, 127, 282, 353)} 

[Timing] Preprocessing specifics: loading&cropping took 0.8137459754943848, transposing took 5.1975250244140625e-05 and 7.3909759521484375e-06, resampling/normalizing took 5.800644159317017.
[Timing] preprocessing function took 6.6742613315582275 seconds
(1, 127, 282, 353)
[Timing] total time for preprocessing this item is 316.3347358703613
preprocessing /exports/lkeb-hpc/smaijer/output/601/3d_fullres/nnUNetTrainerV2_1000/601/imagesTr/panc_0554.nii.gz
using preprocessor GenericPreprocessor
[Timing] Loading took 2.210418462753296 seconds
before crop: (1, 512, 168, 512) after crop: (1, 432, 168, 512) spacing: [0.82029998 1.10000002 0.82029998] 

ff voor mezelf want snap data files niet, hier lengte van data files1
no separate z, order 3
no separate z, order 1
before: {'spacing': array([0.82029998, 1.10000002, 0.82029998]), 'spacing_transposed': array([0.82029998, 1.10000002, 0.82029998]), 'data.shape (data is transposed)': (1, 432, 168, 512)} 
after:  {'spacing': array([1.70314997, 1.1875    , 1.1875    ]), 'data.shape (data is resampled)': (1, 208, 156, 354)} 

[Timing] Preprocessing specifics: loading&cropping took 4.903370380401611, transposing took 1.6689300537109375e-05 and 2.86102294921875e-06, resampling/normalizing took 8.33090353012085.
[Timing] preprocessing function took 13.28383731842041 seconds
(1, 208, 156, 354)
[Timing] total time for preprocessing this item is 277.920108795166
preprocessing /exports/lkeb-hpc/smaijer/output/601/3d_fullres/nnUNetTrainerV2_1000/601/imagesTr/panc_0578.nii.gz
using preprocessor GenericPreprocessor
[Timing] Loading took 1.9785199165344238 seconds
before crop: (1, 512, 168, 512) after crop: (1, 456, 168, 512) spacing: [0.82029998 1.10000002 0.82029998] 

ff voor mezelf want snap data files niet, hier lengte van data files1
no separate z, order 3
no separate z, order 1
before: {'spacing': array([0.82029998, 1.10000002, 0.82029998]), 'spacing_transposed': array([0.82029998, 1.10000002, 0.82029998]), 'data.shape (data is transposed)': (1, 456, 168, 512)} 
after:  {'spacing': array([1.70314997, 1.1875    , 1.1875    ]), 'data.shape (data is resampled)': (1, 220, 156, 354)} 

[Timing] Preprocessing specifics: loading&cropping took 4.7978222370147705, transposing took 2.5987625122070312e-05 and 5.245208740234375e-06, resampling/normalizing took 8.948344707489014.
[Timing] preprocessing function took 13.80614972114563 seconds
(1, 220, 156, 354)
[Timing] total time for preprocessing this item is 288.8912527561188
preprocessing /exports/lkeb-hpc/smaijer/output/601/3d_fullres/nnUNetTrainerV2_1000/601/imagesTr/panc_0589.nii.gz
using preprocessor GenericPreprocessor
[Timing] Loading took 0.7851443290710449 seconds
before crop: (1, 320, 60, 320) after crop: (1, 319, 60, 319) spacing: [1.1875 3.     1.1875] 

ff voor mezelf want snap data files niet, hier lengte van data files1
no separate z, order 3
no separate z, order 1
before: {'spacing': array([1.1875, 3.    , 1.1875]), 'spacing_transposed': array([1.1875, 3.    , 1.1875]), 'data.shape (data is transposed)': (1, 319, 60, 319)} 
after:  {'spacing': array([1.70314997, 1.1875    , 1.1875    ]), 'data.shape (data is resampled)': (1, 222, 152, 319)} 

[Timing] Preprocessing specifics: loading&cropping took 1.167879343032837, transposing took 2.193450927734375e-05 and 2.6226043701171875e-06, resampling/normalizing took 4.976099729537964.
[Timing] preprocessing function took 6.200347185134888 seconds
(1, 222, 152, 319)
[Timing] total time for preprocessing this item is 300.3675673007965
preprocessing /exports/lkeb-hpc/smaijer/output/601/3d_fullres/nnUNetTrainerV2_1000/601/imagesTr/panc_0596.nii.gz
using preprocessor GenericPreprocessor
[Timing] Loading took 0.6103372573852539 seconds
before crop: (1, 512, 168, 512) after crop: (1, 432, 168, 508) spacing: [0.82029998 1.10000002 0.82029998] 

ff voor mezelf want snap data files niet, hier lengte van data files1
no separate z, order 3
no separate z, order 1
before: {'spacing': array([0.82029998, 1.10000002, 0.82029998]), 'spacing_transposed': array([0.82029998, 1.10000002, 0.82029998]), 'data.shape (data is transposed)': (1, 432, 168, 508)} 
after:  {'spacing': array([1.70314997, 1.1875    , 1.1875    ]), 'data.shape (data is resampled)': (1, 208, 156, 351)} 

[Timing] Preprocessing specifics: loading&cropping took 3.4318275451660156, transposing took 2.0265579223632812e-05 and 3.337860107421875e-06, resampling/normalizing took 8.048314571380615.
[Timing] preprocessing function took 11.534655094146729 seconds
(1, 208, 156, 351)
[Timing] total time for preprocessing this item is 289.0083951950073
[Timing] This worker has ended successfully, no errors to report. It took 1667.7046673297882 seconds.
preprocessing /exports/lkeb-hpc/smaijer/output/601/3d_fullres/nnUNetTrainerV2_1000/601/imagesTr/panc_0510.nii.gz
using preprocessor GenericPreprocessor
[Timing] Loading took 0.721487283706665 seconds
before crop: (1, 320, 104, 260) after crop: (1, 319, 104, 259) spacing: [1.40625 1.5     1.40625] 

ff voor mezelf want snap data files niet, hier lengte van data files1
no separate z, order 3
no separate z, order 1
before: {'spacing': array([1.40625, 1.5    , 1.40625]), 'spacing_transposed': array([1.40625, 1.5    , 1.40625]), 'data.shape (data is transposed)': (1, 319, 104, 259)} 
after:  {'spacing': array([1.70314997, 1.1875    , 1.1875    ]), 'data.shape (data is resampled)': (1, 263, 131, 307)} 

[Timing] Preprocessing specifics: loading&cropping took 1.3380696773529053, transposing took 2.6464462280273438e-05 and 5.245208740234375e-06, resampling/normalizing took 5.255320072174072.
[Timing] preprocessing function took 6.612799882888794 seconds
(1, 263, 131, 307)
[Timing] total time for preprocessing this item is 86.47233986854553
preprocessing /exports/lkeb-hpc/smaijer/output/601/3d_fullres/nnUNetTrainerV2_1000/601/imagesTr/panc_0540.nii.gz
using preprocessor GenericPreprocessor
[Timing] Loading took 0.22525405883789062 seconds
before crop: (1, 100, 192, 192) after crop: (1, 100, 152, 192) spacing: [2.       1.953125 1.953125] 

ff voor mezelf want snap data files niet, hier lengte van data files1
no separate z, order 3
no separate z, order 1
before: {'spacing': array([2.      , 1.953125, 1.953125]), 'spacing_transposed': array([2.      , 1.953125, 1.953125]), 'data.shape (data is transposed)': (1, 100, 152, 192)} 
after:  {'spacing': array([1.70314997, 1.1875    , 1.1875    ]), 'data.shape (data is resampled)': (1, 117, 250, 316)} 

[Timing] Preprocessing specifics: loading&cropping took 0.47660374641418457, transposing took 3.933906555175781e-05 and 1.430511474609375e-06, resampling/normalizing took 4.093450307846069.
[Timing] preprocessing function took 4.62077522277832 seconds
(1, 117, 250, 316)
[Timing] total time for preprocessing this item is 331.8503768444061
preprocessing /exports/lkeb-hpc/smaijer/output/601/3d_fullres/nnUNetTrainerV2_1000/601/imagesTr/panc_0557.nii.gz
using preprocessor GenericPreprocessor
[Timing] Loading took 1.8380606174468994 seconds
before crop: (1, 512, 152, 512) after crop: (1, 449, 152, 510) spacing: [0.82029998 1.10000002 0.82029998] 

ff voor mezelf want snap data files niet, hier lengte van data files1
no separate z, order 3
no separate z, order 1
before: {'spacing': array([0.82029998, 1.10000002, 0.82029998]), 'spacing_transposed': array([0.82029998, 1.10000002, 0.82029998]), 'data.shape (data is transposed)': (1, 449, 152, 510)} 
after:  {'spacing': array([1.70314997, 1.1875    , 1.1875    ]), 'data.shape (data is resampled)': (1, 216, 141, 352)} 

[Timing] Preprocessing specifics: loading&cropping took 4.460282325744629, transposing took 3.7670135498046875e-05 and 5.245208740234375e-06, resampling/normalizing took 7.5657639503479.
[Timing] preprocessing function took 12.080218076705933 seconds
(1, 216, 141, 352)
[Timing] total time for preprocessing this item is 278.3201003074646
preprocessing /exports/lkeb-hpc/smaijer/output/601/3d_fullres/nnUNetTrainerV2_1000/601/imagesTr/panc_0585.nii.gz
using preprocessor GenericPreprocessor
[Timing] Loading took 0.5279393196105957 seconds
before crop: (1, 72, 260, 320) after crop: (1, 72, 258, 319) spacing: [3.     1.1875 1.1875] 

ff voor mezelf want snap data files niet, hier lengte van data files1
no separate z, order 3
no separate z, order 1
before: {'spacing': array([3.    , 1.1875, 1.1875]), 'spacing_transposed': array([3.    , 1.1875, 1.1875]), 'data.shape (data is transposed)': (1, 72, 258, 319)} 
after:  {'spacing': array([1.70314997, 1.1875    , 1.1875    ]), 'data.shape (data is resampled)': (1, 127, 258, 319)} 

[Timing] Preprocessing specifics: loading&cropping took 0.9598076343536377, transposing took 3.790855407714844e-05 and 2.86102294921875e-06, resampling/normalizing took 4.910084962844849.
[Timing] preprocessing function took 5.925477027893066 seconds
(1, 127, 258, 319)
[Timing] total time for preprocessing this item is 288.14950037002563
preprocessing /exports/lkeb-hpc/smaijer/output/601/3d_fullres/nnUNetTrainerV2_1000/601/imagesTr/panc_0592.nii.gz
using preprocessor GenericPreprocessor
[Timing] Loading took 3.095510721206665 seconds
before crop: (1, 512, 168, 512) after crop: (1, 472, 168, 510) spacing: [0.82029998 1.10000002 0.82029998] 

ff voor mezelf want snap data files niet, hier lengte van data files1
no separate z, order 3
no separate z, order 1
before: {'spacing': array([0.82029998, 1.10000002, 0.82029998]), 'spacing_transposed': array([0.82029998, 1.10000002, 0.82029998]), 'data.shape (data is transposed)': (1, 472, 168, 510)} 
after:  {'spacing': array([1.70314997, 1.1875    , 1.1875    ]), 'data.shape (data is resampled)': (1, 227, 156, 352)} 

[Timing] Preprocessing specifics: loading&cropping took 6.0754475593566895, transposing took 2.5987625122070312e-05 and 3.0994415283203125e-06, resampling/normalizing took 8.801587343215942.
[Timing] preprocessing function took 14.939624309539795 seconds
(1, 227, 156, 352)
[Timing] total time for preprocessing this item is 301.02458333969116
preprocessing /exports/lkeb-hpc/smaijer/output/601/3d_fullres/nnUNetTrainerV2_1000/601/imagesTr/panc_0599.nii.gz
using preprocessor GenericPreprocessor
[Timing] Loading took 0.13214921951293945 seconds
before crop: (1, 72, 260, 320) after crop: (1, 72, 258, 319) spacing: [3.     1.1875 1.1875] 

ff voor mezelf want snap data files niet, hier lengte van data files1
no separate z, order 3
no separate z, order 1
before: {'spacing': array([3.    , 1.1875, 1.1875]), 'spacing_transposed': array([3.    , 1.1875, 1.1875]), 'data.shape (data is transposed)': (1, 72, 258, 319)} 
after:  {'spacing': array([1.70314997, 1.1875    , 1.1875    ]), 'data.shape (data is resampled)': (1, 127, 258, 319)} 

[Timing] Preprocessing specifics: loading&cropping took 0.5365297794342041, transposing took 2.9325485229492188e-05 and 2.86102294921875e-06, resampling/normalizing took 4.86028790473938.
[Timing] preprocessing function took 5.455910921096802 seconds
(1, 127, 258, 319)
[Timing] total time for preprocessing this item is 287.3816330432892
[Timing] This worker has ended successfully, no errors to report. It took 1667.6511750221252 seconds.
preprocessing /exports/lkeb-hpc/smaijer/output/601/3d_fullres/nnUNetTrainerV2_1000/601/imagesTr/panc_0514.nii.gz
using preprocessor GenericPreprocessor
[Timing] Loading took 1.0116150379180908 seconds
before crop: (1, 320, 112, 260) after crop: (1, 319, 112, 259) spacing: [1.40625 1.5     1.40625] 

ff voor mezelf want snap data files niet, hier lengte van data files1
no separate z, order 3
no separate z, order 1
before: {'spacing': array([1.40625, 1.5    , 1.40625]), 'spacing_transposed': array([1.40625, 1.5    , 1.40625]), 'data.shape (data is transposed)': (1, 319, 112, 259)} 
after:  {'spacing': array([1.70314997, 1.1875    , 1.1875    ]), 'data.shape (data is resampled)': (1, 263, 141, 307)} 

[Timing] Preprocessing specifics: loading&cropping took 1.6329917907714844, transposing took 2.6464462280273438e-05 and 4.76837158203125e-06, resampling/normalizing took 5.534951686859131.
[Timing] preprocessing function took 7.186896562576294 seconds
(1, 263, 141, 307)
[Timing] total time for preprocessing this item is 133.4985957145691
preprocessing /exports/lkeb-hpc/smaijer/output/601/3d_fullres/nnUNetTrainerV2_1000/601/imagesTr/panc_0541.nii.gz
using preprocessor GenericPreprocessor
[Timing] Loading took 0.42262840270996094 seconds
before crop: (1, 72, 290, 320) after crop: (1, 72, 289, 319) spacing: [3.     1.1875 1.1875] 

ff voor mezelf want snap data files niet, hier lengte van data files1
no separate z, order 3
no separate z, order 1
before: {'spacing': array([3.    , 1.1875, 1.1875]), 'spacing_transposed': array([3.    , 1.1875, 1.1875]), 'data.shape (data is transposed)': (1, 72, 289, 319)} 
after:  {'spacing': array([1.70314997, 1.1875    , 1.1875    ]), 'data.shape (data is resampled)': (1, 127, 289, 319)} 

[Timing] Preprocessing specifics: loading&cropping took 0.843062162399292, transposing took 3.504753112792969e-05 and 3.814697265625e-06, resampling/normalizing took 5.451346158981323.
[Timing] preprocessing function took 6.340287446975708 seconds
(1, 127, 289, 319)
[Timing] total time for preprocessing this item is 333.46521377563477
preprocessing /exports/lkeb-hpc/smaijer/output/601/3d_fullres/nnUNetTrainerV2_1000/601/imagesTr/panc_0558.nii.gz
using preprocessor GenericPreprocessor
[Timing] Loading took 1.9036378860473633 seconds
before crop: (1, 512, 168, 512) after crop: (1, 472, 168, 512) spacing: [0.82029998 1.10000002 0.82029998] 

ff voor mezelf want snap data files niet, hier lengte van data files1
no separate z, order 3
no separate z, order 1
before: {'spacing': array([0.82029998, 1.10000002, 0.82029998]), 'spacing_transposed': array([0.82029998, 1.10000002, 0.82029998]), 'data.shape (data is transposed)': (1, 472, 168, 512)} 
after:  {'spacing': array([1.70314997, 1.1875    , 1.1875    ]), 'data.shape (data is resampled)': (1, 227, 156, 354)} 

[Timing] Preprocessing specifics: loading&cropping took 4.736214876174927, transposing took 2.288818359375e-05 and 3.337860107421875e-06, resampling/normalizing took 9.088184833526611.
[Timing] preprocessing function took 13.884191274642944 seconds
(1, 227, 156, 354)
[Timing] total time for preprocessing this item is 277.28035068511963
preprocessing /exports/lkeb-hpc/smaijer/output/601/3d_fullres/nnUNetTrainerV2_1000/601/imagesTr/panc_0586.nii.gz
using preprocessor GenericPreprocessor
[Timing] Loading took 0.8487565517425537 seconds
before crop: (1, 320, 144, 260) after crop: (1, 319, 144, 259) spacing: [1.40629995 1.5        1.40629995] 

ff voor mezelf want snap data files niet, hier lengte van data files1
no separate z, order 3
no separate z, order 1
before: {'spacing': array([1.40629995, 1.5       , 1.40629995]), 'spacing_transposed': array([1.40629995, 1.5       , 1.40629995]), 'data.shape (data is transposed)': (1, 319, 144, 259)} 
after:  {'spacing': array([1.70314997, 1.1875    , 1.1875    ]), 'data.shape (data is resampled)': (1, 263, 182, 307)} 

[Timing] Preprocessing specifics: loading&cropping took 1.5964090824127197, transposing took 2.1219253540039062e-05 and 3.0994415283203125e-06, resampling/normalizing took 7.035776853561401.
[Timing] preprocessing function took 8.69513988494873 seconds
(1, 263, 182, 307)
[Timing] total time for preprocessing this item is 289.37507128715515
preprocessing /exports/lkeb-hpc/smaijer/output/601/3d_fullres/nnUNetTrainerV2_1000/601/imagesTr/panc_0593.nii.gz
using preprocessor GenericPreprocessor
[Timing] Loading took 0.28245067596435547 seconds
before crop: (1, 72, 468, 576) after crop: (1, 72, 466, 575) spacing: [3.         0.69444442 0.69444442] 

ff voor mezelf want snap data files niet, hier lengte van data files1
separate z, order in z is 0 order inplane is 3
separate z, order in z is 0 order inplane is 1
before: {'spacing': array([3.        , 0.69444442, 0.69444442]), 'spacing_transposed': array([3.        , 0.69444442, 0.69444442]), 'data.shape (data is transposed)': (1, 72, 466, 575)} 
after:  {'spacing': array([1.70314997, 1.1875    , 1.1875    ]), 'data.shape (data is resampled)': (1, 127, 273, 336)} 

[Timing] Preprocessing specifics: loading&cropping took 1.6310691833496094, transposing took 3.600120544433594e-05 and 2.86102294921875e-06, resampling/normalizing took 4.109195947647095.
[Timing] preprocessing function took 5.8052215576171875 seconds
(1, 127, 273, 336)
[Timing] total time for preprocessing this item is 299.7347266674042
preprocessing /exports/lkeb-hpc/smaijer/output/601/3d_fullres/nnUNetTrainerV2_1000/601/imagesTr/panc_0600.nii.gz
using preprocessor GenericPreprocessor
[Timing] Loading took 0.10827994346618652 seconds
before crop: (1, 72, 260, 320) after crop: (1, 72, 258, 319) spacing: [3.     1.1875 1.1875] 

ff voor mezelf want snap data files niet, hier lengte van data files1
no separate z, order 3
no separate z, order 1
before: {'spacing': array([3.    , 1.1875, 1.1875]), 'spacing_transposed': array([3.    , 1.1875, 1.1875]), 'data.shape (data is transposed)': (1, 72, 258, 319)} 
after:  {'spacing': array([1.70314997, 1.1875    , 1.1875    ]), 'data.shape (data is resampled)': (1, 127, 258, 319)} 

[Timing] Preprocessing specifics: loading&cropping took 0.5262432098388672, transposing took 3.910064697265625e-05 and 2.6226043701171875e-06, resampling/normalizing took 4.877499103546143.
[Timing] preprocessing function took 5.458043575286865 seconds
(1, 127, 258, 319)
[Timing] total time for preprocessing this item is 239.90271043777466
[Timing] This worker has ended successfully, no errors to report. It took 1667.6261546611786 seconds.
0.5
do mirror: True
data shape: (1, 216, 141, 352)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 40, 80, 120], [0, 13], [0, 80, 160]]
number of tiles: 24
using precomputed Gaussian
prediction done
[Timing] fold 0 prediction took 10.011981725692749 seconds
[Timing] loading another fold took 0.030445337295532227 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 216, 141, 352)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 40, 80, 120], [0, 13], [0, 80, 160]]
number of tiles: 24
using precomputed Gaussian
prediction done
[Timing] another fold took 9.340072870254517 seconds
[Timing] loading another fold took 0.03739643096923828 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 216, 141, 352)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 40, 80, 120], [0, 13], [0, 80, 160]]
number of tiles: 24
using precomputed Gaussian
prediction done
[Timing] another fold took 9.361153364181519 seconds
[Timing] loading another fold took 0.02919483184814453 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 216, 141, 352)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 40, 80, 120], [0, 13], [0, 80, 160]]
number of tiles: 24
using precomputed Gaussian
prediction done
[Timing] another fold took 9.326131582260132 seconds
[Timing] loading another fold took 0.022474050521850586 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 216, 141, 352)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 40, 80, 120], [0, 13], [0, 80, 160]]
number of tiles: 24
using precomputed Gaussian
prediction done
[Timing] another fold took 9.399608135223389 seconds
[Timing] normalising with folds took 0.009209394454956055 seconds
[Timing] transposing backwards took 5.14984130859375e-05 seconds
[Timing] full prediction took 791.9823479652405 seconds
predicting /exports/lkeb-hpc/smaijer/output/601/3d_fullres/nnUNetTrainerV2_1000/601/imagesTr/panc_0558.nii.gz
[Timing] loading took 0.03280997276306152 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 227, 156, 354)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 44, 87, 131], [0, 28], [0, 81, 162]]
number of tiles: 24
using precomputed Gaussian
prediction done
[Timing] fold 0 prediction took 10.002339601516724 seconds
[Timing] loading another fold took 0.03284621238708496 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 227, 156, 354)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 44, 87, 131], [0, 28], [0, 81, 162]]
number of tiles: 24
using precomputed Gaussian
prediction done
[Timing] another fold took 9.497621536254883 seconds
[Timing] loading another fold took 0.030453920364379883 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 227, 156, 354)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 44, 87, 131], [0, 28], [0, 81, 162]]
number of tiles: 24
using precomputed Gaussian
prediction done
[Timing] another fold took 9.446383237838745 seconds
[Timing] loading another fold took 0.03037881851196289 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 227, 156, 354)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 44, 87, 131], [0, 28], [0, 81, 162]]
number of tiles: 24
using precomputed Gaussian
prediction done
[Timing] another fold took 9.37459683418274 seconds
[Timing] loading another fold took 0.022836923599243164 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 227, 156, 354)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 44, 87, 131], [0, 28], [0, 81, 162]]
number of tiles: 24
using precomputed Gaussian
prediction done
[Timing] another fold took 9.400301218032837 seconds
[Timing] normalising with folds took 0.00889730453491211 seconds
[Timing] transposing backwards took 6.365776062011719e-05 seconds
[Timing] full prediction took 839.9808528423309 seconds
predicting /exports/lkeb-hpc/smaijer/output/601/3d_fullres/nnUNetTrainerV2_1000/601/imagesTr/panc_0570.nii.gz
[Timing] loading took 0.03256583213806152 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 127, 258, 318)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 31], [0, 43, 87, 130], [0, 63, 126]]
number of tiles: 24
using precomputed Gaussian
prediction done
[Timing] fold 0 prediction took 10.279772281646729 seconds
[Timing] loading another fold took 0.032837629318237305 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 127, 258, 318)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 31], [0, 43, 87, 130], [0, 63, 126]]
number of tiles: 24
using precomputed Gaussian
prediction done
[Timing] another fold took 10.000389814376831 seconds
[Timing] loading another fold took 0.04218912124633789 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 127, 258, 318)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 31], [0, 43, 87, 130], [0, 63, 126]]
number of tiles: 24
using precomputed Gaussian
prediction done
[Timing] another fold took 9.46595025062561 seconds
[Timing] loading another fold took 0.031455039978027344 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 127, 258, 318)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 31], [0, 43, 87, 130], [0, 63, 126]]
number of tiles: 24
using precomputed Gaussian
prediction done
[Timing] another fold took 9.371325492858887 seconds
[Timing] loading another fold took 0.02275562286376953 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 127, 258, 318)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 31], [0, 43, 87, 130], [0, 63, 126]]
number of tiles: 24
using precomputed Gaussian
prediction done
[Timing] another fold took 9.435500860214233 seconds
[Timing] normalising with folds took 0.00982356071472168 seconds
[Timing] transposing backwards took 5.8650970458984375e-05 seconds
[Timing] full prediction took 888.81005692482 seconds
predicting /exports/lkeb-hpc/smaijer/output/601/3d_fullres/nnUNetTrainerV2_1000/601/imagesTr/panc_0580.nii.gz
[Timing] loading took 0.036449432373046875 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 222, 152, 319)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 42, 84, 126], [0, 24], [0, 64, 127]]
number of tiles: 24
using precomputed Gaussian
prediction done
[Timing] fold 0 prediction took 9.938607931137085 seconds
[Timing] loading another fold took 0.03248763084411621 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 222, 152, 319)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 42, 84, 126], [0, 24], [0, 64, 127]]
number of tiles: 24
using precomputed Gaussian
prediction done
[Timing] another fold took 9.364739179611206 seconds
[Timing] loading another fold took 0.03180527687072754 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 222, 152, 319)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 42, 84, 126], [0, 24], [0, 64, 127]]
number of tiles: 24
using precomputed Gaussian
prediction done
[Timing] another fold took 9.423719644546509 seconds
[Timing] loading another fold took 0.03320789337158203 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 222, 152, 319)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 42, 84, 126], [0, 24], [0, 64, 127]]
number of tiles: 24
using precomputed Gaussian
prediction done
[Timing] another fold took 9.591557741165161 seconds
[Timing] loading another fold took 0.02265787124633789 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 222, 152, 319)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 42, 84, 126], [0, 24], [0, 64, 127]]
number of tiles: 24
using precomputed Gaussian
prediction done
[Timing] another fold took 9.353495836257935 seconds
[Timing] normalising with folds took 0.008002519607543945 seconds
[Timing] transposing backwards took 3.719329833984375e-05 seconds
[Timing] full prediction took 936.7571456432343 seconds
predicting /exports/lkeb-hpc/smaijer/output/601/3d_fullres/nnUNetTrainerV2_1000/601/imagesTr/panc_0578.nii.gz
[Timing] loading took 0.030419349670410156 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 220, 156, 354)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 41, 83, 124], [0, 28], [0, 81, 162]]
number of tiles: 24
using precomputed Gaussian
prediction done
[Timing] fold 0 prediction took 10.01939058303833 seconds
[Timing] loading another fold took 0.037917137145996094 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 220, 156, 354)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 41, 83, 124], [0, 28], [0, 81, 162]]
number of tiles: 24
using precomputed Gaussian
prediction done
[Timing] another fold took 9.454376459121704 seconds
[Timing] loading another fold took 0.0330805778503418 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 220, 156, 354)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 41, 83, 124], [0, 28], [0, 81, 162]]
number of tiles: 24
using precomputed Gaussian
prediction done
[Timing] another fold took 9.497483730316162 seconds
[Timing] loading another fold took 0.028664588928222656 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 220, 156, 354)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 41, 83, 124], [0, 28], [0, 81, 162]]
number of tiles: 24
using precomputed Gaussian
prediction done
[Timing] another fold took 9.419202089309692 seconds
[Timing] loading another fold took 0.023776769638061523 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 220, 156, 354)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 41, 83, 124], [0, 28], [0, 81, 162]]
number of tiles: 24
using precomputed Gaussian
prediction done
[Timing] another fold took 9.387613534927368 seconds
[Timing] normalising with folds took 0.008636474609375 seconds
[Timing] transposing backwards took 3.7670135498046875e-05 seconds
[Timing] full prediction took 984.7945871353149 seconds
predicting /exports/lkeb-hpc/smaijer/output/601/3d_fullres/nnUNetTrainerV2_1000/601/imagesTr/panc_0588.nii.gz
[Timing] loading took 0.03376960754394531 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 239, 156, 354)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 48, 95, 143], [0, 28], [0, 81, 162]]
number of tiles: 24
using precomputed Gaussian
prediction done
[Timing] fold 0 prediction took 10.253887176513672 seconds
[Timing] loading another fold took 0.03361105918884277 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 239, 156, 354)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 48, 95, 143], [0, 28], [0, 81, 162]]
number of tiles: 24
using precomputed Gaussian
prediction done
[Timing] another fold took 9.791310787200928 seconds
[Timing] loading another fold took 0.03245687484741211 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 239, 156, 354)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 48, 95, 143], [0, 28], [0, 81, 162]]
number of tiles: 24
using precomputed Gaussian
prediction done
[Timing] another fold took 9.460586786270142 seconds
[Timing] loading another fold took 0.03041553497314453 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 239, 156, 354)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 48, 95, 143], [0, 28], [0, 81, 162]]
number of tiles: 24
using precomputed Gaussian
prediction done
[Timing] another fold took 9.425498723983765 seconds
[Timing] loading another fold took 0.023501157760620117 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 239, 156, 354)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 48, 95, 143], [0, 28], [0, 81, 162]]
number of tiles: 24
using precomputed Gaussian
prediction done
[Timing] another fold took 9.647194147109985 seconds
[Timing] normalising with folds took 0.00963902473449707 seconds
[Timing] transposing backwards took 5.602836608886719e-05 seconds
[Timing] full prediction took 1033.646405696869 seconds
predicting /exports/lkeb-hpc/smaijer/output/601/3d_fullres/nnUNetTrainerV2_1000/601/imagesTr/panc_0585.nii.gz
[Timing] loading took 0.038736820220947266 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 127, 258, 319)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 31], [0, 43, 87, 130], [0, 64, 127]]
number of tiles: 24
using precomputed Gaussian
prediction done
[Timing] fold 0 prediction took 9.932724714279175 seconds
[Timing] loading another fold took 0.03473711013793945 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 127, 258, 319)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 31], [0, 43, 87, 130], [0, 64, 127]]
number of tiles: 24
using precomputed Gaussian
prediction done
[Timing] another fold took 9.446111679077148 seconds
[Timing] loading another fold took 0.030590295791625977 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 127, 258, 319)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 31], [0, 43, 87, 130], [0, 64, 127]]
number of tiles: 24
using precomputed Gaussian
prediction done
[Timing] another fold took 9.368840217590332 seconds
[Timing] loading another fold took 0.03333163261413574 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 127, 258, 319)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 31], [0, 43, 87, 130], [0, 64, 127]]
number of tiles: 24
using precomputed Gaussian
prediction done
[Timing] another fold took 9.323917865753174 seconds
[Timing] loading another fold took 0.023670434951782227 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 127, 258, 319)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 31], [0, 43, 87, 130], [0, 64, 127]]
number of tiles: 24
using precomputed Gaussian
prediction done
[Timing] another fold took 9.364632844924927 seconds
[Timing] normalising with folds took 0.007552146911621094 seconds
[Timing] transposing backwards took 4.863739013671875e-05 seconds
[Timing] full prediction took 1081.3600280284882 seconds
predicting /exports/lkeb-hpc/smaijer/output/601/3d_fullres/nnUNetTrainerV2_1000/601/imagesTr/panc_0586.nii.gz
[Timing] loading took 0.03191184997558594 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 263, 182, 307)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 42, 84, 125, 167], [0, 54], [0, 58, 115]]
number of tiles: 30
using precomputed Gaussian
prediction done
[Timing] fold 0 prediction took 12.736793994903564 seconds
[Timing] loading another fold took 0.035416364669799805 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 263, 182, 307)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 42, 84, 125, 167], [0, 54], [0, 58, 115]]
number of tiles: 30
using precomputed Gaussian
prediction done
[Timing] another fold took 11.886671781539917 seconds
[Timing] loading another fold took 0.03196549415588379 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 263, 182, 307)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 42, 84, 125, 167], [0, 54], [0, 58, 115]]
number of tiles: 30
using precomputed Gaussian
prediction done
[Timing] another fold took 11.753251552581787 seconds
[Timing] loading another fold took 0.03127765655517578 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 263, 182, 307)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 42, 84, 125, 167], [0, 54], [0, 58, 115]]
number of tiles: 30
using precomputed Gaussian
prediction done
[Timing] another fold took 11.765574932098389 seconds
[Timing] loading another fold took 0.022771835327148438 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 263, 182, 307)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 42, 84, 125, 167], [0, 54], [0, 58, 115]]
number of tiles: 30
using precomputed Gaussian
prediction done
[Timing] another fold took 11.680041313171387 seconds
[Timing] normalising with folds took 0.010519266128540039 seconds
[Timing] transposing backwards took 4.315376281738281e-05 seconds
[Timing] full prediction took 1141.4546897411346 seconds
predicting /exports/lkeb-hpc/smaijer/output/601/3d_fullres/nnUNetTrainerV2_1000/601/imagesTr/panc_0587.nii.gz
[Timing] loading took 0.03094935417175293 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 127, 259, 319)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 31], [0, 44, 87, 131], [0, 64, 127]]
number of tiles: 24
using precomputed Gaussian
prediction done
[Timing] fold 0 prediction took 9.845545291900635 seconds
[Timing] loading another fold took 0.03508186340332031 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 127, 259, 319)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 31], [0, 44, 87, 131], [0, 64, 127]]
number of tiles: 24
using precomputed Gaussian
prediction done
[Timing] another fold took 9.468974351882935 seconds
[Timing] loading another fold took 0.032854318618774414 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 127, 259, 319)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 31], [0, 44, 87, 131], [0, 64, 127]]
number of tiles: 24
using precomputed Gaussian
prediction done
[Timing] another fold took 9.371535301208496 seconds
[Timing] loading another fold took 0.03196430206298828 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 127, 259, 319)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 31], [0, 44, 87, 131], [0, 64, 127]]
number of tiles: 24
using precomputed Gaussian
prediction done
[Timing] another fold took 9.440422058105469 seconds
[Timing] loading another fold took 0.024085044860839844 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 127, 259, 319)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 31], [0, 44, 87, 131], [0, 64, 127]]
number of tiles: 24
using precomputed Gaussian
prediction done
[Timing] another fold took 9.31285572052002 seconds
[Timing] normalising with folds took 0.007515907287597656 seconds
[Timing] transposing backwards took 3.6716461181640625e-05 seconds
[Timing] full prediction took 1189.1712336540222 seconds
predicting /exports/lkeb-hpc/smaijer/output/601/3d_fullres/nnUNetTrainerV2_1000/601/imagesTr/panc_0590.nii.gz
[Timing] loading took 0.03393125534057617 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 239, 156, 352)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 48, 95, 143], [0, 28], [0, 80, 160]]
number of tiles: 24
using precomputed Gaussian
prediction done
[Timing] fold 0 prediction took 10.374680757522583 seconds
[Timing] loading another fold took 0.031781673431396484 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 239, 156, 352)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 48, 95, 143], [0, 28], [0, 80, 160]]
number of tiles: 24
using precomputed Gaussian
prediction done
[Timing] another fold took 9.730230331420898 seconds
[Timing] loading another fold took 0.03429889678955078 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 239, 156, 352)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 48, 95, 143], [0, 28], [0, 80, 160]]
number of tiles: 24
using precomputed Gaussian
prediction done
[Timing] another fold took 9.505396604537964 seconds
[Timing] loading another fold took 0.033653974533081055 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 239, 156, 352)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 48, 95, 143], [0, 28], [0, 80, 160]]
number of tiles: 24
using precomputed Gaussian
prediction done
[Timing] another fold took 9.606262922286987 seconds
[Timing] loading another fold took 0.022837400436401367 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 239, 156, 352)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 48, 95, 143], [0, 28], [0, 80, 160]]
number of tiles: 24
using precomputed Gaussian
prediction done
[Timing] another fold took 9.510141849517822 seconds
[Timing] normalising with folds took 0.009679794311523438 seconds
[Timing] transposing backwards took 3.719329833984375e-05 seconds
[Timing] full prediction took 1238.179703950882 seconds
predicting /exports/lkeb-hpc/smaijer/output/601/3d_fullres/nnUNetTrainerV2_1000/601/imagesTr/panc_0589.nii.gz
[Timing] loading took 0.030733585357666016 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 222, 152, 319)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 42, 84, 126], [0, 24], [0, 64, 127]]
number of tiles: 24
using precomputed Gaussian
prediction done
[Timing] fold 0 prediction took 9.83522891998291 seconds
[Timing] loading another fold took 0.03091883659362793 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 222, 152, 319)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 42, 84, 126], [0, 24], [0, 64, 127]]
number of tiles: 24
using precomputed Gaussian
prediction done
[Timing] another fold took 9.375307321548462 seconds
[Timing] loading another fold took 0.034441232681274414 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 222, 152, 319)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 42, 84, 126], [0, 24], [0, 64, 127]]
number of tiles: 24
using precomputed Gaussian
prediction done
[Timing] another fold took 9.330134630203247 seconds
[Timing] loading another fold took 0.03338146209716797 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 222, 152, 319)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 42, 84, 126], [0, 24], [0, 64, 127]]
number of tiles: 24
using precomputed Gaussian
prediction done
[Timing] another fold took 9.4200918674469 seconds
[Timing] loading another fold took 0.024675846099853516 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 222, 152, 319)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 42, 84, 126], [0, 24], [0, 64, 127]]
number of tiles: 24
using precomputed Gaussian
prediction done
[Timing] another fold took 9.416620016098022 seconds
[Timing] normalising with folds took 0.00829625129699707 seconds
[Timing] transposing backwards took 4.3392181396484375e-05 seconds
[Timing] full prediction took 1285.830688714981 seconds
predicting /exports/lkeb-hpc/smaijer/output/601/3d_fullres/nnUNetTrainerV2_1000/601/imagesTr/panc_0595.nii.gz
[Timing] loading took 0.034157514572143555 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 127, 258, 319)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 31], [0, 43, 87, 130], [0, 64, 127]]
number of tiles: 24
using precomputed Gaussian
prediction done
[Timing] fold 0 prediction took 9.804350852966309 seconds
[Timing] loading another fold took 0.03315472602844238 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 127, 258, 319)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 31], [0, 43, 87, 130], [0, 64, 127]]
number of tiles: 24
using precomputed Gaussian
prediction done
[Timing] another fold took 9.401155710220337 seconds
[Timing] loading another fold took 0.03754091262817383 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 127, 258, 319)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 31], [0, 43, 87, 130], [0, 64, 127]]
number of tiles: 24
using precomputed Gaussian
prediction done
[Timing] another fold took 9.31652545928955 seconds
[Timing] loading another fold took 0.031687021255493164 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 127, 258, 319)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 31], [0, 43, 87, 130], [0, 64, 127]]
number of tiles: 24
using precomputed Gaussian
prediction done
[Timing] another fold took 9.402304410934448 seconds
[Timing] loading another fold took 0.022500038146972656 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 127, 258, 319)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 31], [0, 43, 87, 130], [0, 64, 127]]
number of tiles: 24
using precomputed Gaussian
prediction done
[Timing] another fold took 9.375346183776855 seconds
[Timing] normalising with folds took 0.008711576461791992 seconds
[Timing] transposing backwards took 8.177757263183594e-05 seconds
[Timing] full prediction took 1333.3920152187347 seconds
predicting /exports/lkeb-hpc/smaijer/output/601/3d_fullres/nnUNetTrainerV2_1000/601/imagesTr/panc_0592.nii.gz
[Timing] loading took 0.031531333923339844 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 227, 156, 352)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 44, 87, 131], [0, 28], [0, 80, 160]]
number of tiles: 24
using precomputed Gaussian
prediction done
[Timing] fold 0 prediction took 10.036961793899536 seconds
[Timing] loading another fold took 0.03351235389709473 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 227, 156, 352)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 44, 87, 131], [0, 28], [0, 80, 160]]
number of tiles: 24
using precomputed Gaussian
prediction done
[Timing] another fold took 9.490546703338623 seconds
[Timing] loading another fold took 0.03530001640319824 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 227, 156, 352)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 44, 87, 131], [0, 28], [0, 80, 160]]
number of tiles: 24
using precomputed Gaussian
prediction done
[Timing] another fold took 9.449617862701416 seconds
[Timing] loading another fold took 0.030631542205810547 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 227, 156, 352)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 44, 87, 131], [0, 28], [0, 80, 160]]
number of tiles: 24
using precomputed Gaussian
prediction done
[Timing] another fold took 9.381369352340698 seconds
[Timing] loading another fold took 0.022594690322875977 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 227, 156, 352)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 44, 87, 131], [0, 28], [0, 80, 160]]
number of tiles: 24
using precomputed Gaussian
prediction done
[Timing] another fold took 9.382573127746582 seconds
[Timing] normalising with folds took 0.010295629501342773 seconds
[Timing] transposing backwards took 4.7206878662109375e-05 seconds
[Timing] full prediction took 1381.3979234695435 seconds
predicting /exports/lkeb-hpc/smaijer/output/601/3d_fullres/nnUNetTrainerV2_1000/601/imagesTr/panc_0593.nii.gz
[Timing] loading took 0.03612780570983887 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 127, 273, 336)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 31], [0, 48, 97, 145], [0, 72, 144]]
number of tiles: 24
using precomputed Gaussian
prediction done
[Timing] fold 0 prediction took 9.815118074417114 seconds
[Timing] loading another fold took 0.036527156829833984 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 127, 273, 336)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 31], [0, 48, 97, 145], [0, 72, 144]]
number of tiles: 24
using precomputed Gaussian
prediction done
[Timing] another fold took 9.736721277236938 seconds
[Timing] loading another fold took 0.03029036521911621 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 127, 273, 336)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 31], [0, 48, 97, 145], [0, 72, 144]]
number of tiles: 24
using precomputed Gaussian
prediction done
[Timing] another fold took 9.423658847808838 seconds
[Timing] loading another fold took 0.029791593551635742 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 127, 273, 336)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 31], [0, 48, 97, 145], [0, 72, 144]]
number of tiles: 24
using precomputed Gaussian
prediction done
[Timing] another fold took 9.39597225189209 seconds
[Timing] loading another fold took 0.022194862365722656 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 127, 273, 336)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 31], [0, 48, 97, 145], [0, 72, 144]]
number of tiles: 24
using precomputed Gaussian
prediction done
[Timing] another fold took 9.381704092025757 seconds
[Timing] normalising with folds took 0.010091781616210938 seconds
[Timing] transposing backwards took 3.910064697265625e-05 seconds
[Timing] full prediction took 1429.4269423484802 seconds
predicting /exports/lkeb-hpc/smaijer/output/601/3d_fullres/nnUNetTrainerV2_1000/601/imagesTr/panc_0594.nii.gz
[Timing] loading took 0.03369283676147461 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 235, 156, 354)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 46, 93, 139], [0, 28], [0, 81, 162]]
number of tiles: 24
using precomputed Gaussian
prediction done
[Timing] fold 0 prediction took 9.857448101043701 seconds
[Timing] loading another fold took 0.03261876106262207 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 235, 156, 354)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 46, 93, 139], [0, 28], [0, 81, 162]]
number of tiles: 24
using precomputed Gaussian
prediction done
[Timing] another fold took 9.775154829025269 seconds
[Timing] loading another fold took 0.041457176208496094 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 235, 156, 354)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 46, 93, 139], [0, 28], [0, 81, 162]]
number of tiles: 24
using precomputed Gaussian
prediction done
[Timing] another fold took 9.731474876403809 seconds
[Timing] loading another fold took 0.03759598731994629 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 235, 156, 354)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 46, 93, 139], [0, 28], [0, 81, 162]]
number of tiles: 24
using precomputed Gaussian
prediction done
[Timing] another fold took 9.639926433563232 seconds
[Timing] loading another fold took 0.02319478988647461 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 235, 156, 354)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 46, 93, 139], [0, 28], [0, 81, 162]]
number of tiles: 24
using precomputed Gaussian
prediction done
[Timing] another fold took 9.461880683898926 seconds
[Timing] normalising with folds took 0.009148836135864258 seconds
[Timing] transposing backwards took 4.482269287109375e-05 seconds
[Timing] full prediction took 1478.1862649917603 seconds
predicting /exports/lkeb-hpc/smaijer/output/601/3d_fullres/nnUNetTrainerV2_1000/601/imagesTr/panc_0597.nii.gz
[Timing] loading took 0.031203508377075195 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 222, 152, 319)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 42, 84, 126], [0, 24], [0, 64, 127]]
number of tiles: 24
using precomputed Gaussian
prediction done
[Timing] fold 0 prediction took 9.79219913482666 seconds
force_separate_z: None interpolation order: 1
separate z: False lowres axis None
no separate z, order 1
suus we gaan schrijven naar /exports/lkeb-hpc/smaijer/output/601/3d_fullres/nnUNetTrainerV2_1000/601/imagesTr/panc_0507.nii.gz
[Timing] - Resampling the segmentation to original shape took 0.8749599456787109 seconds
[Timing] - Saving the segmentation took 0.056351423263549805 seconds
force_separate_z: None interpolation order: 1
separate z: False lowres axis None
no separate z, order 1
suus we gaan schrijven naar /exports/lkeb-hpc/smaijer/output/601/3d_fullres/nnUNetTrainerV2_1000/601/imagesTr/panc_0510.nii.gz
[Timing] - Resampling the segmentation to original shape took 1.1458690166473389 seconds
[Timing] - Saving the segmentation took 0.052947044372558594 seconds
force_separate_z: None interpolation order: 1
separate z: False lowres axis None
no separate z, order 1
suus we gaan schrijven naar /exports/lkeb-hpc/smaijer/output/601/3d_fullres/nnUNetTrainerV2_1000/601/imagesTr/panc_0518.nii.gz
[Timing] - Resampling the segmentation to original shape took 2.147869110107422 seconds
[Timing] - Saving the segmentation took 0.11944389343261719 seconds
force_separate_z: None interpolation order: 1
separate z: False lowres axis None
no separate z, order 1
suus we gaan schrijven naar /exports/lkeb-hpc/smaijer/output/601/3d_fullres/nnUNetTrainerV2_1000/601/imagesTr/panc_0532.nii.gz
[Timing] - Resampling the segmentation to original shape took 0.8038010597229004 seconds
[Timing] - Saving the segmentation took 0.03779268264770508 seconds
force_separate_z: None interpolation order: 1
separate z: False lowres axis None
no separate z, order 1
suus we gaan schrijven naar /exports/lkeb-hpc/smaijer/output/601/3d_fullres/nnUNetTrainerV2_1000/601/imagesTr/panc_0540.nii.gz
[Timing] - Resampling the segmentation to original shape took 0.4075934886932373 seconds
[Timing] - Saving the segmentation took 0.025649547576904297 seconds
force_separate_z: None interpolation order: 1
separate z: False lowres axis None
no separate z, order 1
suus we gaan schrijven naar /exports/lkeb-hpc/smaijer/output/601/3d_fullres/nnUNetTrainerV2_1000/601/imagesTr/panc_0548.nii.gz
[Timing] - Resampling the segmentation to original shape took 0.7745585441589355 seconds
[Timing] - Saving the segmentation took 0.09264564514160156 seconds
force_separate_z: None interpolation order: 1
separate z: False lowres axis None
no separate z, order 1
suus we gaan schrijven naar /exports/lkeb-hpc/smaijer/output/601/3d_fullres/nnUNetTrainerV2_1000/601/imagesTr/panc_0554.nii.gz
[Timing] - Resampling the segmentation to original shape took 4.59266996383667 seconds
[Timing] - Saving the segmentation took 0.2489330768585205 seconds
force_separate_z: None interpolation order: 1
separate z: False lowres axis None
no separate z, order 1
suus we gaan schrijven naar /exports/lkeb-hpc/smaijer/output/601/3d_fullres/nnUNetTrainerV2_1000/601/imagesTr/panc_0557.nii.gz
[Timing] - Resampling the segmentation to original shape took 4.267119884490967 seconds
[Timing] - Saving the segmentation took 0.2232828140258789 seconds
force_separate_z: None interpolation order: 1
separate z: False lowres axis None
no separate z, order 1
suus we gaan schrijven naar /exports/lkeb-hpc/smaijer/output/601/3d_fullres/nnUNetTrainerV2_1000/601/imagesTr/panc_0570.nii.gz
[Timing] - Resampling the segmentation to original shape took 0.7781093120574951 seconds
[Timing] - Saving the segmentation took 0.06280398368835449 seconds
force_separate_z: None interpolation order: 1
separate z: False lowres axis None
no separate z, order 1
suus we gaan schrijven naar /exports/lkeb-hpc/smaijer/output/601/3d_fullres/nnUNetTrainerV2_1000/601/imagesTr/panc_0578.nii.gz
[Timing] - Resampling the segmentation to original shape took 4.844945907592773 seconds
[Timing] - Saving the segmentation took 0.24975371360778809 seconds
force_separate_z: None interpolation order: 1
separate z: False lowres axis None
no separate z, order 1
suus we gaan schrijven naar /exports/lkeb-hpc/smaijer/output/601/3d_fullres/nnUNetTrainerV2_1000/601/imagesTr/panc_0585.nii.gz
[Timing] - Resampling the segmentation to original shape took 0.7594592571258545 seconds
[Timing] - Saving the segmentation took 0.04443216323852539 seconds
force_separate_z: None interpolation order: 1
separate z: False lowres axis None
no separate z, order 1
suus we gaan schrijven naar /exports/lkeb-hpc/smaijer/output/601/3d_fullres/nnUNetTrainerV2_1000/601/imagesTr/panc_0587.nii.gz
[Timing] - Resampling the segmentation to original shape took 0.7797746658325195 seconds
[Timing] - Saving the segmentation took 0.05159640312194824 seconds
force_separate_z: None interpolation order: 1
separate z: False lowres axis None
no separate z, order 1
suus we gaan schrijven naar /exports/lkeb-hpc/smaijer/output/601/3d_fullres/nnUNetTrainerV2_1000/601/imagesTr/panc_0589.nii.gz
[Timing] - Resampling the segmentation to original shape took 0.8199820518493652 seconds
[Timing] - Saving the segmentation took 0.0542149543762207 seconds
force_separate_z: None interpolation order: 1
separate z: False lowres axis None
no separate z, order 1
suus we gaan schrijven naar /exports/lkeb-hpc/smaijer/output/601/3d_fullres/nnUNetTrainerV2_1000/601/imagesTr/panc_0592.nii.gz
[Timing] - Resampling the segmentation to original shape took 4.9400622844696045 seconds
[Timing] - Saving the segmentation took 0.2490081787109375 seconds
force_separate_z: None interpolation order: 1
separate z: False lowres axis None
no separate z, order 1
suus we gaan schrijven naar /exports/lkeb-hpc/smaijer/output/601/3d_fullres/nnUNetTrainerV2_1000/601/imagesTr/panc_0594.nii.gz
[Timing] - Resampling the segmentation to original shape took 5.186610698699951 seconds
[Timing] - Saving the segmentation took 0.2464892864227295 seconds
force_separate_z: None interpolation order: 1
separate z: False lowres axis None
no separate z, order 1
suus we gaan schrijven naar /exports/lkeb-hpc/smaijer/output/601/3d_fullres/nnUNetTrainerV2_1000/601/imagesTr/panc_0596.nii.gz
[Timing] - Resampling the segmentation to original shape took 4.485335826873779 seconds
[Timing] - Saving the segmentation took 0.4268226623535156 seconds
force_separate_z: None interpolation order: 1
separate z: False lowres axis None
no separate z, order 1
suus we gaan schrijven naar /exports/lkeb-hpc/smaijer/output/601/3d_fullres/nnUNetTrainerV2_1000/601/imagesTr/panc_0600.nii.gz
[Timing] - Resampling the segmentation to original shape took 0.7707676887512207 seconds
[Timing] - Saving the segmentation took 0.03785824775695801 seconds
force_separate_z: None interpolation order: 1
separate z: False lowres axis None
no separate z, order 1
suus we gaan schrijven naar /exports/lkeb-hpc/smaijer/output/601/3d_fullres/nnUNetTrainerV2_1000/601/imagesTr/panc_0508.nii.gz
[Timing] - Resampling the segmentation to original shape took 0.8572137355804443 seconds
[Timing] - Saving the segmentation took 0.0616755485534668 seconds
force_separate_z: None interpolation order: 1
separate z: False lowres axis None
no separate z, order 1
suus we gaan schrijven naar /exports/lkeb-hpc/smaijer/output/601/3d_fullres/nnUNetTrainerV2_1000/601/imagesTr/panc_0530.nii.gz
[Timing] - Resampling the segmentation to original shape took 0.790088415145874 seconds
[Timing] - Saving the segmentation took 0.03893566131591797 seconds
force_separate_z: None interpolation order: 1
separate z: False lowres axis None
no separate z, order 1
suus we gaan schrijven naar /exports/lkeb-hpc/smaijer/output/601/3d_fullres/nnUNetTrainerV2_1000/601/imagesTr/panc_0514.nii.gz
[Timing] - Resampling the segmentation to original shape took 1.2055816650390625 seconds
[Timing] - Saving the segmentation took 0.0822145938873291 seconds
force_separate_z: None interpolation order: 1
separate z: False lowres axis None
no separate z, order 1
suus we gaan schrijven naar /exports/lkeb-hpc/smaijer/output/601/3d_fullres/nnUNetTrainerV2_1000/601/imagesTr/panc_0538.nii.gz
[Timing] - Resampling the segmentation to original shape took 0.7196121215820312 seconds
[Timing] - Saving the segmentation took 0.03400826454162598 seconds
force_separate_z: None interpolation order: 1
separate z: True lowres axis [0]
separate z, order in z is 0 order inplane is 1
suus we gaan schrijven naar /exports/lkeb-hpc/smaijer/output/601/3d_fullres/nnUNetTrainerV2_1000/601/imagesTr/panc_0551.nii.gz
[Timing] - Resampling the segmentation to original shape took 5.558666467666626 seconds
[Timing] - Saving the segmentation took 0.11206340789794922 seconds
force_separate_z: None interpolation order: 1
separate z: False lowres axis None
no separate z, order 1
suus we gaan schrijven naar /exports/lkeb-hpc/smaijer/output/601/3d_fullres/nnUNetTrainerV2_1000/601/imagesTr/panc_0541.nii.gz
[Timing] - Resampling the segmentation to original shape took 0.8598127365112305 seconds
[Timing] - Saving the segmentation took 0.08861684799194336 seconds
force_separate_z: None interpolation order: 1
separate z: False lowres axis None
no separate z, order 1
suus we gaan schrijven naar /exports/lkeb-hpc/smaijer/output/601/3d_fullres/nnUNetTrainerV2_1000/601/imagesTr/panc_0555.nii.gz
[Timing] - Resampling the segmentation to original shape took 0.6545510292053223 seconds
[Timing] - Saving the segmentation took 0.03124833106994629 seconds
force_separate_z: None interpolation order: 1
separate z: False lowres axis None
no separate z, order 1
suus we gaan schrijven naar /exports/lkeb-hpc/smaijer/output/601/3d_fullres/nnUNetTrainerV2_1000/601/imagesTr/panc_0571.nii.gz
[Timing] - Resampling the segmentation to original shape took 0.7874972820281982 seconds
[Timing] - Saving the segmentation took 0.059203147888183594 seconds
force_separate_z: None interpolation order: 1
separate z: False lowres axis None
no separate z, order 1
suus we gaan schrijven naar /exports/lkeb-hpc/smaijer/output/601/3d_fullres/nnUNetTrainerV2_1000/601/imagesTr/panc_0558.nii.gz
[Timing] - Resampling the segmentation to original shape took 4.94272518157959 seconds
[Timing] - Saving the segmentation took 0.24601292610168457 seconds
force_separate_z: None interpolation order: 1
separate z: False lowres axis None
no separate z, order 1
suus we gaan schrijven naar /exports/lkeb-hpc/smaijer/output/601/3d_fullres/nnUNetTrainerV2_1000/601/imagesTr/panc_0580.nii.gz
[Timing] - Resampling the segmentation to original shape took 0.8164041042327881 seconds
[Timing] - Saving the segmentation took 0.04142498970031738 seconds
force_separate_z: None interpolation order: 1
separate z: False lowres axis None
no separate z, order 1
suus we gaan schrijven naar /exports/lkeb-hpc/smaijer/output/601/3d_fullres/nnUNetTrainerV2_1000/601/imagesTr/panc_0588.nii.gz
[Timing] - Resampling the segmentation to original shape took 5.271888494491577 seconds
[Timing] - Saving the segmentation took 0.2780137062072754 seconds
force_separate_z: None interpolation order: 1
separate z: False lowres axis None
no separate z, order 1
suus we gaan schrijven naar /exports/lkeb-hpc/smaijer/output/601/3d_fullres/nnUNetTrainerV2_1000/601/imagesTr/panc_0586.nii.gz
[Timing] - Resampling the segmentation to original shape took 1.505098581314087 seconds
[Timing] - Saving the segmentation took 0.07125234603881836 seconds
force_separate_z: None interpolation order: 1
separate z: False lowres axis None
no separate z, order 1
suus we gaan schrijven naar /exports/lkeb-hpc/smaijer/output/601/3d_fullres/nnUNetTrainerV2_1000/601/imagesTr/panc_0590.nii.gz
[Timing] - Resampling the segmentation to original shape took 5.037377834320068 seconds
[Timing] - Saving the segmentation took 0.24862122535705566 seconds
force_separate_z: None interpolation order: 1
separate z: False lowres axis None
no separate z, order 1
suus we gaan schrijven naar /exports/lkeb-hpc/smaijer/output/601/3d_fullres/nnUNetTrainerV2_1000/601/imagesTr/panc_0595.nii.gz
[Timing] - Resampling the segmentation to original shape took 0.766110897064209 seconds
[Timing] - Saving the segmentation took 0.08738470077514648 seconds
force_separate_z: None interpolation order: 1
separate z: True lowres axis [0]
separate z, order in z is 0 order inplane is 1
suus we gaan schrijven naar /exports/lkeb-hpc/smaijer/output/601/3d_fullres/nnUNetTrainerV2_1000/601/imagesTr/panc_0593.nii.gz
[Timing] - Resampling the segmentation to original shape took 5.666654109954834 seconds
[Timing] - Saving the segmentation took 0.12985444068908691 seconds
force_separate_z: None interpolation order: 1
separate z: False lowres axis None
no separate z, order 1
suus we gaan schrijven naar /exports/lkeb-hpc/smaijer/output/601/3d_fullres/nnUNetTrainerV2_1000/601/imagesTr/panc_0597.nii.gz
[Timing] - Resampling the segmentation to original shape took 0.8250815868377686 seconds
[Timing] - Saving the segmentation took 0.04716992378234863 seconds
force_separate_z: None interpolation order: 1
separate z: False lowres axis None
no separate z, order 1
suus we gaan schrijven naar /exports/lkeb-hpc/smaijer/output/601/3d_fullres/nnUNetTrainerV2_1000/601/imagesTr/panc_0599.nii.gz
[Timing] - Resampling the segmentation to original shape took 0.7782347202301025 seconds
[Timing] - Saving the segmentation took 0.038375139236450195 seconds
[Timing] loading another fold took 0.03173184394836426 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 222, 152, 319)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 42, 84, 126], [0, 24], [0, 64, 127]]
number of tiles: 24
using precomputed Gaussian
prediction done
[Timing] another fold took 9.323009729385376 seconds
[Timing] loading another fold took 0.03342461585998535 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 222, 152, 319)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 42, 84, 126], [0, 24], [0, 64, 127]]
number of tiles: 24
using precomputed Gaussian
prediction done
[Timing] another fold took 9.416887044906616 seconds
[Timing] loading another fold took 0.03041863441467285 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 222, 152, 319)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 42, 84, 126], [0, 24], [0, 64, 127]]
number of tiles: 24
using precomputed Gaussian
prediction done
[Timing] another fold took 9.415176630020142 seconds
[Timing] loading another fold took 0.022810697555541992 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 222, 152, 319)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 42, 84, 126], [0, 24], [0, 64, 127]]
number of tiles: 24
using precomputed Gaussian
prediction done
[Timing] another fold took 9.432955265045166 seconds
[Timing] normalising with folds took 0.009671449661254883 seconds
[Timing] transposing backwards took 5.269050598144531e-05 seconds
[Timing] full prediction took 1525.8328392505646 seconds
predicting /exports/lkeb-hpc/smaijer/output/601/3d_fullres/nnUNetTrainerV2_1000/601/imagesTr/panc_0596.nii.gz
[Timing] loading took 0.03398418426513672 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 208, 156, 351)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 37, 75, 112], [0, 28], [0, 80, 159]]
number of tiles: 24
using precomputed Gaussian
prediction done
[Timing] fold 0 prediction took 9.427971601486206 seconds
[Timing] loading another fold took 0.03358292579650879 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 208, 156, 351)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 37, 75, 112], [0, 28], [0, 80, 159]]
number of tiles: 24
using precomputed Gaussian
prediction done
[Timing] another fold took 9.440351963043213 seconds
[Timing] loading another fold took 0.031645774841308594 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 208, 156, 351)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 37, 75, 112], [0, 28], [0, 80, 159]]
number of tiles: 24
using precomputed Gaussian
prediction done
[Timing] another fold took 9.459847927093506 seconds
[Timing] loading another fold took 0.02911520004272461 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 208, 156, 351)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 37, 75, 112], [0, 28], [0, 80, 159]]
number of tiles: 24
using precomputed Gaussian
prediction done
[Timing] another fold took 9.374069452285767 seconds
[Timing] loading another fold took 0.023845195770263672 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 208, 156, 351)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 37, 75, 112], [0, 28], [0, 80, 159]]
number of tiles: 24
using precomputed Gaussian
prediction done
[Timing] another fold took 9.42899227142334 seconds
[Timing] normalising with folds took 0.008167266845703125 seconds
[Timing] transposing backwards took 4.9591064453125e-05 seconds
[Timing] full prediction took 1573.2221257686615 seconds
predicting /exports/lkeb-hpc/smaijer/output/601/3d_fullres/nnUNetTrainerV2_1000/601/imagesTr/panc_0599.nii.gz
[Timing] loading took 0.043367862701416016 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 127, 258, 319)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 31], [0, 43, 87, 130], [0, 64, 127]]
number of tiles: 24
using precomputed Gaussian
prediction done
[Timing] fold 0 prediction took 9.68207859992981 seconds
[Timing] loading another fold took 0.03450798988342285 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 127, 258, 319)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 31], [0, 43, 87, 130], [0, 64, 127]]
number of tiles: 24
using precomputed Gaussian
prediction done
[Timing] another fold took 9.337167024612427 seconds
[Timing] loading another fold took 0.030983686447143555 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 127, 258, 319)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 31], [0, 43, 87, 130], [0, 64, 127]]
number of tiles: 24
using precomputed Gaussian
prediction done
[Timing] another fold took 9.325208187103271 seconds
[Timing] loading another fold took 0.02877044677734375 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 127, 258, 319)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 31], [0, 43, 87, 130], [0, 64, 127]]
number of tiles: 24
using precomputed Gaussian
prediction done
[Timing] another fold took 9.369582414627075 seconds
[Timing] loading another fold took 0.022579431533813477 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 127, 258, 319)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 31], [0, 43, 87, 130], [0, 64, 127]]
number of tiles: 24
using precomputed Gaussian
prediction done
[Timing] another fold took 9.316884756088257 seconds
[Timing] normalising with folds took 0.008880376815795898 seconds
[Timing] transposing backwards took 4.887580871582031e-05 seconds
[Timing] full prediction took 1620.5954740047455 seconds
predicting /exports/lkeb-hpc/smaijer/output/601/3d_fullres/nnUNetTrainerV2_1000/601/imagesTr/panc_0600.nii.gz
[Timing] loading took 0.040578603744506836 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 127, 258, 319)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 31], [0, 43, 87, 130], [0, 64, 127]]
number of tiles: 24
using precomputed Gaussian
prediction done
[Timing] fold 0 prediction took 9.33647632598877 seconds
[Timing] loading another fold took 0.031838417053222656 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 127, 258, 319)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 31], [0, 43, 87, 130], [0, 64, 127]]
number of tiles: 24
using precomputed Gaussian
prediction done
[Timing] another fold took 9.32697057723999 seconds
[Timing] loading another fold took 0.02991628646850586 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 127, 258, 319)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 31], [0, 43, 87, 130], [0, 64, 127]]
number of tiles: 24
using precomputed Gaussian
prediction done
[Timing] another fold took 9.366587400436401 seconds
[Timing] loading another fold took 0.03579235076904297 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 127, 258, 319)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 31], [0, 43, 87, 130], [0, 64, 127]]
number of tiles: 24
using precomputed Gaussian
prediction done
[Timing] another fold took 9.344025373458862 seconds
[Timing] loading another fold took 0.023980379104614258 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 127, 258, 319)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 31], [0, 43, 87, 130], [0, 64, 127]]
number of tiles: 24
using precomputed Gaussian
prediction done
[Timing] another fold took 9.441056966781616 seconds
[Timing] normalising with folds took 0.007391691207885742 seconds
[Timing] transposing backwards took 4.506111145019531e-05 seconds
[Timing] full prediction took 1667.6736526489258 seconds
[Timing] Another preprocessing process done, it took 1667.7827124595642 seconds
[Timing] Another preprocessing process done, it took 1667.7829284667969 seconds
[Timing] Another preprocessing process done, it took 1667.7904307842255 seconds
[Timing] Another preprocessing process done, it took 1667.7904555797577 seconds
[Timing] Another preprocessing process done, it took 1667.7904725074768 seconds
[Timing] Another preprocessing process done, it took 1667.790491104126 seconds
inference done. Now waiting for the segmentation export to finish...
postprocessing...
[Timing] postprocessing took 4.35801100730896 seconds


Please cite the following paper when using nnUNet:

Isensee, F., Jaeger, P.F., Kohl, S.A.A. et al. "nnU-Net: a self-configuring method for deep learning-based biomedical image segmentation." Nat Methods (2020). https://doi.org/10.1038/s41592-020-01008-z


If you have questions or suggestions, feel free to open an issue at https://github.com/MIC-DKFZ/nnUNet

using model stored in  /exports/lkeb-hpc/smaijer/results/nnUNet/3d_fullres/Task601/nnUNetTrainerV2__nnUNetPlansv2.1
This model expects 1 input modalities for each image
Found 6 unique case ids, here are some examples: ['panc_0582' 'panc_0583' 'panc_0584' 'panc_0522' 'panc_0591' 'panc_0582']
If they don't look right, make sure to double check your filenames. They must end with _0000.nii.gz etc
number of cases: 6
number of cases that still need to be predicted: 6
emptying cuda cache
loading parameters for folds, None
folds is None so we will automatically look for output folders (not using 'all'!)
found the following folds:  ['/exports/lkeb-hpc/smaijer/results/nnUNet/3d_fullres/Task601/nnUNetTrainerV2__nnUNetPlansv2.1/fold_0', '/exports/lkeb-hpc/smaijer/results/nnUNet/3d_fullres/Task601/nnUNetTrainerV2__nnUNetPlansv2.1/fold_1', '/exports/lkeb-hpc/smaijer/results/nnUNet/3d_fullres/Task601/nnUNetTrainerV2__nnUNetPlansv2.1/fold_2', '/exports/lkeb-hpc/smaijer/results/nnUNet/3d_fullres/Task601/nnUNetTrainerV2__nnUNetPlansv2.1/fold_3', '/exports/lkeb-hpc/smaijer/results/nnUNet/3d_fullres/Task601/nnUNetTrainerV2__nnUNetPlansv2.1/fold_4']
Suus1 - Initialise de NetworkTrainer
Suus2 - Initialise de nnUNetTrainer
Suus3 - Initialise de nnUNetTrainerV2
Suus5 - zet de plans properties
Suus4 - Initialise de trainer echt
Suus5 - zet de plans properties
Suus6 - Zet de data augmentation params
Suus7 - zet deep supervision weights die de meerdere outputs prioriteit geven
Suus8 - Maak network aan (BELANGRIJK!)
SuusB - first stride 
Suus10 - StackedConvLayers, input: 1 en output: 32, first_stride: None, num_convs: 2, conv_kwargs: {'stride': 1, 'dilation': 1, 'bias': True, 'kernel_size': [3, 3, 3], 'padding': [1, 1, 1]}
SuusA - first_stride [2, 2, 2]
Suus10 - StackedConvLayers, input: 32 en output: 64, first_stride: [2, 2, 2], num_convs: 2, conv_kwargs: {'stride': 1, 'dilation': 1, 'bias': True, 'kernel_size': [3, 3, 3], 'padding': [1, 1, 1]}
SuusA - first_stride [2, 2, 2]
Suus10 - StackedConvLayers, input: 64 en output: 128, first_stride: [2, 2, 2], num_convs: 2, conv_kwargs: {'stride': 1, 'dilation': 1, 'bias': True, 'kernel_size': [3, 3, 3], 'padding': [1, 1, 1]}
SuusA - first_stride [2, 2, 2]
Suus10 - StackedConvLayers, input: 128 en output: 256, first_stride: [2, 2, 2], num_convs: 2, conv_kwargs: {'stride': 1, 'dilation': 1, 'bias': True, 'kernel_size': [3, 3, 3], 'padding': [1, 1, 1]}
SuusA - first_stride [2, 2, 2]
Suus10 - StackedConvLayers, input: 256 en output: 320, first_stride: [2, 2, 2], num_convs: 2, conv_kwargs: {'stride': 1, 'dilation': 1, 'bias': True, 'kernel_size': [3, 3, 3], 'padding': [1, 1, 1]}
Suus10 - StackedConvLayers, input: 320 en output: 320, first_stride: [1, 2, 2], num_convs: 1, conv_kwargs: {'stride': 1, 'dilation': 1, 'bias': True, 'kernel_size': [3, 3, 3], 'padding': [1, 1, 1]}
Suus10 - StackedConvLayers, input: 320 en output: 320, first_stride: None, num_convs: 1, conv_kwargs: {'stride': 1, 'dilation': 1, 'bias': True, 'kernel_size': [3, 3, 3], 'padding': [1, 1, 1]}
Suus10 - StackedConvLayers, input: 640 en output: 320, first_stride: None, num_convs: 1, conv_kwargs: {'stride': 1, 'dilation': 1, 'bias': True, 'kernel_size': [3, 3, 3], 'padding': [1, 1, 1]}
Suus10 - StackedConvLayers, input: 320 en output: 320, first_stride: None, num_convs: 1, conv_kwargs: {'stride': 1, 'dilation': 1, 'bias': True, 'kernel_size': [3, 3, 3], 'padding': [1, 1, 1]}
Suus10 - StackedConvLayers, input: 512 en output: 256, first_stride: None, num_convs: 1, conv_kwargs: {'stride': 1, 'dilation': 1, 'bias': True, 'kernel_size': [3, 3, 3], 'padding': [1, 1, 1]}
Suus10 - StackedConvLayers, input: 256 en output: 256, first_stride: None, num_convs: 1, conv_kwargs: {'stride': 1, 'dilation': 1, 'bias': True, 'kernel_size': [3, 3, 3], 'padding': [1, 1, 1]}
Suus10 - StackedConvLayers, input: 256 en output: 128, first_stride: None, num_convs: 1, conv_kwargs: {'stride': 1, 'dilation': 1, 'bias': True, 'kernel_size': [3, 3, 3], 'padding': [1, 1, 1]}
Suus10 - StackedConvLayers, input: 128 en output: 128, first_stride: None, num_convs: 1, conv_kwargs: {'stride': 1, 'dilation': 1, 'bias': True, 'kernel_size': [3, 3, 3], 'padding': [1, 1, 1]}
Suus10 - StackedConvLayers, input: 128 en output: 64, first_stride: None, num_convs: 1, conv_kwargs: {'stride': 1, 'dilation': 1, 'bias': True, 'kernel_size': [3, 3, 3], 'padding': [1, 1, 1]}
Suus10 - StackedConvLayers, input: 64 en output: 64, first_stride: None, num_convs: 1, conv_kwargs: {'stride': 1, 'dilation': 1, 'bias': True, 'kernel_size': [3, 3, 3], 'padding': [1, 1, 1]}
Suus10 - StackedConvLayers, input: 64 en output: 32, first_stride: None, num_convs: 1, conv_kwargs: {'stride': 1, 'dilation': 1, 'bias': True, 'kernel_size': [3, 3, 3], 'padding': [1, 1, 1]}
Suus10 - StackedConvLayers, input: 32 en output: 32, first_stride: None, num_convs: 1, conv_kwargs: {'stride': 1, 'dilation': 1, 'bias': True, 'kernel_size': [3, 3, 3], 'padding': [1, 1, 1]}
Generic_UNet(
  (encoder): Generic_UNETEncoder()
  (decoder): Generic_UNETDecoder()
  (conv_blocks_localization): ModuleList(
    (0): Sequential(
      (0): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(640, 320, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
      (1): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(320, 320, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
    )
    (1): Sequential(
      (0): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(512, 256, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
      (1): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(256, 256, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
    )
    (2): Sequential(
      (0): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(256, 128, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
      (1): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(128, 128, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
    )
    (3): Sequential(
      (0): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(128, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
      (1): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
    )
    (4): Sequential(
      (0): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(64, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
      (1): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(32, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
    )
  )
  (conv_blocks_context): ModuleList(
    (0): StackedConvLayers(
      (blocks): Sequential(
        (0): ConvDropoutNormNonlin(
          (conv): Conv3d(1, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (instnorm): InstanceNorm3d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
        )
        (1): ConvDropoutNormNonlin(
          (conv): Conv3d(32, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (instnorm): InstanceNorm3d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
        )
      )
    )
    (1): StackedConvLayers(
      (blocks): Sequential(
        (0): ConvDropoutNormNonlin(
          (conv): Conv3d(32, 64, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1))
          (instnorm): InstanceNorm3d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
        )
        (1): ConvDropoutNormNonlin(
          (conv): Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (instnorm): InstanceNorm3d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
        )
      )
    )
    (2): StackedConvLayers(
      (blocks): Sequential(
        (0): ConvDropoutNormNonlin(
          (conv): Conv3d(64, 128, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1))
          (instnorm): InstanceNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
        )
        (1): ConvDropoutNormNonlin(
          (conv): Conv3d(128, 128, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (instnorm): InstanceNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
        )
      )
    )
    (3): StackedConvLayers(
      (blocks): Sequential(
        (0): ConvDropoutNormNonlin(
          (conv): Conv3d(128, 256, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1))
          (instnorm): InstanceNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
        )
        (1): ConvDropoutNormNonlin(
          (conv): Conv3d(256, 256, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (instnorm): InstanceNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
        )
      )
    )
    (4): StackedConvLayers(
      (blocks): Sequential(
        (0): ConvDropoutNormNonlin(
          (conv): Conv3d(256, 320, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1))
          (instnorm): InstanceNorm3d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
        )
        (1): ConvDropoutNormNonlin(
          (conv): Conv3d(320, 320, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (instnorm): InstanceNorm3d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
        )
      )
    )
    (5): Sequential(
      (0): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(320, 320, kernel_size=(3, 3, 3), stride=(1, 2, 2), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
      (1): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(320, 320, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
    )
  )
  (td): ModuleList()
  (tu): ModuleList(
    (0): ConvTranspose3d(320, 320, kernel_size=(1, 2, 2), stride=(1, 2, 2), bias=False)
    (1): ConvTranspose3d(320, 256, kernel_size=(2, 2, 2), stride=(2, 2, 2), bias=False)
    (2): ConvTranspose3d(256, 128, kernel_size=(2, 2, 2), stride=(2, 2, 2), bias=False)
    (3): ConvTranspose3d(128, 64, kernel_size=(2, 2, 2), stride=(2, 2, 2), bias=False)
    (4): ConvTranspose3d(64, 32, kernel_size=(2, 2, 2), stride=(2, 2, 2), bias=False)
  )
  (seg_outputs): ModuleList(
    (0): Conv3d(320, 2, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
    (1): Conv3d(256, 2, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
    (2): Conv3d(128, 2, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
    (3): Conv3d(64, 2, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
    (4): Conv3d(32, 2, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
  )
)
using the following model files:  ['/exports/lkeb-hpc/smaijer/results/nnUNet/3d_fullres/Task601/nnUNetTrainerV2__nnUNetPlansv2.1/fold_0/model_final_checkpoint.model', '/exports/lkeb-hpc/smaijer/results/nnUNet/3d_fullres/Task601/nnUNetTrainerV2__nnUNetPlansv2.1/fold_1/model_final_checkpoint.model', '/exports/lkeb-hpc/smaijer/results/nnUNet/3d_fullres/Task601/nnUNetTrainerV2__nnUNetPlansv2.1/fold_2/model_final_checkpoint.model', '/exports/lkeb-hpc/smaijer/results/nnUNet/3d_fullres/Task601/nnUNetTrainerV2__nnUNetPlansv2.1/fold_3/model_final_checkpoint.model', '/exports/lkeb-hpc/smaijer/results/nnUNet/3d_fullres/Task601/nnUNetTrainerV2__nnUNetPlansv2.1/fold_4/model_final_checkpoint.model']
starting preprocessing generator
[Timing] starting preprocessing generator took 1.4543533325195312e-05 seconds
starting prediction...
Preprocessing with 6 multithreads
preprocessing /exports/lkeb-hpc/smaijer/output/601/3d_fullres/nnUNetTrainerV2_1000/601/imagesTs/panc_0583.nii.gz
using preprocessor GenericPreprocessor
[Timing] Loading took 0.14530706405639648 seconds
before crop: (1, 320, 60, 320) after crop: (1, 319, 60, 319) spacing: [1.1875 3.     1.1875] 

ff voor mezelf want snap data files niet, hier lengte van data files1
no separate z, order 3
no separate z, order 1
before: {'spacing': array([1.1875, 3.    , 1.1875]), 'spacing_transposed': array([1.1875, 3.    , 1.1875]), 'data.shape (data is transposed)': (1, 319, 60, 319)} 
after:  {'spacing': array([1.70314997, 1.1875    , 1.1875    ]), 'data.shape (data is resampled)': (1, 222, 152, 319)} 

[Timing] Preprocessing specifics: loading&cropping took 0.5723621845245361, transposing took 4.5299530029296875e-05 and 5.4836273193359375e-06, resampling/normalizing took 5.155916929244995.
[Timing] preprocessing function took 5.746880531311035 seconds
(1, 222, 152, 319)
[Timing] total time for preprocessing this item is 5.7476537227630615
[Timing] This worker has ended successfully, no errors to report. It took 5.828723192214966 seconds.
preprocessing /exports/lkeb-hpc/smaijer/output/601/3d_fullres/nnUNetTrainerV2_1000/601/imagesTs/panc_0582.nii.gz
using preprocessor GenericPreprocessor
[Timing] Loading took 0.1673130989074707 seconds
before crop: (1, 320, 60, 320) after crop: (1, 319, 60, 319) spacing: [1.1875 3.     1.1875] 

ff voor mezelf want snap data files niet, hier lengte van data files1
no separate z, order 3
no separate z, order 1
before: {'spacing': array([1.1875, 3.    , 1.1875]), 'spacing_transposed': array([1.1875, 3.    , 1.1875]), 'data.shape (data is transposed)': (1, 319, 60, 319)} 
after:  {'spacing': array([1.70314997, 1.1875    , 1.1875    ]), 'data.shape (data is resampled)': (1, 222, 152, 319)} 

[Timing] Preprocessing specifics: loading&cropping took 0.6517984867095947, transposing took 4.482269287109375e-05 and 5.7220458984375e-06, resampling/normalizing took 5.100733995437622.
[Timing] preprocessing function took 5.7722320556640625 seconds
(1, 222, 152, 319)
[Timing] total time for preprocessing this item is 56.67530179023743
[Timing] This worker has ended successfully, no errors to report. It took 245.92777585983276 seconds.
preprocessing /exports/lkeb-hpc/smaijer/output/601/3d_fullres/nnUNetTrainerV2_1000/601/imagesTs/panc_0591.nii.gz
using preprocessor GenericPreprocessor
[Timing] Loading took 0.11906671524047852 seconds
before crop: (1, 72, 260, 320) after crop: (1, 72, 258, 319) spacing: [3.     1.1875 1.1875] 

ff voor mezelf want snap data files niet, hier lengte van data files1
no separate z, order 3
no separate z, order 1
before: {'spacing': array([3.    , 1.1875, 1.1875]), 'spacing_transposed': array([3.    , 1.1875, 1.1875]), 'data.shape (data is transposed)': (1, 72, 258, 319)} 
after:  {'spacing': array([1.70314997, 1.1875    , 1.1875    ]), 'data.shape (data is resampled)': (1, 127, 258, 319)} 

[Timing] Preprocessing specifics: loading&cropping took 0.5609936714172363, transposing took 4.9114227294921875e-05 and 8.344650268554688e-06, resampling/normalizing took 5.1169843673706055.
[Timing] preprocessing function took 5.696803569793701 seconds
(1, 127, 258, 319)
[Timing] total time for preprocessing this item is 56.69908833503723
[Timing] This worker has ended successfully, no errors to report. It took 293.1758749485016 seconds.
preprocessing /exports/lkeb-hpc/smaijer/output/601/3d_fullres/nnUNetTrainerV2_1000/601/imagesTs/panc_0584.nii.gz
using preprocessor GenericPreprocessor
[Timing] Loading took 0.10564231872558594 seconds
before crop: (1, 72, 232, 288) after crop: (1, 72, 230, 286) spacing: [3.         1.38888884 1.38888884] 

ff voor mezelf want snap data files niet, hier lengte van data files1
no separate z, order 3
no separate z, order 1
before: {'spacing': array([3.        , 1.38888884, 1.38888884]), 'spacing_transposed': array([3.        , 1.38888884, 1.38888884]), 'data.shape (data is transposed)': (1, 72, 230, 286)} 
after:  {'spacing': array([1.70314997, 1.1875    , 1.1875    ]), 'data.shape (data is resampled)': (1, 127, 269, 335)} 

[Timing] Preprocessing specifics: loading&cropping took 0.5026538372039795, transposing took 3.409385681152344e-05 and 5.0067901611328125e-06, resampling/normalizing took 5.309029817581177.
[Timing] preprocessing function took 5.830900192260742 seconds
(1, 127, 269, 335)
[Timing] total time for preprocessing this item is 104.07254981994629
[Timing] This worker has ended successfully, no errors to report. It took 293.28237223625183 seconds.
preprocessing /exports/lkeb-hpc/smaijer/output/601/3d_fullres/nnUNetTrainerV2_1000/601/imagesTs/panc_0522.nii.gz
using preprocessor GenericPreprocessor
[Timing] Loading took 0.1162557601928711 seconds
before crop: (1, 72, 260, 320) after crop: (1, 72, 257, 319) spacing: [3.    1.375 1.375] 

ff voor mezelf want snap data files niet, hier lengte van data files1
no separate z, order 3
no separate z, order 1
before: {'spacing': array([3.   , 1.375, 1.375]), 'spacing_transposed': array([3.   , 1.375, 1.375]), 'data.shape (data is transposed)': (1, 72, 257, 319)} 
after:  {'spacing': array([1.70314997, 1.1875    , 1.1875    ]), 'data.shape (data is resampled)': (1, 127, 298, 369)} 

[Timing] Preprocessing specifics: loading&cropping took 0.5742783546447754, transposing took 4.076957702636719e-05 and 5.0067901611328125e-06, resampling/normalizing took 6.431488752365112.
[Timing] preprocessing function took 7.029447317123413 seconds
(1, 127, 298, 369)
[Timing] total time for preprocessing this item is 151.1610279083252
[Timing] This worker has ended successfully, no errors to report. It took 293.35732340812683 seconds.
force_separate_z: None interpolation order: 1
separate z: False lowres axis None
no separate z, order 1
suus we gaan schrijven naar /exports/lkeb-hpc/smaijer/output/601/3d_fullres/nnUNetTrainerV2_1000/601/imagesTs/panc_0582.nii.gz
[Timing] - Resampling the segmentation to original shape took 0.8518576622009277 seconds
[Timing] - Saving the segmentation took 0.0773777961730957 seconds
force_separate_z: None interpolation order: 1
separate z: False lowres axis None
no separate z, order 1
suus we gaan schrijven naar /exports/lkeb-hpc/smaijer/output/601/3d_fullres/nnUNetTrainerV2_1000/601/imagesTs/panc_0584.nii.gz
[Timing] - Resampling the segmentation to original shape took 0.6499903202056885 seconds
[Timing] - Saving the segmentation took 0.030487775802612305 seconds
force_separate_z: None interpolation order: 1
separate z: False lowres axis None
no separate z, order 1
suus we gaan schrijven naar /exports/lkeb-hpc/smaijer/output/601/3d_fullres/nnUNetTrainerV2_1000/601/imagesTs/panc_0517.nii.gz
[Timing] - Resampling the segmentation to original shape took 1.9709839820861816 seconds
[Timing] - Saving the segmentation took 0.10917830467224121 seconds
force_separate_z: None interpolation order: 1
separate z: False lowres axis None
no separate z, order 1
suus we gaan schrijven naar /exports/lkeb-hpc/smaijer/output/601/3d_fullres/nnUNetTrainerV2_1000/601/imagesTs/panc_0583.nii.gz
[Timing] - Resampling the segmentation to original shape took 0.8598482608795166 seconds
[Timing] - Saving the segmentation took 0.07820343971252441 seconds
force_separate_z: None interpolation order: 1
separate z: False lowres axis None
no separate z, order 1
suus we gaan schrijven naar /exports/lkeb-hpc/smaijer/output/601/3d_fullres/nnUNetTrainerV2_1000/601/imagesTs/panc_0591.nii.gz
[Timing] - Resampling the segmentation to original shape took 0.7652397155761719 seconds
[Timing] - Saving the segmentation took 0.039002180099487305 seconds
force_separate_z: None interpolation order: 1
separate z: False lowres axis None
no separate z, order 1
suus we gaan schrijven naar /exports/lkeb-hpc/smaijer/output/601/3d_fullres/nnUNetTrainerV2_1000/601/imagesTs/panc_0522.nii.gz
[Timing] - Resampling the segmentation to original shape took 0.7923910617828369 seconds
[Timing] - Saving the segmentation took 0.03730893135070801 seconds
predicting /exports/lkeb-hpc/smaijer/output/601/3d_fullres/nnUNetTrainerV2_1000/601/imagesTs/panc_0583.nii.gz
[Timing] loading took 0.0478365421295166 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 222, 152, 319)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 42, 84, 126], [0, 24], [0, 64, 127]]
number of tiles: 24
computing Gaussian
done
prediction done
[Timing] fold 0 prediction took 12.743791580200195 seconds
[Timing] loading another fold took 0.03604006767272949 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 222, 152, 319)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 42, 84, 126], [0, 24], [0, 64, 127]]
number of tiles: 24
using precomputed Gaussian
prediction done
[Timing] another fold took 9.487657070159912 seconds
[Timing] loading another fold took 0.03486132621765137 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 222, 152, 319)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 42, 84, 126], [0, 24], [0, 64, 127]]
number of tiles: 24
using precomputed Gaussian
prediction done
[Timing] another fold took 9.512564182281494 seconds
[Timing] loading another fold took 0.03447294235229492 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 222, 152, 319)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 42, 84, 126], [0, 24], [0, 64, 127]]
number of tiles: 24
using precomputed Gaussian
prediction done
[Timing] another fold took 9.430112600326538 seconds
[Timing] loading another fold took 0.036420583724975586 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 222, 152, 319)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 42, 84, 126], [0, 24], [0, 64, 127]]
number of tiles: 24
using precomputed Gaussian
prediction done
[Timing] another fold took 9.362057447433472 seconds
[Timing] normalising with folds took 0.007981061935424805 seconds
[Timing] transposing backwards took 8.749961853027344e-05 seconds
[Timing] full prediction took 56.684898376464844 seconds
predicting /exports/lkeb-hpc/smaijer/output/601/3d_fullres/nnUNetTrainerV2_1000/601/imagesTs/panc_0582.nii.gz
[Timing] loading took 0.040508270263671875 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 222, 152, 319)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 42, 84, 126], [0, 24], [0, 64, 127]]
number of tiles: 24
using precomputed Gaussian
prediction done
[Timing] fold 0 prediction took 9.506192922592163 seconds
[Timing] loading another fold took 0.041373252868652344 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 222, 152, 319)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 42, 84, 126], [0, 24], [0, 64, 127]]
number of tiles: 24
using precomputed Gaussian
prediction done
[Timing] another fold took 9.380497694015503 seconds
[Timing] loading another fold took 0.04255390167236328 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 222, 152, 319)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 42, 84, 126], [0, 24], [0, 64, 127]]
number of tiles: 24
using precomputed Gaussian
prediction done
[Timing] another fold took 9.503259420394897 seconds
[Timing] loading another fold took 0.03529238700866699 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 222, 152, 319)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 42, 84, 126], [0, 24], [0, 64, 127]]
number of tiles: 24
using precomputed Gaussian
prediction done
[Timing] another fold took 9.32626724243164 seconds
[Timing] loading another fold took 0.033440351486206055 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 222, 152, 319)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 42, 84, 126], [0, 24], [0, 64, 127]]
number of tiles: 24
using precomputed Gaussian
prediction done
[Timing] another fold took 9.335659980773926 seconds
[Timing] normalising with folds took 0.00859689712524414 seconds
[Timing] transposing backwards took 5.269050598144531e-05 seconds
[Timing] full prediction took 104.10823273658752 seconds
predicting /exports/lkeb-hpc/smaijer/output/601/3d_fullres/nnUNetTrainerV2_1000/601/imagesTs/panc_0591.nii.gz
[Timing] loading took 0.034140586853027344 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 127, 258, 319)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 31], [0, 43, 87, 130], [0, 64, 127]]
number of tiles: 24
using precomputed Gaussian
prediction done
[Timing] fold 0 prediction took 9.35406756401062 seconds
[Timing] loading another fold took 0.030659914016723633 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 127, 258, 319)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 31], [0, 43, 87, 130], [0, 64, 127]]
number of tiles: 24
using precomputed Gaussian
prediction done
[Timing] another fold took 9.32322382926941 seconds
[Timing] loading another fold took 0.030811548233032227 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 127, 258, 319)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 31], [0, 43, 87, 130], [0, 64, 127]]
number of tiles: 24
using precomputed Gaussian
prediction done
[Timing] another fold took 9.386419296264648 seconds
[Timing] loading another fold took 0.03118157386779785 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 127, 258, 319)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 31], [0, 43, 87, 130], [0, 64, 127]]
number of tiles: 24
using precomputed Gaussian
prediction done
[Timing] another fold took 9.359440565109253 seconds
[Timing] loading another fold took 0.03214430809020996 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 127, 258, 319)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 31], [0, 43, 87, 130], [0, 64, 127]]
number of tiles: 24
using precomputed Gaussian
prediction done
[Timing] another fold took 9.331449270248413 seconds
[Timing] normalising with folds took 0.00771021842956543 seconds
[Timing] transposing backwards took 4.029273986816406e-05 seconds
[Timing] full prediction took 151.13576221466064 seconds
predicting /exports/lkeb-hpc/smaijer/output/601/3d_fullres/nnUNetTrainerV2_1000/601/imagesTs/panc_0584.nii.gz
[Timing] loading took 0.03380322456359863 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 127, 269, 335)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 31], [0, 47, 94, 141], [0, 72, 143]]
number of tiles: 24
using precomputed Gaussian
prediction done
[Timing] fold 0 prediction took 9.481973648071289 seconds
[Timing] loading another fold took 0.030164718627929688 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 127, 269, 335)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 31], [0, 47, 94, 141], [0, 72, 143]]
number of tiles: 24
using precomputed Gaussian
prediction done
[Timing] another fold took 9.433972835540771 seconds
[Timing] loading another fold took 0.033785104751586914 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 127, 269, 335)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 31], [0, 47, 94, 141], [0, 72, 143]]
number of tiles: 24
using precomputed Gaussian
prediction done
[Timing] another fold took 9.368069887161255 seconds
[Timing] loading another fold took 0.03010869026184082 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 127, 269, 335)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 31], [0, 47, 94, 141], [0, 72, 143]]
number of tiles: 24
using precomputed Gaussian
prediction done
[Timing] another fold took 9.352357149124146 seconds
[Timing] loading another fold took 0.03707075119018555 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 127, 269, 335)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 31], [0, 47, 94, 141], [0, 72, 143]]
number of tiles: 24
using precomputed Gaussian
prediction done
[Timing] another fold took 9.357682466506958 seconds
[Timing] normalising with folds took 0.008126258850097656 seconds
[Timing] transposing backwards took 3.910064697265625e-05 seconds
[Timing] full prediction took 198.38827848434448 seconds
predicting /exports/lkeb-hpc/smaijer/output/601/3d_fullres/nnUNetTrainerV2_1000/601/imagesTs/panc_0522.nii.gz
[Timing] loading took 0.036038875579833984 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 127, 298, 369)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 31], [0, 57, 113, 170], [0, 88, 177]]
number of tiles: 24
using precomputed Gaussian
prediction done
[Timing] fold 0 prediction took 9.457361221313477 seconds
[Timing] loading another fold took 0.031598806381225586 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 127, 298, 369)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 31], [0, 57, 113, 170], [0, 88, 177]]
number of tiles: 24
using precomputed Gaussian
prediction done
[Timing] another fold took 9.435153245925903 seconds
[Timing] loading another fold took 0.03256678581237793 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 127, 298, 369)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 31], [0, 57, 113, 170], [0, 88, 177]]
number of tiles: 24
using precomputed Gaussian
prediction done
[Timing] another fold took 9.432034254074097 seconds
[Timing] loading another fold took 0.0323786735534668 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 127, 298, 369)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 31], [0, 57, 113, 170], [0, 88, 177]]
number of tiles: 24
using precomputed Gaussian
prediction done
[Timing] another fold took 9.45344066619873 seconds
[Timing] loading another fold took 0.03030538558959961 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 127, 298, 369)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 31], [0, 57, 113, 170], [0, 88, 177]]
number of tiles: 24
using precomputed Gaussian
prediction done
[Timing] another fold took 9.450135231018066 seconds
[Timing] normalising with folds took 0.010489940643310547 seconds
[Timing] transposing backwards took 5.841255187988281e-05 seconds
[Timing] full prediction took 245.8972418308258 seconds
predicting /exports/lkeb-hpc/smaijer/output/601/3d_fullres/nnUNetTrainerV2_1000/601/imagesTs/panc_0517.nii.gz
[Timing] loading took 0.0355219841003418 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 135, 296, 337)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 39], [0, 56, 112, 168], [0, 72, 145]]
number of tiles: 24
using precomputed Gaussian
prediction done
[Timing] fold 0 prediction took 9.599368810653687 seconds
[Timing] loading another fold took 0.03347158432006836 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 135, 296, 337)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 39], [0, 56, 112, 168], [0, 72, 145]]
number of tiles: 24
using precomputed Gaussian
prediction done
[Timing] another fold took 9.40748143196106 seconds
[Timing] loading another fold took 0.032590389251708984 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 135, 296, 337)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 39], [0, 56, 112, 168], [0, 72, 145]]
number of tiles: 24
using precomputed Gaussian
prediction done
[Timing] another fold took 9.387588500976562 seconds
[Timing] loading another fold took 0.030051231384277344 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 135, 296, 337)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 39], [0, 56, 112, 168], [0, 72, 145]]
number of tiles: 24
using precomputed Gaussian
prediction done
[Timing] another fold took 9.358774900436401 seconds
[Timing] loading another fold took 0.033963918685913086 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 135, 296, 337)
patch size: [ 96 128 192]
steps (x, y, and z): [[0, 39], [0, 56, 112, 168], [0, 72, 145]]
number of tiles: 24
using precomputed Gaussian
prediction done
[Timing] another fold took 9.374486684799194 seconds
[Timing] normalising with folds took 0.010612249374389648 seconds
[Timing] transposing backwards took 4.076957702636719e-05 seconds
[Timing] full prediction took 293.3293011188507 seconds
[Timing] Another preprocessing process done, it took 293.44844222068787 seconds
[Timing] Another preprocessing process done, it took 293.44851183891296 seconds
[Timing] Another preprocessing process done, it took 293.4485318660736 seconds
[Timing] Another preprocessing process done, it took 293.4485454559326 seconds
[Timing] Another preprocessing process done, it took 293.44856119155884 seconds
[Timing] Another preprocessing process done, it took 293.44857597351074 seconds
inference done. Now waiting for the segmentation export to finish...
postprocessing...
[Timing] postprocessing took 2.567699432373047 seconds
Done inferencing! Now start the evaluation.


Please cite the following paper when using nnUNet:

Isensee, F., Jaeger, P.F., Kohl, S.A.A. et al. "nnU-Net: a self-configuring method for deep learning-based biomedical image segmentation." Nat Methods (2020). https://doi.org/10.1038/s41592-020-01008-z


If you have questions or suggestions, feel free to open an issue at https://github.com/MIC-DKFZ/nnUNet



Please cite the following paper when using nnUNet:

Isensee, F., Jaeger, P.F., Kohl, S.A.A. et al. "nnU-Net: a self-configuring method for deep learning-based biomedical image segmentation." Nat Methods (2020). https://doi.org/10.1038/s41592-020-01008-z


If you have questions or suggestions, feel free to open an issue at https://github.com/MIC-DKFZ/nnUNet

Program finished with exit code 0 at: Thu Oct  6 21:35:50 CEST 2022
