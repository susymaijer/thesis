Starting at Wed Nov  2 10:17:07 CET 2022
Running on hosts: res-hpc-lkeb06
Running on 1 nodes.
Running 1 tasks.
CPUs on node: 6.
Account: div2-lkeb
Job ID: 12739899
Job name: PancreasInferenceEval
Node running script: res-hpc-lkeb06
Submit host: res-hpc-lo02.researchlumc.nl
GPUS: 0 or 
Wed Nov  2 10:17:09 2022       
+-----------------------------------------------------------------------------+
| NVIDIA-SMI 470.141.03   Driver Version: 470.141.03   CUDA Version: 11.4     |
|-------------------------------+----------------------+----------------------+
| GPU  Name        Persistence-M| Bus-Id        Disp.A | Volatile Uncorr. ECC |
| Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. |
|                               |                      |               MIG M. |
|===============================+======================+======================|
|   0  Quadro RTX 6000     Off  | 00000000:3B:00.0 Off |                  Off |
| 31%   31C    P0    65W / 260W |      0MiB / 24220MiB |      3%      Default |
|                               |                      |                  N/A |
+-------------------------------+----------------------+----------------------+
                                                                               
+-----------------------------------------------------------------------------+
| Processes:                                                                  |
|  GPU   GI   CI        PID   Type   Process name                  GPU Memory |
|        ID   ID                                                   Usage      |
|=============================================================================|
|  No running processes found                                                 |
+-----------------------------------------------------------------------------+
Current working directory is /home/smaijer
Load all modules..
Done with loading all modules. Modules:
Activate conda env nnunet..
Verifying environment variables:
Installing hidden layer and nnUnet..
Collecting hiddenlayer
  Cloning https://github.com/FabianIsensee/hiddenlayer.git (to revision more_plotted_details) to /tmp/pip-install-tc_exrvk/hiddenlayer_67831c54964a47b894371e54840402d9
  Resolved https://github.com/FabianIsensee/hiddenlayer.git to commit 4b98f9e5cccebac67368f02b95f4700b522345b1
Using legacy 'setup.py install' for hiddenlayer, since package 'wheel' is not installed.
Installing collected packages: hiddenlayer
    Running setup.py install for hiddenlayer: started
    Running setup.py install for hiddenlayer: finished with status 'done'
Successfully installed hiddenlayer-0.2
Obtaining file:///home/smaijer/code/nnUNet
Collecting torch==1.12.0
  Using cached torch-1.12.0-cp310-cp310-manylinux1_x86_64.whl (776.3 MB)
Collecting tqdm
  Using cached tqdm-4.64.1-py2.py3-none-any.whl (78 kB)
Collecting dicom2nifti
  Using cached dicom2nifti-2.4.5-py3-none-any.whl (43 kB)
Collecting scikit-image>=0.14
  Using cached scikit_image-0.19.3-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (13.9 MB)
Collecting medpy
  Using cached MedPy-0.4.0.tar.gz (151 kB)
Collecting scipy
  Using cached scipy-1.9.3-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (33.7 MB)
Collecting batchgenerators>=0.23
  Using cached batchgenerators-0.24.tar.gz (61 kB)
Collecting numpy
  Using cached numpy-1.23.4-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (17.1 MB)
Collecting sklearn
  Using cached sklearn-0.0.tar.gz (1.1 kB)
Collecting SimpleITK
  Using cached SimpleITK-2.2.0-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (52.8 MB)
Collecting pandas
  Using cached pandas-1.5.1-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (12.1 MB)
Collecting requests
  Using cached requests-2.28.1-py3-none-any.whl (62 kB)
Collecting nibabel
  Using cached nibabel-4.0.2-py3-none-any.whl (3.3 MB)
Collecting tifffile
  Using cached tifffile-2022.10.10-py3-none-any.whl (210 kB)
Collecting matplotlib
  Using cached matplotlib-3.6.1-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (11.8 MB)
Collecting monai
  Using cached monai-1.0.1-202210241233-py3-none-any.whl (1.1 MB)
Collecting einops
  Using cached einops-0.5.0-py3-none-any.whl (36 kB)
Collecting ipython
  Using cached ipython-8.6.0-py3-none-any.whl (761 kB)
Collecting graphviz
  Using cached graphviz-0.20.1-py3-none-any.whl (47 kB)
Collecting typing-extensions
  Using cached typing_extensions-4.4.0-py3-none-any.whl (26 kB)
Collecting pillow>=7.1.2
  Using cached Pillow-9.3.0-cp310-cp310-manylinux_2_28_x86_64.whl (3.3 MB)
Collecting scikit-learn
  Using cached scikit_learn-1.1.3-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (30.5 MB)
Collecting future
  Using cached future-0.18.2.tar.gz (829 kB)
Collecting unittest2
  Using cached unittest2-1.1.0-py2.py3-none-any.whl (96 kB)
Collecting threadpoolctl
  Using cached threadpoolctl-3.1.0-py3-none-any.whl (14 kB)
Collecting PyWavelets>=1.1.1
  Using cached PyWavelets-1.4.1-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (6.8 MB)
Collecting imageio>=2.4.1
  Using cached imageio-2.22.3-py3-none-any.whl (3.4 MB)
Collecting packaging>=20.0
  Using cached packaging-21.3-py3-none-any.whl (40 kB)
Collecting networkx>=2.2
  Using cached networkx-2.8.8-py3-none-any.whl (2.0 MB)
Collecting pyparsing!=3.0.5,>=2.0.2
  Using cached pyparsing-3.0.9-py3-none-any.whl (98 kB)
Collecting pydicom>=2.2.0
  Using cached pydicom-2.3.0-py3-none-any.whl (2.0 MB)
Collecting python-gdcm
  Using cached python_gdcm-3.0.19-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (13.0 MB)
Collecting matplotlib-inline
  Using cached matplotlib_inline-0.1.6-py3-none-any.whl (9.4 kB)
Collecting pygments>=2.4.0
  Using cached Pygments-2.13.0-py3-none-any.whl (1.1 MB)
Collecting traitlets>=5
  Using cached traitlets-5.5.0-py3-none-any.whl (107 kB)
Collecting backcall
  Using cached backcall-0.2.0-py2.py3-none-any.whl (11 kB)
Collecting decorator
  Using cached decorator-5.1.1-py3-none-any.whl (9.1 kB)
Collecting prompt-toolkit<3.1.0,>3.0.1
  Using cached prompt_toolkit-3.0.31-py3-none-any.whl (382 kB)
Collecting pickleshare
  Using cached pickleshare-0.7.5-py2.py3-none-any.whl (6.9 kB)
Collecting jedi>=0.16
  Using cached jedi-0.18.1-py2.py3-none-any.whl (1.6 MB)
Collecting stack-data
  Using cached stack_data-0.6.0-py3-none-any.whl (24 kB)
Collecting pexpect>4.3
  Using cached pexpect-4.8.0-py2.py3-none-any.whl (59 kB)
Collecting parso<0.9.0,>=0.8.0
  Using cached parso-0.8.3-py2.py3-none-any.whl (100 kB)
Collecting ptyprocess>=0.5
  Using cached ptyprocess-0.7.0-py2.py3-none-any.whl (13 kB)
Collecting wcwidth
  Using cached wcwidth-0.2.5-py2.py3-none-any.whl (30 kB)
Collecting python-dateutil>=2.7
  Using cached python_dateutil-2.8.2-py2.py3-none-any.whl (247 kB)
Collecting cycler>=0.10
  Using cached cycler-0.11.0-py3-none-any.whl (6.4 kB)
Collecting kiwisolver>=1.0.1
  Using cached kiwisolver-1.4.4-cp310-cp310-manylinux_2_12_x86_64.manylinux2010_x86_64.whl (1.6 MB)
Collecting contourpy>=1.0.1
  Using cached contourpy-1.0.6-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (296 kB)
Collecting fonttools>=4.22.0
  Using cached fonttools-4.38.0-py3-none-any.whl (965 kB)
Collecting six>=1.5
  Using cached six-1.16.0-py2.py3-none-any.whl (11 kB)
Collecting setuptools
  Using cached setuptools-65.5.0-py3-none-any.whl (1.2 MB)
Collecting pytz>=2020.1
  Using cached pytz-2022.6-py2.py3-none-any.whl (498 kB)
Collecting certifi>=2017.4.17
  Using cached certifi-2022.9.24-py3-none-any.whl (161 kB)
Collecting idna<4,>=2.5
  Using cached idna-3.4-py3-none-any.whl (61 kB)
Collecting urllib3<1.27,>=1.21.1
  Using cached urllib3-1.26.12-py2.py3-none-any.whl (140 kB)
Collecting charset-normalizer<3,>=2
  Using cached charset_normalizer-2.1.1-py3-none-any.whl (39 kB)
Collecting joblib>=1.0.0
  Using cached joblib-1.2.0-py3-none-any.whl (297 kB)
Collecting pure-eval
  Using cached pure_eval-0.2.2-py3-none-any.whl (11 kB)
Collecting executing>=1.2.0
  Using cached executing-1.2.0-py2.py3-none-any.whl (24 kB)
Collecting asttokens>=2.1.0
  Using cached asttokens-2.1.0-py2.py3-none-any.whl (26 kB)
Collecting traceback2
  Using cached traceback2-1.4.0-py2.py3-none-any.whl (16 kB)
Collecting argparse
  Using cached argparse-1.4.0-py2.py3-none-any.whl (23 kB)
Collecting linecache2
  Using cached linecache2-1.0.0-py2.py3-none-any.whl (12 kB)
Using legacy 'setup.py install' for batchgenerators, since package 'wheel' is not installed.
Using legacy 'setup.py install' for future, since package 'wheel' is not installed.
Using legacy 'setup.py install' for medpy, since package 'wheel' is not installed.
Using legacy 'setup.py install' for sklearn, since package 'wheel' is not installed.
Installing collected packages: six, pyparsing, pillow, numpy, linecache2, wcwidth, typing-extensions, traitlets, traceback2, tifffile, threadpoolctl, setuptools, scipy, PyWavelets, pure-eval, ptyprocess, parso, packaging, networkx, joblib, imageio, executing, asttokens, argparse, urllib3, unittest2, torch, stack-data, SimpleITK, scikit-learn, scikit-image, pytz, python-gdcm, python-dateutil, pygments, pydicom, prompt-toolkit, pickleshare, pexpect, nibabel, matplotlib-inline, kiwisolver, jedi, idna, future, fonttools, decorator, cycler, contourpy, charset-normalizer, certifi, backcall, tqdm, sklearn, requests, pandas, monai, medpy, matplotlib, ipython, graphviz, einops, dicom2nifti, batchgenerators, nnunet
    Running setup.py install for future: started
    Running setup.py install for future: finished with status 'done'
    Running setup.py install for sklearn: started
    Running setup.py install for sklearn: finished with status 'done'
    Running setup.py install for medpy: started
    Running setup.py install for medpy: finished with status 'done'
    Running setup.py install for batchgenerators: started
    Running setup.py install for batchgenerators: finished with status 'done'
  Running setup.py develop for nnunet
Successfully installed PyWavelets-1.4.1 SimpleITK-2.2.0 argparse-1.4.0 asttokens-2.1.0 backcall-0.2.0 batchgenerators-0.24 certifi-2022.9.24 charset-normalizer-2.1.1 contourpy-1.0.6 cycler-0.11.0 decorator-5.1.1 dicom2nifti-2.4.5 einops-0.5.0 executing-1.2.0 fonttools-4.38.0 future-0.18.2 graphviz-0.20.1 idna-3.4 imageio-2.22.3 ipython-8.6.0 jedi-0.18.1 joblib-1.2.0 kiwisolver-1.4.4 linecache2-1.0.0 matplotlib-3.6.1 matplotlib-inline-0.1.6 medpy-0.4.0 monai-1.0.1 networkx-2.8.8 nibabel-4.0.2 nnunet numpy-1.23.4 packaging-21.3 pandas-1.5.1 parso-0.8.3 pexpect-4.8.0 pickleshare-0.7.5 pillow-9.3.0 prompt-toolkit-3.0.31 ptyprocess-0.7.0 pure-eval-0.2.2 pydicom-2.3.0 pygments-2.13.0 pyparsing-3.0.9 python-dateutil-2.8.2 python-gdcm-3.0.19 pytz-2022.6 requests-2.28.1 scikit-image-0.19.3 scikit-learn-1.1.3 scipy-1.9.3 setuptools-65.5.0 six-1.16.0 sklearn-0.0 stack-data-0.6.0 threadpoolctl-3.1.0 tifffile-2022.10.10 torch-1.12.0 tqdm-4.64.1 traceback2-1.4.0 traitlets-5.5.0 typing-extensions-4.4.0 unittest2-1.1.0 urllib3-1.26.12 wcwidth-0.2.5


Please cite the following paper when using nnUNet:

Isensee, F., Jaeger, P.F., Kohl, S.A.A. et al. "nnU-Net: a self-configuring method for deep learning-based biomedical image segmentation." Nat Methods (2020). https://doi.org/10.1038/s41592-020-01008-z


If you have questions or suggestions, feel free to open an issue at https://github.com/MIC-DKFZ/nnUNet

using model stored in  /exports/lkeb-hpc/smaijer/results/nnUNet/3d_fullres/Task510/nnUNetTrainerV2__nnUNetPlansv2.1
This model expects 1 input modalities for each image
Found 8 unique case ids, here are some examples: ['panc_00007' 'panc_00000' 'panc_00002' 'panc_00000' 'panc_00001'
 'panc_00007' 'panc_00002' 'panc_00000']
If they don't look right, make sure to double check your filenames. They must end with _0000.nii.gz etc
number of cases: 8
number of cases that still need to be predicted: 8
emptying cuda cache
loading parameters for folds, [0, 1, 2, 3, 4]
Suus1 - Initialise de NetworkTrainer
Suus2 - Initialise de nnUNetTrainer
Suus3 - Initialise de nnUNetTrainerV2
Suus5 - zet de plans properties
Suus4 - Initialise de trainer echt
Suus5 - zet de plans properties
Suus6 - Zet de data augmentation params
2022-11-02 10:18:18.315652: Using dummy2d data augmentation
Suus7 - zet deep supervision weights die de meerdere outputs prioriteit geven
Suus8 - Maak network aan (BELANGRIJK!)
SuusB - first stride 
Suus10 - StackedConvLayers, input: 1 en output: 32, first_stride: None, num_convs: 2, conv_kwargs: {'stride': 1, 'dilation': 1, 'bias': True, 'kernel_size': [1, 3, 3], 'padding': [0, 1, 1]}
SuusA - first_stride [1, 2, 2]
Suus10 - StackedConvLayers, input: 32 en output: 64, first_stride: [1, 2, 2], num_convs: 2, conv_kwargs: {'stride': 1, 'dilation': 1, 'bias': True, 'kernel_size': [3, 3, 3], 'padding': [1, 1, 1]}
SuusA - first_stride [2, 2, 2]
Suus10 - StackedConvLayers, input: 64 en output: 128, first_stride: [2, 2, 2], num_convs: 2, conv_kwargs: {'stride': 1, 'dilation': 1, 'bias': True, 'kernel_size': [3, 3, 3], 'padding': [1, 1, 1]}
SuusA - first_stride [2, 2, 2]
Suus10 - StackedConvLayers, input: 128 en output: 256, first_stride: [2, 2, 2], num_convs: 2, conv_kwargs: {'stride': 1, 'dilation': 1, 'bias': True, 'kernel_size': [3, 3, 3], 'padding': [1, 1, 1]}
SuusA - first_stride [2, 2, 2]
Suus10 - StackedConvLayers, input: 256 en output: 320, first_stride: [2, 2, 2], num_convs: 2, conv_kwargs: {'stride': 1, 'dilation': 1, 'bias': True, 'kernel_size': [3, 3, 3], 'padding': [1, 1, 1]}
Suus10 - StackedConvLayers, input: 320 en output: 320, first_stride: [1, 2, 2], num_convs: 1, conv_kwargs: {'stride': 1, 'dilation': 1, 'bias': True, 'kernel_size': [3, 3, 3], 'padding': [1, 1, 1]}
Suus10 - StackedConvLayers, input: 320 en output: 320, first_stride: None, num_convs: 1, conv_kwargs: {'stride': 1, 'dilation': 1, 'bias': True, 'kernel_size': [3, 3, 3], 'padding': [1, 1, 1]}
Suus10 - StackedConvLayers, input: 640 en output: 320, first_stride: None, num_convs: 1, conv_kwargs: {'stride': 1, 'dilation': 1, 'bias': True, 'kernel_size': [3, 3, 3], 'padding': [1, 1, 1]}
Suus10 - StackedConvLayers, input: 320 en output: 320, first_stride: None, num_convs: 1, conv_kwargs: {'stride': 1, 'dilation': 1, 'bias': True, 'kernel_size': [3, 3, 3], 'padding': [1, 1, 1]}
Suus10 - StackedConvLayers, input: 512 en output: 256, first_stride: None, num_convs: 1, conv_kwargs: {'stride': 1, 'dilation': 1, 'bias': True, 'kernel_size': [3, 3, 3], 'padding': [1, 1, 1]}
Suus10 - StackedConvLayers, input: 256 en output: 256, first_stride: None, num_convs: 1, conv_kwargs: {'stride': 1, 'dilation': 1, 'bias': True, 'kernel_size': [3, 3, 3], 'padding': [1, 1, 1]}
Suus10 - StackedConvLayers, input: 256 en output: 128, first_stride: None, num_convs: 1, conv_kwargs: {'stride': 1, 'dilation': 1, 'bias': True, 'kernel_size': [3, 3, 3], 'padding': [1, 1, 1]}
Suus10 - StackedConvLayers, input: 128 en output: 128, first_stride: None, num_convs: 1, conv_kwargs: {'stride': 1, 'dilation': 1, 'bias': True, 'kernel_size': [3, 3, 3], 'padding': [1, 1, 1]}
Suus10 - StackedConvLayers, input: 128 en output: 64, first_stride: None, num_convs: 1, conv_kwargs: {'stride': 1, 'dilation': 1, 'bias': True, 'kernel_size': [3, 3, 3], 'padding': [1, 1, 1]}
Suus10 - StackedConvLayers, input: 64 en output: 64, first_stride: None, num_convs: 1, conv_kwargs: {'stride': 1, 'dilation': 1, 'bias': True, 'kernel_size': [3, 3, 3], 'padding': [1, 1, 1]}
Suus10 - StackedConvLayers, input: 64 en output: 32, first_stride: None, num_convs: 1, conv_kwargs: {'stride': 1, 'dilation': 1, 'bias': True, 'kernel_size': [3, 3, 3], 'padding': [1, 1, 1]}
Suus10 - StackedConvLayers, input: 32 en output: 32, first_stride: None, num_convs: 1, conv_kwargs: {'stride': 1, 'dilation': 1, 'bias': True, 'kernel_size': [3, 3, 3], 'padding': [1, 1, 1]}
Generic_UNet(
  (encoder): Generic_UNETEncoder()
  (decoder): Generic_UNETDecoder()
  (conv_blocks_localization): ModuleList(
    (0): Sequential(
      (0): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(640, 320, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
      (1): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(320, 320, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
    )
    (1): Sequential(
      (0): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(512, 256, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
      (1): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(256, 256, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
    )
    (2): Sequential(
      (0): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(256, 128, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
      (1): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(128, 128, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
    )
    (3): Sequential(
      (0): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(128, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
      (1): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
    )
    (4): Sequential(
      (0): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(64, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
      (1): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(32, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
    )
  )
  (conv_blocks_context): ModuleList(
    (0): StackedConvLayers(
      (blocks): Sequential(
        (0): ConvDropoutNormNonlin(
          (conv): Conv3d(1, 32, kernel_size=(1, 3, 3), stride=(1, 1, 1), padding=(0, 1, 1))
          (instnorm): InstanceNorm3d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
        )
        (1): ConvDropoutNormNonlin(
          (conv): Conv3d(32, 32, kernel_size=(1, 3, 3), stride=(1, 1, 1), padding=(0, 1, 1))
          (instnorm): InstanceNorm3d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
        )
      )
    )
    (1): StackedConvLayers(
      (blocks): Sequential(
        (0): ConvDropoutNormNonlin(
          (conv): Conv3d(32, 64, kernel_size=(3, 3, 3), stride=(1, 2, 2), padding=(1, 1, 1))
          (instnorm): InstanceNorm3d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
        )
        (1): ConvDropoutNormNonlin(
          (conv): Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (instnorm): InstanceNorm3d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
        )
      )
    )
    (2): StackedConvLayers(
      (blocks): Sequential(
        (0): ConvDropoutNormNonlin(
          (conv): Conv3d(64, 128, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1))
          (instnorm): InstanceNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
        )
        (1): ConvDropoutNormNonlin(
          (conv): Conv3d(128, 128, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (instnorm): InstanceNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
        )
      )
    )
    (3): StackedConvLayers(
      (blocks): Sequential(
        (0): ConvDropoutNormNonlin(
          (conv): Conv3d(128, 256, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1))
          (instnorm): InstanceNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
        )
        (1): ConvDropoutNormNonlin(
          (conv): Conv3d(256, 256, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (instnorm): InstanceNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
        )
      )
    )
    (4): StackedConvLayers(
      (blocks): Sequential(
        (0): ConvDropoutNormNonlin(
          (conv): Conv3d(256, 320, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1))
          (instnorm): InstanceNorm3d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
        )
        (1): ConvDropoutNormNonlin(
          (conv): Conv3d(320, 320, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (instnorm): InstanceNorm3d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
        )
      )
    )
    (5): Sequential(
      (0): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(320, 320, kernel_size=(3, 3, 3), stride=(1, 2, 2), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
      (1): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(320, 320, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
    )
  )
  (td): ModuleList()
  (tu): ModuleList(
    (0): ConvTranspose3d(320, 320, kernel_size=(1, 2, 2), stride=(1, 2, 2), bias=False)
    (1): ConvTranspose3d(320, 256, kernel_size=(2, 2, 2), stride=(2, 2, 2), bias=False)
    (2): ConvTranspose3d(256, 128, kernel_size=(2, 2, 2), stride=(2, 2, 2), bias=False)
    (3): ConvTranspose3d(128, 64, kernel_size=(2, 2, 2), stride=(2, 2, 2), bias=False)
    (4): ConvTranspose3d(64, 32, kernel_size=(1, 2, 2), stride=(1, 2, 2), bias=False)
  )
  (seg_outputs): ModuleList(
    (0): Conv3d(320, 2, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
    (1): Conv3d(256, 2, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
    (2): Conv3d(128, 2, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
    (3): Conv3d(64, 2, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
    (4): Conv3d(32, 2, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
  )
)
using the following model files:  ['/exports/lkeb-hpc/smaijer/results/nnUNet/3d_fullres/Task510/nnUNetTrainerV2__nnUNetPlansv2.1/fold_0/model_final_checkpoint.model', '/exports/lkeb-hpc/smaijer/results/nnUNet/3d_fullres/Task510/nnUNetTrainerV2__nnUNetPlansv2.1/fold_1/model_final_checkpoint.model', '/exports/lkeb-hpc/smaijer/results/nnUNet/3d_fullres/Task510/nnUNetTrainerV2__nnUNetPlansv2.1/fold_2/model_final_checkpoint.model', '/exports/lkeb-hpc/smaijer/results/nnUNet/3d_fullres/Task510/nnUNetTrainerV2__nnUNetPlansv2.1/fold_3/model_final_checkpoint.model', '/exports/lkeb-hpc/smaijer/results/nnUNet/3d_fullres/Task510/nnUNetTrainerV2__nnUNetPlansv2.1/fold_4/model_final_checkpoint.model']
starting preprocessing generator
[Timing] starting preprocessing generator took 1.2636184692382812e-05 seconds
starting prediction...
Preprocessing with 6 multithreads
preprocessing /exports/lkeb-hpc/smaijer/output/510/3d_fullres/nnUNetTrainerV2/610/imagesTr/panc_00005.nii.gz
using preprocessor GenericPreprocessor
[Timing] Loading took 0.1701793670654297 seconds
before crop: (1, 42, 320, 320) after crop: (1, 42, 292, 320) spacing: [3.         0.68493152 0.68493152] 

ff voor mezelf want snap data files niet, hier lengte van data files1
separate z, order in z is 0 order inplane is 3
separate z, order in z is 0 order inplane is 1
before: {'spacing': array([3.        , 0.68493152, 0.68493152]), 'spacing_transposed': array([3.        , 0.68493152, 0.68493152]), 'data.shape (data is transposed)': (1, 42, 292, 320)} 
after:  {'spacing': array([2.5       , 0.80273402, 0.80273402]), 'data.shape (data is resampled)': (1, 50, 249, 273)} 

[Timing] Preprocessing specifics: loading&cropping took 0.4494590759277344, transposing took 2.1457672119140625e-05 and 3.5762786865234375e-06, resampling/normalizing took 1.2014696598052979.
[Timing] preprocessing function took 1.6559925079345703 seconds
(1, 50, 249, 273)
[Timing] total time for preprocessing this item is 21.08742928504944
[Timing] This worker has ended successfully, no errors to report. It took 119.62240386009216 seconds.
preprocessing /exports/lkeb-hpc/smaijer/output/510/3d_fullres/nnUNetTrainerV2/610/imagesTr/panc_00002.nii.gz
using preprocessor GenericPreprocessor
[Timing] Loading took 0.16291308403015137 seconds
before crop: (1, 40, 320, 320) after crop: (1, 40, 320, 320) spacing: [3.     0.6875 0.6875] 

ff voor mezelf want snap data files niet, hier lengte van data files1
separate z, order in z is 0 order inplane is 3
separate z, order in z is 0 order inplane is 1
before: {'spacing': array([3.    , 0.6875, 0.6875]), 'spacing_transposed': array([3.    , 0.6875, 0.6875]), 'data.shape (data is transposed)': (1, 40, 320, 320)} 
after:  {'spacing': array([2.5       , 0.80273402, 0.80273402]), 'data.shape (data is resampled)': (1, 48, 274, 274)} 

[Timing] Preprocessing specifics: loading&cropping took 0.4505026340484619, transposing took 2.4080276489257812e-05 and 4.291534423828125e-06, resampling/normalizing took 1.273113489151001.
[Timing] preprocessing function took 1.7280464172363281 seconds
(1, 48, 274, 274)
[Timing] total time for preprocessing this item is 37.44016122817993
[Timing] This worker has ended successfully, no errors to report. It took 193.68258619308472 seconds.
preprocessing /exports/lkeb-hpc/smaijer/output/510/3d_fullres/nnUNetTrainerV2/610/imagesTr/panc_00003.nii.gz
using preprocessor GenericPreprocessor
[Timing] Loading took 0.17732787132263184 seconds
before crop: (1, 40, 320, 320) after crop: (1, 40, 320, 320) spacing: [3.     0.6875 0.6875] 

ff voor mezelf want snap data files niet, hier lengte van data files1
separate z, order in z is 0 order inplane is 3
separate z, order in z is 0 order inplane is 1
before: {'spacing': array([3.    , 0.6875, 0.6875]), 'spacing_transposed': array([3.    , 0.6875, 0.6875]), 'data.shape (data is transposed)': (1, 40, 320, 320)} 
after:  {'spacing': array([2.5       , 0.80273402, 0.80273402]), 'data.shape (data is resampled)': (1, 48, 274, 274)} 

[Timing] Preprocessing specifics: loading&cropping took 0.46126246452331543, transposing took 2.2172927856445312e-05 and 4.76837158203125e-06, resampling/normalizing took 1.2606594562530518.
[Timing] preprocessing function took 1.7265241146087646 seconds
(1, 48, 274, 274)
[Timing] total time for preprocessing this item is 53.80732536315918
[Timing] This worker has ended successfully, no errors to report. It took 193.66537189483643 seconds.
preprocessing /exports/lkeb-hpc/smaijer/output/510/3d_fullres/nnUNetTrainerV2/610/imagesTr/panc_00001.nii.gz
using preprocessor GenericPreprocessor
[Timing] Loading took 0.0892033576965332 seconds
before crop: (1, 40, 320, 320) after crop: (1, 40, 320, 320) spacing: [3.     0.6875 0.6875] 

ff voor mezelf want snap data files niet, hier lengte van data files1
separate z, order in z is 0 order inplane is 3
separate z, order in z is 0 order inplane is 1
before: {'spacing': array([3.    , 0.6875, 0.6875]), 'spacing_transposed': array([3.    , 0.6875, 0.6875]), 'data.shape (data is transposed)': (1, 40, 320, 320)} 
after:  {'spacing': array([2.5       , 0.80273402, 0.80273402]), 'data.shape (data is resampled)': (1, 48, 274, 274)} 

[Timing] Preprocessing specifics: loading&cropping took 0.3614330291748047, transposing took 3.7670135498046875e-05 and 5.4836273193359375e-06, resampling/normalizing took 1.2142925262451172.
[Timing] preprocessing function took 1.5800821781158447 seconds
(1, 48, 274, 274)
[Timing] total time for preprocessing this item is 1.580557107925415
preprocessing /exports/lkeb-hpc/smaijer/output/510/3d_fullres/nnUNetTrainerV2/610/imagesTr/panc_00007.nii.gz
using preprocessor GenericPreprocessor
[Timing] Loading took 0.21747231483459473 seconds
before crop: (1, 42, 320, 320) after crop: (1, 42, 292, 320) spacing: [3.         0.68493152 0.68493152] 

ff voor mezelf want snap data files niet, hier lengte van data files1
separate z, order in z is 0 order inplane is 3
separate z, order in z is 0 order inplane is 1
before: {'spacing': array([3.        , 0.68493152, 0.68493152]), 'spacing_transposed': array([3.        , 0.68493152, 0.68493152]), 'data.shape (data is transposed)': (1, 42, 292, 320)} 
after:  {'spacing': array([2.5       , 0.80273402, 0.80273402]), 'data.shape (data is resampled)': (1, 50, 249, 273)} 

[Timing] Preprocessing specifics: loading&cropping took 0.4440751075744629, transposing took 1.4543533325195312e-05 and 1.6689300537109375e-06, resampling/normalizing took 0.9691741466522217.
[Timing] preprocessing function took 1.4366176128387451 seconds
(1, 50, 249, 273)
[Timing] total time for preprocessing this item is 68.66492772102356
[Timing] This worker has ended successfully, no errors to report. It took 193.70771479606628 seconds.
preprocessing /exports/lkeb-hpc/smaijer/output/510/3d_fullres/nnUNetTrainerV2/610/imagesTr/panc_00000.nii.gz
using preprocessor GenericPreprocessor
[Timing] Loading took 0.16984343528747559 seconds
before crop: (1, 40, 320, 320) after crop: (1, 40, 318, 320) spacing: [3.     0.6875 0.6875] 

ff voor mezelf want snap data files niet, hier lengte van data files1
separate z, order in z is 0 order inplane is 3
separate z, order in z is 0 order inplane is 1
before: {'spacing': array([3.    , 0.6875, 0.6875]), 'spacing_transposed': array([3.    , 0.6875, 0.6875]), 'data.shape (data is transposed)': (1, 40, 318, 320)} 
after:  {'spacing': array([2.5       , 0.80273402, 0.80273402]), 'data.shape (data is resampled)': (1, 48, 272, 274)} 

[Timing] Preprocessing specifics: loading&cropping took 0.448880672454834, transposing took 2.6226043701171875e-05 and 3.814697265625e-06, resampling/normalizing took 1.227522373199463.
[Timing] preprocessing function took 1.682708740234375 seconds
(1, 48, 272, 274)
[Timing] total time for preprocessing this item is 1.6832263469696045
preprocessing /exports/lkeb-hpc/smaijer/output/510/3d_fullres/nnUNetTrainerV2/610/imagesTr/panc_00006.nii.gz
using preprocessor GenericPreprocessor
[Timing] Loading took 0.18769264221191406 seconds
before crop: (1, 42, 320, 320) after crop: (1, 42, 300, 320) spacing: [3.         0.66666669 0.66666669] 

ff voor mezelf want snap data files niet, hier lengte van data files1
separate z, order in z is 0 order inplane is 3
separate z, order in z is 0 order inplane is 1
before: {'spacing': array([3.        , 0.66666669, 0.66666669]), 'spacing_transposed': array([3.        , 0.66666669, 0.66666669]), 'data.shape (data is transposed)': (1, 42, 300, 320)} 
after:  {'spacing': array([2.5       , 0.80273402, 0.80273402]), 'data.shape (data is resampled)': (1, 50, 249, 266)} 

[Timing] Preprocessing specifics: loading&cropping took 0.418532133102417, transposing took 1.0251998901367188e-05 and 1.430511474609375e-06, resampling/normalizing took 0.987346887588501.
[Timing] preprocessing function took 1.4300169944763184 seconds
(1, 50, 249, 266)
[Timing] total time for preprocessing this item is 85.04303812980652
[Timing] This worker has ended successfully, no errors to report. It took 193.73153638839722 seconds.
preprocessing /exports/lkeb-hpc/smaijer/output/510/3d_fullres/nnUNetTrainerV2/610/imagesTr/panc_00004.nii.gz
using preprocessor GenericPreprocessor
[Timing] Loading took 0.15158390998840332 seconds
before crop: (1, 35, 512, 512) after crop: (1, 35, 438, 512) spacing: [4.4000001 0.78125   0.78125  ] 

ff voor mezelf want snap data files niet, hier lengte van data files1
separate z, order in z is 0 order inplane is 3
separate z, order in z is 0 order inplane is 1
before: {'spacing': array([4.4000001, 0.78125  , 0.78125  ]), 'spacing_transposed': array([4.4000001, 0.78125  , 0.78125  ]), 'data.shape (data is transposed)': (1, 35, 438, 512)} 
after:  {'spacing': array([2.5       , 0.80273402, 0.80273402]), 'data.shape (data is resampled)': (1, 62, 426, 498)} 

[Timing] Preprocessing specifics: loading&cropping took 0.736950159072876, transposing took 3.933906555175781e-05 and 6.67572021484375e-06, resampling/normalizing took 3.8408381938934326.
[Timing] preprocessing function took 4.599445343017578 seconds
(1, 62, 426, 498)
[Timing] total time for preprocessing this item is 103.1096830368042
[Timing] This worker has ended successfully, no errors to report. It took 193.654611825943 seconds.
force_separate_z: None interpolation order: 1
separate z: True lowres axis [0]
separate z, order in z is 0 order inplane is 1
suus we gaan schrijven naar /exports/lkeb-hpc/smaijer/output/510/3d_fullres/nnUNetTrainerV2/610/imagesTr/panc_00001.nii.gz
[Timing] - Resampling the segmentation to original shape took 0.9317784309387207 seconds
[Timing] - Saving the segmentation took 0.039412736892700195 seconds
force_separate_z: None interpolation order: 1
separate z: True lowres axis [0]
separate z, order in z is 0 order inplane is 1
suus we gaan schrijven naar /exports/lkeb-hpc/smaijer/output/510/3d_fullres/nnUNetTrainerV2/610/imagesTr/panc_00005.nii.gz
[Timing] - Resampling the segmentation to original shape took 0.9563426971435547 seconds
[Timing] - Saving the segmentation took 0.027080535888671875 seconds
force_separate_z: None interpolation order: 1
separate z: True lowres axis [0]
separate z, order in z is 0 order inplane is 1
suus we gaan schrijven naar /exports/lkeb-hpc/smaijer/output/510/3d_fullres/nnUNetTrainerV2/610/imagesTr/panc_00003.nii.gz
[Timing] - Resampling the segmentation to original shape took 1.0054380893707275 seconds
[Timing] - Saving the segmentation took 0.02573418617248535 seconds
force_separate_z: None interpolation order: 1
separate z: True lowres axis [0]
separate z, order in z is 0 order inplane is 1
suus we gaan schrijven naar /exports/lkeb-hpc/smaijer/output/510/3d_fullres/nnUNetTrainerV2/610/imagesTr/panc_00006.nii.gz
[Timing] - Resampling the segmentation to original shape took 0.9302706718444824 seconds
[Timing] - Saving the segmentation took 0.025734901428222656 seconds
force_separate_z: None interpolation order: 1
separate z: True lowres axis [0]
separate z, order in z is 0 order inplane is 1
suus we gaan schrijven naar /exports/lkeb-hpc/smaijer/output/510/3d_fullres/nnUNetTrainerV2/610/imagesTr/panc_00000.nii.gz
[Timing] - Resampling the segmentation to original shape took 0.9723713397979736 seconds
[Timing] - Saving the segmentation took 0.03933119773864746 seconds
force_separate_z: None interpolation order: 1
separate z: True lowres axis [0]
separate z, order in z is 0 order inplane is 1
suus we gaan schrijven naar /exports/lkeb-hpc/smaijer/output/510/3d_fullres/nnUNetTrainerV2/610/imagesTr/panc_00002.nii.gz
[Timing] - Resampling the segmentation to original shape took 1.0180778503417969 seconds
[Timing] - Saving the segmentation took 0.02465343475341797 seconds
force_separate_z: None interpolation order: 1
separate z: True lowres axis [0]
separate z, order in z is 0 order inplane is 1
suus we gaan schrijven naar /exports/lkeb-hpc/smaijer/output/510/3d_fullres/nnUNetTrainerV2/610/imagesTr/panc_00007.nii.gz
[Timing] - Resampling the segmentation to original shape took 0.9781720638275146 seconds
[Timing] - Saving the segmentation took 0.07817840576171875 seconds
force_separate_z: None interpolation order: 1
separate z: True lowres axis [0]
separate z, order in z is 0 order inplane is 1
suus we gaan schrijven naar /exports/lkeb-hpc/smaijer/output/510/3d_fullres/nnUNetTrainerV2/610/imagesTr/panc_00004.nii.gz
[Timing] - Resampling the segmentation to original shape took 2.005852222442627 seconds
[Timing] - Saving the segmentation took 0.0518798828125 seconds
predicting /exports/lkeb-hpc/smaijer/output/510/3d_fullres/nnUNetTrainerV2/610/imagesTr/panc_00001.nii.gz
[Timing] loading took 0.05774736404418945 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 48, 274, 274)
patch size: [ 40 224 224]
steps (x, y, and z): [[0, 8], [0, 50], [0, 50]]
number of tiles: 8
computing Gaussian
done
prediction done
[Timing] fold 0 prediction took 6.483007431030273 seconds
[Timing] loading another fold took 0.03242135047912598 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 48, 274, 274)
patch size: [ 40 224 224]
steps (x, y, and z): [[0, 8], [0, 50], [0, 50]]
number of tiles: 8
using precomputed Gaussian
prediction done
[Timing] another fold took 3.2152652740478516 seconds
[Timing] loading another fold took 0.03225302696228027 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 48, 274, 274)
patch size: [ 40 224 224]
steps (x, y, and z): [[0, 8], [0, 50], [0, 50]]
number of tiles: 8
using precomputed Gaussian
prediction done
[Timing] another fold took 3.1978867053985596 seconds
[Timing] loading another fold took 0.03241539001464844 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 48, 274, 274)
patch size: [ 40 224 224]
steps (x, y, and z): [[0, 8], [0, 50], [0, 50]]
number of tiles: 8
using precomputed Gaussian
prediction done
[Timing] another fold took 3.198946714401245 seconds
[Timing] loading another fold took 0.031999826431274414 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 48, 274, 274)
patch size: [ 40 224 224]
steps (x, y, and z): [[0, 8], [0, 50], [0, 50]]
number of tiles: 8
using precomputed Gaussian
prediction done
[Timing] another fold took 3.2289485931396484 seconds
[Timing] normalising with folds took 0.0025458335876464844 seconds
[Timing] transposing backwards took 4.029273986816406e-05 seconds
[Timing] full prediction took 21.174917221069336 seconds
predicting /exports/lkeb-hpc/smaijer/output/510/3d_fullres/nnUNetTrainerV2/610/imagesTr/panc_00000.nii.gz
[Timing] loading took 0.03376126289367676 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 48, 272, 274)
patch size: [ 40 224 224]
steps (x, y, and z): [[0, 8], [0, 48], [0, 50]]
number of tiles: 8
using precomputed Gaussian
prediction done
[Timing] fold 0 prediction took 3.2311315536499023 seconds
[Timing] loading another fold took 0.03166651725769043 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 48, 272, 274)
patch size: [ 40 224 224]
steps (x, y, and z): [[0, 8], [0, 48], [0, 50]]
number of tiles: 8
using precomputed Gaussian
prediction done
[Timing] another fold took 3.2138290405273438 seconds
[Timing] loading another fold took 0.03187155723571777 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 48, 272, 274)
patch size: [ 40 224 224]
steps (x, y, and z): [[0, 8], [0, 48], [0, 50]]
number of tiles: 8
using precomputed Gaussian
prediction done
[Timing] another fold took 3.214702844619751 seconds
[Timing] loading another fold took 0.03175520896911621 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 48, 272, 274)
patch size: [ 40 224 224]
steps (x, y, and z): [[0, 8], [0, 48], [0, 50]]
number of tiles: 8
using precomputed Gaussian
prediction done
[Timing] another fold took 3.214308977127075 seconds
[Timing] loading another fold took 0.031829118728637695 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 48, 272, 274)
patch size: [ 40 224 224]
steps (x, y, and z): [[0, 8], [0, 48], [0, 50]]
number of tiles: 8
using precomputed Gaussian
prediction done
[Timing] another fold took 3.2160871028900146 seconds
[Timing] normalising with folds took 0.00250244140625 seconds
[Timing] transposing backwards took 2.3126602172851562e-05 seconds
[Timing] full prediction took 37.46765637397766 seconds
predicting /exports/lkeb-hpc/smaijer/output/510/3d_fullres/nnUNetTrainerV2/610/imagesTr/panc_00005.nii.gz
[Timing] loading took 0.0344691276550293 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 50, 249, 273)
patch size: [ 40 224 224]
steps (x, y, and z): [[0, 10], [0, 25], [0, 49]]
number of tiles: 8
using precomputed Gaussian
prediction done
[Timing] fold 0 prediction took 3.2377617359161377 seconds
[Timing] loading another fold took 0.03231000900268555 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 50, 249, 273)
patch size: [ 40 224 224]
steps (x, y, and z): [[0, 10], [0, 25], [0, 49]]
number of tiles: 8
using precomputed Gaussian
prediction done
[Timing] another fold took 3.2465150356292725 seconds
[Timing] loading another fold took 0.032061100006103516 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 50, 249, 273)
patch size: [ 40 224 224]
steps (x, y, and z): [[0, 10], [0, 25], [0, 49]]
number of tiles: 8
using precomputed Gaussian
prediction done
[Timing] another fold took 3.238003730773926 seconds
[Timing] loading another fold took 0.03226613998413086 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 50, 249, 273)
patch size: [ 40 224 224]
steps (x, y, and z): [[0, 10], [0, 25], [0, 49]]
number of tiles: 8
using precomputed Gaussian
prediction done
[Timing] another fold took 3.236750364303589 seconds
[Timing] loading another fold took 0.03195762634277344 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 50, 249, 273)
patch size: [ 40 224 224]
steps (x, y, and z): [[0, 10], [0, 25], [0, 49]]
number of tiles: 8
using precomputed Gaussian
prediction done
[Timing] another fold took 3.2350759506225586 seconds
[Timing] normalising with folds took 0.002410888671875 seconds
[Timing] transposing backwards took 3.719329833984375e-05 seconds
[Timing] full prediction took 53.86519980430603 seconds
predicting /exports/lkeb-hpc/smaijer/output/510/3d_fullres/nnUNetTrainerV2/610/imagesTr/panc_00002.nii.gz
[Timing] loading took 0.03377795219421387 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 48, 274, 274)
patch size: [ 40 224 224]
steps (x, y, and z): [[0, 8], [0, 50], [0, 50]]
number of tiles: 8
using precomputed Gaussian
prediction done
[Timing] fold 0 prediction took 3.2634902000427246 seconds
[Timing] loading another fold took 0.03144717216491699 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 48, 274, 274)
patch size: [ 40 224 224]
steps (x, y, and z): [[0, 8], [0, 50], [0, 50]]
number of tiles: 8
using precomputed Gaussian
prediction done
[Timing] another fold took 3.2329213619232178 seconds
[Timing] loading another fold took 0.03132891654968262 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 48, 274, 274)
patch size: [ 40 224 224]
steps (x, y, and z): [[0, 8], [0, 50], [0, 50]]
number of tiles: 8
using precomputed Gaussian
prediction done
[Timing] another fold took 3.2372164726257324 seconds
[Timing] loading another fold took 0.03145194053649902 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 48, 274, 274)
patch size: [ 40 224 224]
steps (x, y, and z): [[0, 8], [0, 50], [0, 50]]
number of tiles: 8
using precomputed Gaussian
prediction done
[Timing] another fold took 3.237604856491089 seconds
[Timing] loading another fold took 0.031427621841430664 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 48, 274, 274)
patch size: [ 40 224 224]
steps (x, y, and z): [[0, 8], [0, 50], [0, 50]]
number of tiles: 8
using precomputed Gaussian
prediction done
[Timing] another fold took 3.2384514808654785 seconds
[Timing] normalising with folds took 0.002424955368041992 seconds
[Timing] transposing backwards took 2.3126602172851562e-05 seconds
[Timing] full prediction took 70.26425218582153 seconds
predicting /exports/lkeb-hpc/smaijer/output/510/3d_fullres/nnUNetTrainerV2/610/imagesTr/panc_00003.nii.gz
[Timing] loading took 0.032971858978271484 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 48, 274, 274)
patch size: [ 40 224 224]
steps (x, y, and z): [[0, 8], [0, 50], [0, 50]]
number of tiles: 8
using precomputed Gaussian
prediction done
[Timing] fold 0 prediction took 3.283930778503418 seconds
[Timing] loading another fold took 0.03166675567626953 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 48, 274, 274)
patch size: [ 40 224 224]
steps (x, y, and z): [[0, 8], [0, 50], [0, 50]]
number of tiles: 8
using precomputed Gaussian
prediction done
[Timing] another fold took 3.2467803955078125 seconds
[Timing] loading another fold took 0.031760215759277344 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 48, 274, 274)
patch size: [ 40 224 224]
steps (x, y, and z): [[0, 8], [0, 50], [0, 50]]
number of tiles: 8
using precomputed Gaussian
prediction done
[Timing] another fold took 3.2438769340515137 seconds
[Timing] loading another fold took 0.031548261642456055 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 48, 274, 274)
patch size: [ 40 224 224]
steps (x, y, and z): [[0, 8], [0, 50], [0, 50]]
number of tiles: 8
using precomputed Gaussian
prediction done
[Timing] another fold took 3.246107339859009 seconds
[Timing] loading another fold took 0.031466007232666016 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 48, 274, 274)
patch size: [ 40 224 224]
steps (x, y, and z): [[0, 8], [0, 50], [0, 50]]
number of tiles: 8
using precomputed Gaussian
prediction done
[Timing] another fold took 3.249872922897339 seconds
[Timing] normalising with folds took 0.0024878978729248047 seconds
[Timing] transposing backwards took 3.266334533691406e-05 seconds
[Timing] full prediction took 86.72415852546692 seconds
predicting /exports/lkeb-hpc/smaijer/output/510/3d_fullres/nnUNetTrainerV2/610/imagesTr/panc_00007.nii.gz
[Timing] loading took 0.033550262451171875 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 50, 249, 273)
patch size: [ 40 224 224]
steps (x, y, and z): [[0, 10], [0, 25], [0, 49]]
number of tiles: 8
using precomputed Gaussian
prediction done
[Timing] fold 0 prediction took 3.274296760559082 seconds
[Timing] loading another fold took 0.031770944595336914 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 50, 249, 273)
patch size: [ 40 224 224]
steps (x, y, and z): [[0, 10], [0, 25], [0, 49]]
number of tiles: 8
using precomputed Gaussian
prediction done
[Timing] another fold took 3.256403923034668 seconds
[Timing] loading another fold took 0.03213620185852051 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 50, 249, 273)
patch size: [ 40 224 224]
steps (x, y, and z): [[0, 10], [0, 25], [0, 49]]
number of tiles: 8
using precomputed Gaussian
prediction done
[Timing] another fold took 3.2454476356506348 seconds
[Timing] loading another fold took 0.03204822540283203 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 50, 249, 273)
patch size: [ 40 224 224]
steps (x, y, and z): [[0, 10], [0, 25], [0, 49]]
number of tiles: 8
using precomputed Gaussian
prediction done
[Timing] another fold took 3.249305009841919 seconds
[Timing] loading another fold took 0.031857967376708984 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 50, 249, 273)
patch size: [ 40 224 224]
steps (x, y, and z): [[0, 10], [0, 25], [0, 49]]
number of tiles: 8
using precomputed Gaussian
prediction done
[Timing] another fold took 3.2519099712371826 seconds
[Timing] normalising with folds took 0.0023643970489501953 seconds
[Timing] transposing backwards took 2.86102294921875e-05 seconds
[Timing] full prediction took 103.19331645965576 seconds
predicting /exports/lkeb-hpc/smaijer/output/510/3d_fullres/nnUNetTrainerV2/610/imagesTr/panc_00006.nii.gz
[Timing] loading took 0.03442955017089844 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 50, 249, 266)
patch size: [ 40 224 224]
steps (x, y, and z): [[0, 10], [0, 25], [0, 42]]
number of tiles: 8
using precomputed Gaussian
prediction done
[Timing] fold 0 prediction took 3.27485728263855 seconds
[Timing] loading another fold took 0.03195047378540039 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 50, 249, 266)
patch size: [ 40 224 224]
steps (x, y, and z): [[0, 10], [0, 25], [0, 42]]
number of tiles: 8
using precomputed Gaussian
prediction done
[Timing] another fold took 3.2519943714141846 seconds
[Timing] loading another fold took 0.03180503845214844 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 50, 249, 266)
patch size: [ 40 224 224]
steps (x, y, and z): [[0, 10], [0, 25], [0, 42]]
number of tiles: 8
using precomputed Gaussian
prediction done
[Timing] another fold took 3.249990701675415 seconds
[Timing] loading another fold took 0.03174853324890137 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 50, 249, 266)
patch size: [ 40 224 224]
steps (x, y, and z): [[0, 10], [0, 25], [0, 42]]
number of tiles: 8
using precomputed Gaussian
prediction done
[Timing] another fold took 3.253568410873413 seconds
[Timing] loading another fold took 0.03198409080505371 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 50, 249, 266)
patch size: [ 40 224 224]
steps (x, y, and z): [[0, 10], [0, 25], [0, 42]]
number of tiles: 8
using precomputed Gaussian
prediction done
[Timing] another fold took 3.2579073905944824 seconds
[Timing] normalising with folds took 0.0023016929626464844 seconds
[Timing] transposing backwards took 3.1948089599609375e-05 seconds
[Timing] full prediction took 119.66765451431274 seconds
predicting /exports/lkeb-hpc/smaijer/output/510/3d_fullres/nnUNetTrainerV2/610/imagesTr/panc_00004.nii.gz
[Timing] loading took 0.03244519233703613 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 62, 426, 498)
patch size: [ 40 224 224]
steps (x, y, and z): [[0, 11, 22], [0, 101, 202], [0, 91, 183, 274]]
number of tiles: 36
using precomputed Gaussian
prediction done
[Timing] fold 0 prediction took 14.7322096824646 seconds
[Timing] loading another fold took 0.032466888427734375 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 62, 426, 498)
patch size: [ 40 224 224]
steps (x, y, and z): [[0, 11, 22], [0, 101, 202], [0, 91, 183, 274]]
number of tiles: 36
using precomputed Gaussian
prediction done
[Timing] another fold took 14.741657257080078 seconds
[Timing] loading another fold took 0.03231334686279297 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 62, 426, 498)
patch size: [ 40 224 224]
steps (x, y, and z): [[0, 11, 22], [0, 101, 202], [0, 91, 183, 274]]
number of tiles: 36
using precomputed Gaussian
prediction done
[Timing] another fold took 14.750003814697266 seconds
[Timing] loading another fold took 0.03246021270751953 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 62, 426, 498)
patch size: [ 40 224 224]
steps (x, y, and z): [[0, 11, 22], [0, 101, 202], [0, 91, 183, 274]]
number of tiles: 36
using precomputed Gaussian
prediction done
[Timing] another fold took 14.74962830543518 seconds
[Timing] loading another fold took 0.03240323066711426 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 62, 426, 498)
patch size: [ 40 224 224]
steps (x, y, and z): [[0, 11, 22], [0, 101, 202], [0, 91, 183, 274]]
number of tiles: 36
using precomputed Gaussian
prediction done
[Timing] another fold took 14.756468534469604 seconds
[Timing] normalising with folds took 0.009103059768676758 seconds
[Timing] transposing backwards took 3.695487976074219e-05 seconds
[Timing] full prediction took 193.6705801486969 seconds
[Timing] Another preprocessing process done, it took 193.7779200077057 seconds
[Timing] Another preprocessing process done, it took 193.77796626091003 seconds
[Timing] Another preprocessing process done, it took 193.77798318862915 seconds
[Timing] Another preprocessing process done, it took 193.77800130844116 seconds
[Timing] Another preprocessing process done, it took 193.78971004486084 seconds
[Timing] Another preprocessing process done, it took 193.7897288799286 seconds
inference done. Now waiting for the segmentation export to finish...
postprocessing...
[Timing] postprocessing took 2.501678466796875 seconds


Please cite the following paper when using nnUNet:

Isensee, F., Jaeger, P.F., Kohl, S.A.A. et al. "nnU-Net: a self-configuring method for deep learning-based biomedical image segmentation." Nat Methods (2020). https://doi.org/10.1038/s41592-020-01008-z


If you have questions or suggestions, feel free to open an issue at https://github.com/MIC-DKFZ/nnUNet

Program finished with exit code 0 at: Wed Nov  2 10:17:07 CET 2022
