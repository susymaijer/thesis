Starting at Wed Nov  2 10:16:43 CET 2022
Running on hosts: res-hpc-lkeb07
Running on 1 nodes.
Running 1 tasks.
CPUs on node: 6.
Account: div2-lkeb
Job ID: 12739898
Job name: PancreasInferenceEval
Node running script: res-hpc-lkeb07
Submit host: res-hpc-lo02.researchlumc.nl
GPUS: 0 or 
Wed Nov  2 10:16:44 2022       
+-----------------------------------------------------------------------------+
| NVIDIA-SMI 470.141.03   Driver Version: 470.141.03   CUDA Version: 11.4     |
|-------------------------------+----------------------+----------------------+
| GPU  Name        Persistence-M| Bus-Id        Disp.A | Volatile Uncorr. ECC |
| Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. |
|                               |                      |               MIG M. |
|===============================+======================+======================|
|   0  Quadro RTX 6000     Off  | 00000000:D8:00.0 Off |                  Off |
| 33%   35C    P0    58W / 260W |      0MiB / 24220MiB |      4%      Default |
|                               |                      |                  N/A |
+-------------------------------+----------------------+----------------------+
                                                                               
+-----------------------------------------------------------------------------+
| Processes:                                                                  |
|  GPU   GI   CI        PID   Type   Process name                  GPU Memory |
|        ID   ID                                                   Usage      |
|=============================================================================|
|  No running processes found                                                 |
+-----------------------------------------------------------------------------+
Current working directory is /home/smaijer
Load all modules..
Done with loading all modules. Modules:
Activate conda env nnunet..
Verifying environment variables:
Installing hidden layer and nnUnet..
Collecting hiddenlayer
  Cloning https://github.com/FabianIsensee/hiddenlayer.git (to revision more_plotted_details) to /tmp/pip-install-abe2v1gq/hiddenlayer_f53ffb7998ac4510b540fa43b75427f7
  Resolved https://github.com/FabianIsensee/hiddenlayer.git to commit 4b98f9e5cccebac67368f02b95f4700b522345b1
Using legacy 'setup.py install' for hiddenlayer, since package 'wheel' is not installed.
Installing collected packages: hiddenlayer
    Running setup.py install for hiddenlayer: started
    Running setup.py install for hiddenlayer: finished with status 'done'
Successfully installed hiddenlayer-0.2
Obtaining file:///home/smaijer/code/nnUNet
Collecting torch==1.12.0
  Using cached torch-1.12.0-cp310-cp310-manylinux1_x86_64.whl (776.3 MB)
Collecting tqdm
  Using cached tqdm-4.64.1-py2.py3-none-any.whl (78 kB)
Collecting dicom2nifti
  Using cached dicom2nifti-2.4.5-py3-none-any.whl (43 kB)
Collecting scikit-image>=0.14
  Using cached scikit_image-0.19.3-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (13.9 MB)
Collecting medpy
  Using cached MedPy-0.4.0.tar.gz (151 kB)
Collecting scipy
  Using cached scipy-1.9.3-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (33.7 MB)
Collecting batchgenerators>=0.23
  Using cached batchgenerators-0.24.tar.gz (61 kB)
Collecting numpy
  Using cached numpy-1.23.4-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (17.1 MB)
Collecting sklearn
  Using cached sklearn-0.0.tar.gz (1.1 kB)
Collecting SimpleITK
  Using cached SimpleITK-2.2.0-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (52.8 MB)
Collecting pandas
  Using cached pandas-1.5.1-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (12.1 MB)
Collecting requests
  Using cached requests-2.28.1-py3-none-any.whl (62 kB)
Collecting nibabel
  Using cached nibabel-4.0.2-py3-none-any.whl (3.3 MB)
Collecting tifffile
  Using cached tifffile-2022.10.10-py3-none-any.whl (210 kB)
Collecting matplotlib
  Using cached matplotlib-3.6.1-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (11.8 MB)
Collecting monai
  Using cached monai-1.0.1-202210241233-py3-none-any.whl (1.1 MB)
Collecting einops
  Using cached einops-0.5.0-py3-none-any.whl (36 kB)
Collecting ipython
  Using cached ipython-8.6.0-py3-none-any.whl (761 kB)
Collecting graphviz
  Using cached graphviz-0.20.1-py3-none-any.whl (47 kB)
Collecting typing-extensions
  Using cached typing_extensions-4.4.0-py3-none-any.whl (26 kB)
Collecting pillow>=7.1.2
  Using cached Pillow-9.3.0-cp310-cp310-manylinux_2_28_x86_64.whl (3.3 MB)
Collecting scikit-learn
  Using cached scikit_learn-1.1.3-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (30.5 MB)
Collecting future
  Using cached future-0.18.2.tar.gz (829 kB)
Collecting unittest2
  Using cached unittest2-1.1.0-py2.py3-none-any.whl (96 kB)
Collecting threadpoolctl
  Using cached threadpoolctl-3.1.0-py3-none-any.whl (14 kB)
Collecting networkx>=2.2
  Using cached networkx-2.8.8-py3-none-any.whl (2.0 MB)
Collecting packaging>=20.0
  Using cached packaging-21.3-py3-none-any.whl (40 kB)
Collecting PyWavelets>=1.1.1
  Using cached PyWavelets-1.4.1-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (6.8 MB)
Collecting imageio>=2.4.1
  Using cached imageio-2.22.3-py3-none-any.whl (3.4 MB)
Collecting pyparsing!=3.0.5,>=2.0.2
  Using cached pyparsing-3.0.9-py3-none-any.whl (98 kB)
Collecting pydicom>=2.2.0
  Using cached pydicom-2.3.0-py3-none-any.whl (2.0 MB)
Collecting python-gdcm
  Using cached python_gdcm-3.0.19-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (13.0 MB)
Collecting decorator
  Using cached decorator-5.1.1-py3-none-any.whl (9.1 kB)
Collecting pickleshare
  Using cached pickleshare-0.7.5-py2.py3-none-any.whl (6.9 kB)
Collecting jedi>=0.16
  Using cached jedi-0.18.1-py2.py3-none-any.whl (1.6 MB)
Collecting backcall
  Using cached backcall-0.2.0-py2.py3-none-any.whl (11 kB)
Collecting matplotlib-inline
  Using cached matplotlib_inline-0.1.6-py3-none-any.whl (9.4 kB)
Collecting pexpect>4.3
  Using cached pexpect-4.8.0-py2.py3-none-any.whl (59 kB)
Collecting traitlets>=5
  Using cached traitlets-5.5.0-py3-none-any.whl (107 kB)
Collecting pygments>=2.4.0
  Using cached Pygments-2.13.0-py3-none-any.whl (1.1 MB)
Collecting prompt-toolkit<3.1.0,>3.0.1
  Using cached prompt_toolkit-3.0.31-py3-none-any.whl (382 kB)
Collecting stack-data
  Using cached stack_data-0.6.0-py3-none-any.whl (24 kB)
Collecting parso<0.9.0,>=0.8.0
  Using cached parso-0.8.3-py2.py3-none-any.whl (100 kB)
Collecting ptyprocess>=0.5
  Using cached ptyprocess-0.7.0-py2.py3-none-any.whl (13 kB)
Collecting wcwidth
  Using cached wcwidth-0.2.5-py2.py3-none-any.whl (30 kB)
Collecting kiwisolver>=1.0.1
  Using cached kiwisolver-1.4.4-cp310-cp310-manylinux_2_12_x86_64.manylinux2010_x86_64.whl (1.6 MB)
Collecting fonttools>=4.22.0
  Using cached fonttools-4.38.0-py3-none-any.whl (965 kB)
Collecting cycler>=0.10
  Using cached cycler-0.11.0-py3-none-any.whl (6.4 kB)
Collecting contourpy>=1.0.1
  Using cached contourpy-1.0.6-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (296 kB)
Collecting python-dateutil>=2.7
  Using cached python_dateutil-2.8.2-py2.py3-none-any.whl (247 kB)
Collecting six>=1.5
  Using cached six-1.16.0-py2.py3-none-any.whl (11 kB)
Collecting setuptools
  Using cached setuptools-65.5.0-py3-none-any.whl (1.2 MB)
Collecting pytz>=2020.1
  Using cached pytz-2022.6-py2.py3-none-any.whl (498 kB)
Collecting certifi>=2017.4.17
  Using cached certifi-2022.9.24-py3-none-any.whl (161 kB)
Collecting urllib3<1.27,>=1.21.1
  Using cached urllib3-1.26.12-py2.py3-none-any.whl (140 kB)
Collecting idna<4,>=2.5
  Using cached idna-3.4-py3-none-any.whl (61 kB)
Collecting charset-normalizer<3,>=2
  Using cached charset_normalizer-2.1.1-py3-none-any.whl (39 kB)
Collecting joblib>=1.0.0
  Using cached joblib-1.2.0-py3-none-any.whl (297 kB)
Collecting executing>=1.2.0
  Using cached executing-1.2.0-py2.py3-none-any.whl (24 kB)
Collecting pure-eval
  Using cached pure_eval-0.2.2-py3-none-any.whl (11 kB)
Collecting asttokens>=2.1.0
  Using cached asttokens-2.1.0-py2.py3-none-any.whl (26 kB)
Collecting argparse
  Using cached argparse-1.4.0-py2.py3-none-any.whl (23 kB)
Collecting traceback2
  Using cached traceback2-1.4.0-py2.py3-none-any.whl (16 kB)
Collecting linecache2
  Using cached linecache2-1.0.0-py2.py3-none-any.whl (12 kB)
Using legacy 'setup.py install' for batchgenerators, since package 'wheel' is not installed.
Using legacy 'setup.py install' for future, since package 'wheel' is not installed.
Using legacy 'setup.py install' for medpy, since package 'wheel' is not installed.
Using legacy 'setup.py install' for sklearn, since package 'wheel' is not installed.
Installing collected packages: six, pyparsing, pillow, numpy, linecache2, wcwidth, typing-extensions, traitlets, traceback2, tifffile, threadpoolctl, setuptools, scipy, PyWavelets, pure-eval, ptyprocess, parso, packaging, networkx, joblib, imageio, executing, asttokens, argparse, urllib3, unittest2, torch, stack-data, SimpleITK, scikit-learn, scikit-image, pytz, python-gdcm, python-dateutil, pygments, pydicom, prompt-toolkit, pickleshare, pexpect, nibabel, matplotlib-inline, kiwisolver, jedi, idna, future, fonttools, decorator, cycler, contourpy, charset-normalizer, certifi, backcall, tqdm, sklearn, requests, pandas, monai, medpy, matplotlib, ipython, graphviz, einops, dicom2nifti, batchgenerators, nnunet
    Running setup.py install for future: started
    Running setup.py install for future: finished with status 'done'
    Running setup.py install for sklearn: started
    Running setup.py install for sklearn: finished with status 'done'
    Running setup.py install for medpy: started
    Running setup.py install for medpy: finished with status 'done'
    Running setup.py install for batchgenerators: started
    Running setup.py install for batchgenerators: finished with status 'done'
  Running setup.py develop for nnunet
Successfully installed PyWavelets-1.4.1 SimpleITK-2.2.0 argparse-1.4.0 asttokens-2.1.0 backcall-0.2.0 batchgenerators-0.24 certifi-2022.9.24 charset-normalizer-2.1.1 contourpy-1.0.6 cycler-0.11.0 decorator-5.1.1 dicom2nifti-2.4.5 einops-0.5.0 executing-1.2.0 fonttools-4.38.0 future-0.18.2 graphviz-0.20.1 idna-3.4 imageio-2.22.3 ipython-8.6.0 jedi-0.18.1 joblib-1.2.0 kiwisolver-1.4.4 linecache2-1.0.0 matplotlib-3.6.1 matplotlib-inline-0.1.6 medpy-0.4.0 monai-1.0.1 networkx-2.8.8 nibabel-4.0.2 nnunet numpy-1.23.4 packaging-21.3 pandas-1.5.1 parso-0.8.3 pexpect-4.8.0 pickleshare-0.7.5 pillow-9.3.0 prompt-toolkit-3.0.31 ptyprocess-0.7.0 pure-eval-0.2.2 pydicom-2.3.0 pygments-2.13.0 pyparsing-3.0.9 python-dateutil-2.8.2 python-gdcm-3.0.19 pytz-2022.6 requests-2.28.1 scikit-image-0.19.3 scikit-learn-1.1.3 scipy-1.9.3 setuptools-65.5.0 six-1.16.0 sklearn-0.0 stack-data-0.6.0 threadpoolctl-3.1.0 tifffile-2022.10.10 torch-1.12.0 tqdm-4.64.1 traceback2-1.4.0 traitlets-5.5.0 typing-extensions-4.4.0 unittest2-1.1.0 urllib3-1.26.12 wcwidth-0.2.5


Please cite the following paper when using nnUNet:

Isensee, F., Jaeger, P.F., Kohl, S.A.A. et al. "nnU-Net: a self-configuring method for deep learning-based biomedical image segmentation." Nat Methods (2020). https://doi.org/10.1038/s41592-020-01008-z


If you have questions or suggestions, feel free to open an issue at https://github.com/MIC-DKFZ/nnUNet

using model stored in  /exports/lkeb-hpc/smaijer/results/nnUNet/3d_fullres/Task501/nnUNetTrainerV2__nnUNetPlansv2.1
This model expects 1 input modalities for each image
Found 8 unique case ids, here are some examples: ['panc_00000' 'panc_00006' 'panc_00005' 'panc_00003' 'panc_00007'
 'panc_00007' 'panc_00001' 'panc_00002']
If they don't look right, make sure to double check your filenames. They must end with _0000.nii.gz etc
number of cases: 8
number of cases that still need to be predicted: 8
emptying cuda cache
loading parameters for folds, [0, 1, 2, 3, 4]
Suus1 - Initialise de NetworkTrainer
Suus2 - Initialise de nnUNetTrainer
Suus3 - Initialise de nnUNetTrainerV2
Suus5 - zet de plans properties
Suus4 - Initialise de trainer echt
Suus5 - zet de plans properties
Suus6 - Zet de data augmentation params
Suus7 - zet deep supervision weights die de meerdere outputs prioriteit geven
Suus8 - Maak network aan (BELANGRIJK!)
SuusB - first stride 
Suus10 - StackedConvLayers, input: 1 en output: 32, first_stride: None, num_convs: 2, conv_kwargs: {'stride': 1, 'dilation': 1, 'bias': True, 'kernel_size': [3, 3, 3], 'padding': [1, 1, 1]}
SuusA - first_stride [2, 2, 2]
Suus10 - StackedConvLayers, input: 32 en output: 64, first_stride: [2, 2, 2], num_convs: 2, conv_kwargs: {'stride': 1, 'dilation': 1, 'bias': True, 'kernel_size': [3, 3, 3], 'padding': [1, 1, 1]}
SuusA - first_stride [2, 2, 2]
Suus10 - StackedConvLayers, input: 64 en output: 128, first_stride: [2, 2, 2], num_convs: 2, conv_kwargs: {'stride': 1, 'dilation': 1, 'bias': True, 'kernel_size': [3, 3, 3], 'padding': [1, 1, 1]}
SuusA - first_stride [2, 2, 2]
Suus10 - StackedConvLayers, input: 128 en output: 256, first_stride: [2, 2, 2], num_convs: 2, conv_kwargs: {'stride': 1, 'dilation': 1, 'bias': True, 'kernel_size': [3, 3, 3], 'padding': [1, 1, 1]}
SuusA - first_stride [2, 2, 2]
Suus10 - StackedConvLayers, input: 256 en output: 320, first_stride: [2, 2, 2], num_convs: 2, conv_kwargs: {'stride': 1, 'dilation': 1, 'bias': True, 'kernel_size': [3, 3, 3], 'padding': [1, 1, 1]}
Suus10 - StackedConvLayers, input: 320 en output: 320, first_stride: [1, 2, 2], num_convs: 1, conv_kwargs: {'stride': 1, 'dilation': 1, 'bias': True, 'kernel_size': [3, 3, 3], 'padding': [1, 1, 1]}
Suus10 - StackedConvLayers, input: 320 en output: 320, first_stride: None, num_convs: 1, conv_kwargs: {'stride': 1, 'dilation': 1, 'bias': True, 'kernel_size': [3, 3, 3], 'padding': [1, 1, 1]}
Suus10 - StackedConvLayers, input: 640 en output: 320, first_stride: None, num_convs: 1, conv_kwargs: {'stride': 1, 'dilation': 1, 'bias': True, 'kernel_size': [3, 3, 3], 'padding': [1, 1, 1]}
Suus10 - StackedConvLayers, input: 320 en output: 320, first_stride: None, num_convs: 1, conv_kwargs: {'stride': 1, 'dilation': 1, 'bias': True, 'kernel_size': [3, 3, 3], 'padding': [1, 1, 1]}
Suus10 - StackedConvLayers, input: 512 en output: 256, first_stride: None, num_convs: 1, conv_kwargs: {'stride': 1, 'dilation': 1, 'bias': True, 'kernel_size': [3, 3, 3], 'padding': [1, 1, 1]}
Suus10 - StackedConvLayers, input: 256 en output: 256, first_stride: None, num_convs: 1, conv_kwargs: {'stride': 1, 'dilation': 1, 'bias': True, 'kernel_size': [3, 3, 3], 'padding': [1, 1, 1]}
Suus10 - StackedConvLayers, input: 256 en output: 128, first_stride: None, num_convs: 1, conv_kwargs: {'stride': 1, 'dilation': 1, 'bias': True, 'kernel_size': [3, 3, 3], 'padding': [1, 1, 1]}
Suus10 - StackedConvLayers, input: 128 en output: 128, first_stride: None, num_convs: 1, conv_kwargs: {'stride': 1, 'dilation': 1, 'bias': True, 'kernel_size': [3, 3, 3], 'padding': [1, 1, 1]}
Suus10 - StackedConvLayers, input: 128 en output: 64, first_stride: None, num_convs: 1, conv_kwargs: {'stride': 1, 'dilation': 1, 'bias': True, 'kernel_size': [3, 3, 3], 'padding': [1, 1, 1]}
Suus10 - StackedConvLayers, input: 64 en output: 64, first_stride: None, num_convs: 1, conv_kwargs: {'stride': 1, 'dilation': 1, 'bias': True, 'kernel_size': [3, 3, 3], 'padding': [1, 1, 1]}
Suus10 - StackedConvLayers, input: 64 en output: 32, first_stride: None, num_convs: 1, conv_kwargs: {'stride': 1, 'dilation': 1, 'bias': True, 'kernel_size': [3, 3, 3], 'padding': [1, 1, 1]}
Suus10 - StackedConvLayers, input: 32 en output: 32, first_stride: None, num_convs: 1, conv_kwargs: {'stride': 1, 'dilation': 1, 'bias': True, 'kernel_size': [3, 3, 3], 'padding': [1, 1, 1]}
Generic_UNet(
  (encoder): Generic_UNETEncoder()
  (decoder): Generic_UNETDecoder()
  (conv_blocks_localization): ModuleList(
    (0): Sequential(
      (0): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(640, 320, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
      (1): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(320, 320, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
    )
    (1): Sequential(
      (0): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(512, 256, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
      (1): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(256, 256, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
    )
    (2): Sequential(
      (0): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(256, 128, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
      (1): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(128, 128, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
    )
    (3): Sequential(
      (0): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(128, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
      (1): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
    )
    (4): Sequential(
      (0): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(64, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
      (1): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(32, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
    )
  )
  (conv_blocks_context): ModuleList(
    (0): StackedConvLayers(
      (blocks): Sequential(
        (0): ConvDropoutNormNonlin(
          (conv): Conv3d(1, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (instnorm): InstanceNorm3d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
        )
        (1): ConvDropoutNormNonlin(
          (conv): Conv3d(32, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (instnorm): InstanceNorm3d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
        )
      )
    )
    (1): StackedConvLayers(
      (blocks): Sequential(
        (0): ConvDropoutNormNonlin(
          (conv): Conv3d(32, 64, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1))
          (instnorm): InstanceNorm3d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
        )
        (1): ConvDropoutNormNonlin(
          (conv): Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (instnorm): InstanceNorm3d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
        )
      )
    )
    (2): StackedConvLayers(
      (blocks): Sequential(
        (0): ConvDropoutNormNonlin(
          (conv): Conv3d(64, 128, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1))
          (instnorm): InstanceNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
        )
        (1): ConvDropoutNormNonlin(
          (conv): Conv3d(128, 128, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (instnorm): InstanceNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
        )
      )
    )
    (3): StackedConvLayers(
      (blocks): Sequential(
        (0): ConvDropoutNormNonlin(
          (conv): Conv3d(128, 256, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1))
          (instnorm): InstanceNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
        )
        (1): ConvDropoutNormNonlin(
          (conv): Conv3d(256, 256, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (instnorm): InstanceNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
        )
      )
    )
    (4): StackedConvLayers(
      (blocks): Sequential(
        (0): ConvDropoutNormNonlin(
          (conv): Conv3d(256, 320, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1))
          (instnorm): InstanceNorm3d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
        )
        (1): ConvDropoutNormNonlin(
          (conv): Conv3d(320, 320, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (instnorm): InstanceNorm3d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
        )
      )
    )
    (5): Sequential(
      (0): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(320, 320, kernel_size=(3, 3, 3), stride=(1, 2, 2), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
      (1): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(320, 320, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
    )
  )
  (td): ModuleList()
  (tu): ModuleList(
    (0): ConvTranspose3d(320, 320, kernel_size=(1, 2, 2), stride=(1, 2, 2), bias=False)
    (1): ConvTranspose3d(320, 256, kernel_size=(2, 2, 2), stride=(2, 2, 2), bias=False)
    (2): ConvTranspose3d(256, 128, kernel_size=(2, 2, 2), stride=(2, 2, 2), bias=False)
    (3): ConvTranspose3d(128, 64, kernel_size=(2, 2, 2), stride=(2, 2, 2), bias=False)
    (4): ConvTranspose3d(64, 32, kernel_size=(2, 2, 2), stride=(2, 2, 2), bias=False)
  )
  (seg_outputs): ModuleList(
    (0): Conv3d(320, 2, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
    (1): Conv3d(256, 2, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
    (2): Conv3d(128, 2, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
    (3): Conv3d(64, 2, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
    (4): Conv3d(32, 2, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
  )
)
using the following model files:  ['/exports/lkeb-hpc/smaijer/results/nnUNet/3d_fullres/Task501/nnUNetTrainerV2__nnUNetPlansv2.1/fold_0/model_final_checkpoint.model', '/exports/lkeb-hpc/smaijer/results/nnUNet/3d_fullres/Task501/nnUNetTrainerV2__nnUNetPlansv2.1/fold_1/model_final_checkpoint.model', '/exports/lkeb-hpc/smaijer/results/nnUNet/3d_fullres/Task501/nnUNetTrainerV2__nnUNetPlansv2.1/fold_2/model_final_checkpoint.model', '/exports/lkeb-hpc/smaijer/results/nnUNet/3d_fullres/Task501/nnUNetTrainerV2__nnUNetPlansv2.1/fold_3/model_final_checkpoint.model', '/exports/lkeb-hpc/smaijer/results/nnUNet/3d_fullres/Task501/nnUNetTrainerV2__nnUNetPlansv2.1/fold_4/model_final_checkpoint.model']
starting preprocessing generator
[Timing] starting preprocessing generator took 1.8596649169921875e-05 seconds
starting prediction...
Preprocessing with 6 multithreads
preprocessing /exports/lkeb-hpc/smaijer/output/501/3d_fullres/nnUNetTrainerV2/610/imagesTr/panc_00005.nii.gz
using preprocessor GenericPreprocessor
[Timing] Loading took 0.17801141738891602 seconds
before crop: (1, 42, 320, 320) after crop: (1, 42, 292, 320) spacing: [3.         0.68493152 0.68493152] 

ff voor mezelf want snap data files niet, hier lengte van data files1
separate z, order in z is 0 order inplane is 3
separate z, order in z is 0 order inplane is 1
before: {'spacing': array([3.        , 0.68493152, 0.68493152]), 'spacing_transposed': array([3.        , 0.68493152, 0.68493152]), 'data.shape (data is transposed)': (1, 42, 292, 320)} 
after:  {'spacing': array([1.      , 0.859375, 0.859375]), 'data.shape (data is resampled)': (1, 126, 233, 255)} 

[Timing] Preprocessing specifics: loading&cropping took 0.44121813774108887, transposing took 2.1696090698242188e-05 and 3.5762786865234375e-06, resampling/normalizing took 2.451826572418213.
[Timing] preprocessing function took 2.905827760696411 seconds
(1, 126, 233, 255)
[Timing] total time for preprocessing this item is 2.950169801712036
[Timing] This worker has ended successfully, no errors to report. It took 119.9121344089508 seconds.
preprocessing /exports/lkeb-hpc/smaijer/output/501/3d_fullres/nnUNetTrainerV2/610/imagesTr/panc_00003.nii.gz
using preprocessor GenericPreprocessor
[Timing] Loading took 0.18688011169433594 seconds
before crop: (1, 40, 320, 320) after crop: (1, 40, 320, 320) spacing: [3.     0.6875 0.6875] 

ff voor mezelf want snap data files niet, hier lengte van data files1
separate z, order in z is 0 order inplane is 3
separate z, order in z is 0 order inplane is 1
before: {'spacing': array([3.    , 0.6875, 0.6875]), 'spacing_transposed': array([3.    , 0.6875, 0.6875]), 'data.shape (data is transposed)': (1, 40, 320, 320)} 
after:  {'spacing': array([1.      , 0.859375, 0.859375]), 'data.shape (data is resampled)': (1, 120, 256, 256)} 

[Timing] Preprocessing specifics: loading&cropping took 0.45519256591796875, transposing took 2.3365020751953125e-05 and 5.9604644775390625e-06, resampling/normalizing took 2.5176022052764893.
[Timing] preprocessing function took 2.9823522567749023 seconds
(1, 120, 256, 256)
[Timing] total time for preprocessing this item is 68.51294207572937
[Timing] This worker has ended successfully, no errors to report. It took 308.70863127708435 seconds.
preprocessing /exports/lkeb-hpc/smaijer/output/501/3d_fullres/nnUNetTrainerV2/610/imagesTr/panc_00002.nii.gz
using preprocessor GenericPreprocessor
[Timing] Loading took 0.17554783821105957 seconds
before crop: (1, 40, 320, 320) after crop: (1, 40, 320, 320) spacing: [3.     0.6875 0.6875] 

ff voor mezelf want snap data files niet, hier lengte van data files1
separate z, order in z is 0 order inplane is 3
separate z, order in z is 0 order inplane is 1
before: {'spacing': array([3.    , 0.6875, 0.6875]), 'spacing_transposed': array([3.    , 0.6875, 0.6875]), 'data.shape (data is transposed)': (1, 40, 320, 320)} 
after:  {'spacing': array([1.      , 0.859375, 0.859375]), 'data.shape (data is resampled)': (1, 120, 256, 256)} 

[Timing] Preprocessing specifics: loading&cropping took 0.4489784240722656, transposing took 2.7179718017578125e-05 and 6.4373016357421875e-06, resampling/normalizing took 2.5444693565368652.
[Timing] preprocessing function took 3.0030040740966797 seconds
(1, 120, 256, 256)
[Timing] total time for preprocessing this item is 94.27943444252014
[Timing] This worker has ended successfully, no errors to report. It took 346.1349334716797 seconds.
preprocessing /exports/lkeb-hpc/smaijer/output/501/3d_fullres/nnUNetTrainerV2/610/imagesTr/panc_00001.nii.gz
using preprocessor GenericPreprocessor
[Timing] Loading took 0.09519791603088379 seconds
before crop: (1, 40, 320, 320) after crop: (1, 40, 320, 320) spacing: [3.     0.6875 0.6875] 

ff voor mezelf want snap data files niet, hier lengte van data files1
separate z, order in z is 0 order inplane is 3
separate z, order in z is 0 order inplane is 1
before: {'spacing': array([3.    , 0.6875, 0.6875]), 'spacing_transposed': array([3.    , 0.6875, 0.6875]), 'data.shape (data is transposed)': (1, 40, 320, 320)} 
after:  {'spacing': array([1.      , 0.859375, 0.859375]), 'data.shape (data is resampled)': (1, 120, 256, 256)} 

[Timing] Preprocessing specifics: loading&cropping took 0.3441507816314697, transposing took 4.124641418457031e-05 and 6.4373016357421875e-06, resampling/normalizing took 2.5423572063446045.
[Timing] preprocessing function took 2.8948185443878174 seconds
(1, 120, 256, 256)
[Timing] total time for preprocessing this item is 2.8952620029449463
preprocessing /exports/lkeb-hpc/smaijer/output/501/3d_fullres/nnUNetTrainerV2/610/imagesTr/panc_00007.nii.gz
using preprocessor GenericPreprocessor
[Timing] Loading took 0.16865205764770508 seconds
before crop: (1, 42, 320, 320) after crop: (1, 42, 292, 320) spacing: [3.         0.68493152 0.68493152] 

ff voor mezelf want snap data files niet, hier lengte van data files1
separate z, order in z is 0 order inplane is 3
separate z, order in z is 0 order inplane is 1
before: {'spacing': array([3.        , 0.68493152, 0.68493152]), 'spacing_transposed': array([3.        , 0.68493152, 0.68493152]), 'data.shape (data is transposed)': (1, 42, 292, 320)} 
after:  {'spacing': array([1.      , 0.859375, 0.859375]), 'data.shape (data is resampled)': (1, 126, 233, 255)} 

[Timing] Preprocessing specifics: loading&cropping took 0.3838338851928711, transposing took 1.4066696166992188e-05 and 1.1920928955078125e-06, resampling/normalizing took 1.6505286693572998.
[Timing] preprocessing function took 2.0964808464050293 seconds
(1, 126, 233, 255)
[Timing] total time for preprocessing this item is 142.7150628566742
[Timing] This worker has ended successfully, no errors to report. It took 346.1935603618622 seconds.
preprocessing /exports/lkeb-hpc/smaijer/output/501/3d_fullres/nnUNetTrainerV2/610/imagesTr/panc_00004.nii.gz
using preprocessor GenericPreprocessor
[Timing] Loading took 0.15646576881408691 seconds
before crop: (1, 35, 512, 512) after crop: (1, 35, 438, 512) spacing: [4.4000001 0.78125   0.78125  ] 

ff voor mezelf want snap data files niet, hier lengte van data files1
separate z, order in z is 0 order inplane is 3
separate z, order in z is 0 order inplane is 1
before: {'spacing': array([4.4000001, 0.78125  , 0.78125  ]), 'spacing_transposed': array([4.4000001, 0.78125  , 0.78125  ]), 'data.shape (data is transposed)': (1, 35, 438, 512)} 
after:  {'spacing': array([1.      , 0.859375, 0.859375]), 'data.shape (data is resampled)': (1, 154, 398, 465)} 

[Timing] Preprocessing specifics: loading&cropping took 0.7127010822296143, transposing took 4.0531158447265625e-05 and 5.9604644775390625e-06, resampling/normalizing took 6.860662937164307.
[Timing] preprocessing function took 7.6148457527160645 seconds
(1, 154, 398, 465)
[Timing] total time for preprocessing this item is 145.60725212097168
[Timing] This worker has ended successfully, no errors to report. It took 346.1420919895172 seconds.
force_separate_z: None interpolation order: 1
separate z: True lowres axis [0]
separate z, order in z is 0 order inplane is 1
suus we gaan schrijven naar /exports/lkeb-hpc/smaijer/output/501/3d_fullres/nnUNetTrainerV2/610/imagesTr/panc_00001.nii.gz
[Timing] - Resampling the segmentation to original shape took 1.3103461265563965 seconds
[Timing] - Saving the segmentation took 0.0406646728515625 seconds
force_separate_z: None interpolation order: 1
separate z: True lowres axis [0]
separate z, order in z is 0 order inplane is 1
suus we gaan schrijven naar /exports/lkeb-hpc/smaijer/output/501/3d_fullres/nnUNetTrainerV2/610/imagesTr/panc_00000.nii.gz
[Timing] - Resampling the segmentation to original shape took 1.2810401916503906 seconds
[Timing] - Saving the segmentation took 0.025045394897460938 seconds
force_separate_z: None interpolation order: 1
separate z: True lowres axis [0]
separate z, order in z is 0 order inplane is 1
suus we gaan schrijven naar /exports/lkeb-hpc/smaijer/output/501/3d_fullres/nnUNetTrainerV2/610/imagesTr/panc_00002.nii.gz
[Timing] - Resampling the segmentation to original shape took 1.2864913940429688 seconds
[Timing] - Saving the segmentation took 0.02462005615234375 seconds
force_separate_z: None interpolation order: 1
separate z: True lowres axis [0]
separate z, order in z is 0 order inplane is 1
suus we gaan schrijven naar /exports/lkeb-hpc/smaijer/output/501/3d_fullres/nnUNetTrainerV2/610/imagesTr/panc_00004.nii.gz
[Timing] - Resampling the segmentation to original shape took 3.586606502532959 seconds
[Timing] - Saving the segmentation took 0.0509028434753418 seconds
force_separate_z: None interpolation order: 1
separate z: True lowres axis [0]
separate z, order in z is 0 order inplane is 1
suus we gaan schrijven naar /exports/lkeb-hpc/smaijer/output/501/3d_fullres/nnUNetTrainerV2/610/imagesTr/panc_00005.nii.gz
[Timing] - Resampling the segmentation to original shape took 1.267371416091919 seconds
[Timing] - Saving the segmentation took 0.04013466835021973 seconds
force_separate_z: None interpolation order: 1
separate z: True lowres axis [0]
separate z, order in z is 0 order inplane is 1
suus we gaan schrijven naar /exports/lkeb-hpc/smaijer/output/501/3d_fullres/nnUNetTrainerV2/610/imagesTr/panc_00003.nii.gz
[Timing] - Resampling the segmentation to original shape took 1.2960841655731201 seconds
[Timing] - Saving the segmentation took 0.02421402931213379 seconds
force_separate_z: None interpolation order: 1
separate z: True lowres axis [0]
separate z, order in z is 0 order inplane is 1
suus we gaan schrijven naar /exports/lkeb-hpc/smaijer/output/501/3d_fullres/nnUNetTrainerV2/610/imagesTr/panc_00007.nii.gz
[Timing] - Resampling the segmentation to original shape took 1.223900318145752 seconds
[Timing] - Saving the segmentation took 0.026238679885864258 seconds
force_separate_z: None interpolation order: 1
separate z: True lowres axis [0]
separate z, order in z is 0 order inplane is 1
suus we gaan schrijven naar /exports/lkeb-hpc/smaijer/output/501/3d_fullres/nnUNetTrainerV2/610/imagesTr/panc_00006.nii.gz
[Timing] - Resampling the segmentation to original shape took 1.2384872436523438 seconds
[Timing] - Saving the segmentation took 0.02534008026123047 seconds
predicting /exports/lkeb-hpc/smaijer/output/501/3d_fullres/nnUNetTrainerV2/610/imagesTr/panc_00001.nii.gz
[Timing] loading took 0.04968976974487305 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 120, 256, 256)
patch size: [ 80 192 160]
steps (x, y, and z): [[0, 40], [0, 64], [0, 48, 96]]
number of tiles: 12
computing Gaussian
done
prediction done
[Timing] fold 0 prediction took 7.97406268119812 seconds
[Timing] loading another fold took 0.03209662437438965 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 120, 256, 256)
patch size: [ 80 192 160]
steps (x, y, and z): [[0, 40], [0, 64], [0, 48, 96]]
number of tiles: 12
using precomputed Gaussian
prediction done
[Timing] another fold took 4.922539234161377 seconds
[Timing] loading another fold took 0.03231072425842285 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 120, 256, 256)
patch size: [ 80 192 160]
steps (x, y, and z): [[0, 40], [0, 64], [0, 48, 96]]
number of tiles: 12
using precomputed Gaussian
prediction done
[Timing] another fold took 4.978767395019531 seconds
[Timing] loading another fold took 0.03217315673828125 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 120, 256, 256)
patch size: [ 80 192 160]
steps (x, y, and z): [[0, 40], [0, 64], [0, 48, 96]]
number of tiles: 12
using precomputed Gaussian
prediction done
[Timing] another fold took 4.971817970275879 seconds
[Timing] loading another fold took 0.0314333438873291 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 120, 256, 256)
patch size: [ 80 192 160]
steps (x, y, and z): [[0, 40], [0, 64], [0, 48, 96]]
number of tiles: 12
using precomputed Gaussian
prediction done
[Timing] another fold took 4.983536005020142 seconds
[Timing] normalising with folds took 0.0054743289947509766 seconds
[Timing] transposing backwards took 4.267692565917969e-05 seconds
[Timing] full prediction took 31.076525926589966 seconds
predicting /exports/lkeb-hpc/smaijer/output/501/3d_fullres/nnUNetTrainerV2/610/imagesTr/panc_00005.nii.gz
[Timing] loading took 0.03204178810119629 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 126, 233, 255)
patch size: [ 80 192 160]
steps (x, y, and z): [[0, 23, 46], [0, 41], [0, 48, 95]]
number of tiles: 18
using precomputed Gaussian
prediction done
[Timing] fold 0 prediction took 7.419174432754517 seconds
[Timing] loading another fold took 0.030974864959716797 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 126, 233, 255)
patch size: [ 80 192 160]
steps (x, y, and z): [[0, 23, 46], [0, 41], [0, 48, 95]]
number of tiles: 18
using precomputed Gaussian
prediction done
[Timing] another fold took 7.3965911865234375 seconds
[Timing] loading another fold took 0.031330108642578125 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 126, 233, 255)
patch size: [ 80 192 160]
steps (x, y, and z): [[0, 23, 46], [0, 41], [0, 48, 95]]
number of tiles: 18
using precomputed Gaussian
prediction done
[Timing] another fold took 7.451207637786865 seconds
[Timing] loading another fold took 0.031078338623046875 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 126, 233, 255)
patch size: [ 80 192 160]
steps (x, y, and z): [[0, 23, 46], [0, 41], [0, 48, 95]]
number of tiles: 18
using precomputed Gaussian
prediction done
[Timing] another fold took 7.479518890380859 seconds
[Timing] loading another fold took 0.03103351593017578 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 126, 233, 255)
patch size: [ 80 192 160]
steps (x, y, and z): [[0, 23, 46], [0, 41], [0, 48, 95]]
number of tiles: 18
using precomputed Gaussian
prediction done
[Timing] another fold took 7.495447635650635 seconds
[Timing] normalising with folds took 0.0051653385162353516 seconds
[Timing] transposing backwards took 3.24249267578125e-05 seconds
[Timing] full prediction took 68.53605937957764 seconds
predicting /exports/lkeb-hpc/smaijer/output/501/3d_fullres/nnUNetTrainerV2/610/imagesTr/panc_00000.nii.gz
[Timing] loading took 0.03176689147949219 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 120, 254, 256)
patch size: [ 80 192 160]
steps (x, y, and z): [[0, 40], [0, 62], [0, 48, 96]]
number of tiles: 12
using precomputed Gaussian
prediction done
[Timing] fold 0 prediction took 5.132426738739014 seconds
[Timing] loading another fold took 0.031280517578125 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 120, 254, 256)
patch size: [ 80 192 160]
steps (x, y, and z): [[0, 40], [0, 62], [0, 48, 96]]
number of tiles: 12
using precomputed Gaussian
prediction done
[Timing] another fold took 5.106391429901123 seconds
[Timing] loading another fold took 0.031145572662353516 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 120, 254, 256)
patch size: [ 80 192 160]
steps (x, y, and z): [[0, 40], [0, 62], [0, 48, 96]]
number of tiles: 12
using precomputed Gaussian
prediction done
[Timing] another fold took 5.099437713623047 seconds
[Timing] loading another fold took 0.031009912490844727 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 120, 254, 256)
patch size: [ 80 192 160]
steps (x, y, and z): [[0, 40], [0, 62], [0, 48, 96]]
number of tiles: 12
using precomputed Gaussian
prediction done
[Timing] another fold took 5.098088026046753 seconds
[Timing] loading another fold took 0.03104567527770996 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 120, 254, 256)
patch size: [ 80 192 160]
steps (x, y, and z): [[0, 40], [0, 62], [0, 48, 96]]
number of tiles: 12
using precomputed Gaussian
prediction done
[Timing] another fold took 5.094588994979858 seconds
[Timing] normalising with folds took 0.005416393280029297 seconds
[Timing] transposing backwards took 3.0279159545898438e-05 seconds
[Timing] full prediction took 94.28431868553162 seconds
predicting /exports/lkeb-hpc/smaijer/output/501/3d_fullres/nnUNetTrainerV2/610/imagesTr/panc_00003.nii.gz
[Timing] loading took 0.03185081481933594 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 120, 256, 256)
patch size: [ 80 192 160]
steps (x, y, and z): [[0, 40], [0, 64], [0, 48, 96]]
number of tiles: 12
using precomputed Gaussian
prediction done
[Timing] fold 0 prediction took 5.104747295379639 seconds
[Timing] loading another fold took 0.0309906005859375 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 120, 256, 256)
patch size: [ 80 192 160]
steps (x, y, and z): [[0, 40], [0, 64], [0, 48, 96]]
number of tiles: 12
using precomputed Gaussian
prediction done
[Timing] another fold took 5.088545560836792 seconds
[Timing] loading another fold took 0.031207799911499023 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 120, 256, 256)
patch size: [ 80 192 160]
steps (x, y, and z): [[0, 40], [0, 64], [0, 48, 96]]
number of tiles: 12
using precomputed Gaussian
prediction done
[Timing] another fold took 5.111347675323486 seconds
[Timing] loading another fold took 0.031096220016479492 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 120, 256, 256)
patch size: [ 80 192 160]
steps (x, y, and z): [[0, 40], [0, 64], [0, 48, 96]]
number of tiles: 12
using precomputed Gaussian
prediction done
[Timing] another fold took 5.0762457847595215 seconds
[Timing] loading another fold took 0.03117990493774414 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 120, 256, 256)
patch size: [ 80 192 160]
steps (x, y, and z): [[0, 40], [0, 64], [0, 48, 96]]
number of tiles: 12
using precomputed Gaussian
prediction done
[Timing] another fold took 5.084475040435791 seconds
[Timing] normalising with folds took 0.005583047866821289 seconds
[Timing] transposing backwards took 3.218650817871094e-05 seconds
[Timing] full prediction took 119.96841788291931 seconds
predicting /exports/lkeb-hpc/smaijer/output/501/3d_fullres/nnUNetTrainerV2/610/imagesTr/panc_00002.nii.gz
[Timing] loading took 0.03283882141113281 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 120, 256, 256)
patch size: [ 80 192 160]
steps (x, y, and z): [[0, 40], [0, 64], [0, 48, 96]]
number of tiles: 12
using precomputed Gaussian
prediction done
[Timing] fold 0 prediction took 5.113819360733032 seconds
[Timing] loading another fold took 0.03216218948364258 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 120, 256, 256)
patch size: [ 80 192 160]
steps (x, y, and z): [[0, 40], [0, 64], [0, 48, 96]]
number of tiles: 12
using precomputed Gaussian
prediction done
[Timing] another fold took 5.080296516418457 seconds
[Timing] loading another fold took 0.03204202651977539 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 120, 256, 256)
patch size: [ 80 192 160]
steps (x, y, and z): [[0, 40], [0, 64], [0, 48, 96]]
number of tiles: 12
using precomputed Gaussian
prediction done
[Timing] another fold took 5.082115650177002 seconds
[Timing] loading another fold took 0.031923770904541016 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 120, 256, 256)
patch size: [ 80 192 160]
steps (x, y, and z): [[0, 40], [0, 64], [0, 48, 96]]
number of tiles: 12
using precomputed Gaussian
prediction done
[Timing] another fold took 5.081591367721558 seconds
[Timing] loading another fold took 0.03198671340942383 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 120, 256, 256)
patch size: [ 80 192 160]
steps (x, y, and z): [[0, 40], [0, 64], [0, 48, 96]]
number of tiles: 12
using precomputed Gaussian
prediction done
[Timing] another fold took 5.076730012893677 seconds
[Timing] normalising with folds took 0.005542278289794922 seconds
[Timing] transposing backwards took 3.0994415283203125e-05 seconds
[Timing] full prediction took 145.62840104103088 seconds
predicting /exports/lkeb-hpc/smaijer/output/501/3d_fullres/nnUNetTrainerV2/610/imagesTr/panc_00007.nii.gz
[Timing] loading took 0.03711819648742676 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 126, 233, 255)
patch size: [ 80 192 160]
steps (x, y, and z): [[0, 23, 46], [0, 41], [0, 48, 95]]
number of tiles: 18
using precomputed Gaussian
prediction done
[Timing] fold 0 prediction took 7.530402660369873 seconds
[Timing] loading another fold took 0.031106233596801758 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 126, 233, 255)
patch size: [ 80 192 160]
steps (x, y, and z): [[0, 23, 46], [0, 41], [0, 48, 95]]
number of tiles: 18
using precomputed Gaussian
prediction done
[Timing] another fold took 7.480072498321533 seconds
[Timing] loading another fold took 0.03097820281982422 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 126, 233, 255)
patch size: [ 80 192 160]
steps (x, y, and z): [[0, 23, 46], [0, 41], [0, 48, 95]]
number of tiles: 18
using precomputed Gaussian
prediction done
[Timing] another fold took 7.4783244132995605 seconds
[Timing] loading another fold took 0.030760765075683594 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 126, 233, 255)
patch size: [ 80 192 160]
steps (x, y, and z): [[0, 23, 46], [0, 41], [0, 48, 95]]
number of tiles: 18
using precomputed Gaussian
prediction done
[Timing] another fold took 7.468311309814453 seconds
[Timing] loading another fold took 0.031193256378173828 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 126, 233, 255)
patch size: [ 80 192 160]
steps (x, y, and z): [[0, 23, 46], [0, 41], [0, 48, 95]]
number of tiles: 18
using precomputed Gaussian
prediction done
[Timing] another fold took 7.4642698764801025 seconds
[Timing] normalising with folds took 0.005301475524902344 seconds
[Timing] transposing backwards took 3.3855438232421875e-05 seconds
[Timing] full prediction took 183.29123449325562 seconds
predicting /exports/lkeb-hpc/smaijer/output/501/3d_fullres/nnUNetTrainerV2/610/imagesTr/panc_00004.nii.gz
[Timing] loading took 0.03100752830505371 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 154, 398, 465)
patch size: [ 80 192 160]
steps (x, y, and z): [[0, 37, 74], [0, 69, 137, 206], [0, 76, 152, 229, 305]]
number of tiles: 60
using precomputed Gaussian
prediction done
[Timing] fold 0 prediction took 25.069106340408325 seconds
[Timing] loading another fold took 0.031328439712524414 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 154, 398, 465)
patch size: [ 80 192 160]
steps (x, y, and z): [[0, 37, 74], [0, 69, 137, 206], [0, 76, 152, 229, 305]]
number of tiles: 60
using precomputed Gaussian
prediction done
[Timing] another fold took 24.977721214294434 seconds
[Timing] loading another fold took 0.03101944923400879 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 154, 398, 465)
patch size: [ 80 192 160]
steps (x, y, and z): [[0, 37, 74], [0, 69, 137, 206], [0, 76, 152, 229, 305]]
number of tiles: 60
using precomputed Gaussian
prediction done
[Timing] another fold took 25.029557704925537 seconds
[Timing] loading another fold took 0.031119346618652344 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 154, 398, 465)
patch size: [ 80 192 160]
steps (x, y, and z): [[0, 37, 74], [0, 69, 137, 206], [0, 76, 152, 229, 305]]
number of tiles: 60
using precomputed Gaussian
prediction done
[Timing] another fold took 24.95859932899475 seconds
[Timing] loading another fold took 0.031065940856933594 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 154, 398, 465)
patch size: [ 80 192 160]
steps (x, y, and z): [[0, 37, 74], [0, 69, 137, 206], [0, 76, 152, 229, 305]]
number of tiles: 60
using precomputed Gaussian
prediction done
[Timing] another fold took 24.961822748184204 seconds
[Timing] normalising with folds took 0.02008223533630371 seconds
[Timing] transposing backwards took 3.457069396972656e-05 seconds
[Timing] full prediction took 308.6202850341797 seconds
predicting /exports/lkeb-hpc/smaijer/output/501/3d_fullres/nnUNetTrainerV2/610/imagesTr/panc_00006.nii.gz
[Timing] loading took 0.03196072578430176 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 126, 233, 248)
patch size: [ 80 192 160]
steps (x, y, and z): [[0, 23, 46], [0, 41], [0, 44, 88]]
number of tiles: 18
using precomputed Gaussian
prediction done
[Timing] fold 0 prediction took 7.535711765289307 seconds
[Timing] loading another fold took 0.032172203063964844 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 126, 233, 248)
patch size: [ 80 192 160]
steps (x, y, and z): [[0, 23, 46], [0, 41], [0, 44, 88]]
number of tiles: 18
using precomputed Gaussian
prediction done
[Timing] another fold took 7.424001216888428 seconds
[Timing] loading another fold took 0.03215479850769043 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 126, 233, 248)
patch size: [ 80 192 160]
steps (x, y, and z): [[0, 23, 46], [0, 41], [0, 44, 88]]
number of tiles: 18
using precomputed Gaussian
prediction done
[Timing] another fold took 7.428314685821533 seconds
[Timing] loading another fold took 0.03144264221191406 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 126, 233, 248)
patch size: [ 80 192 160]
steps (x, y, and z): [[0, 23, 46], [0, 41], [0, 44, 88]]
number of tiles: 18
using precomputed Gaussian
prediction done
[Timing] another fold took 7.424506664276123 seconds
[Timing] loading another fold took 0.031667232513427734 seconds
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (1, 126, 233, 248)
patch size: [ 80 192 160]
steps (x, y, and z): [[0, 23, 46], [0, 41], [0, 44, 88]]
number of tiles: 18
using precomputed Gaussian
prediction done
[Timing] another fold took 7.426198959350586 seconds
[Timing] normalising with folds took 0.005182027816772461 seconds
[Timing] transposing backwards took 3.3855438232421875e-05 seconds
[Timing] full prediction took 346.19093227386475 seconds
[Timing] Another preprocessing process done, it took 346.25772619247437 seconds
[Timing] Another preprocessing process done, it took 346.2577557563782 seconds
[Timing] Another preprocessing process done, it took 346.257771730423 seconds
[Timing] Another preprocessing process done, it took 346.2577872276306 seconds
[Timing] Another preprocessing process done, it took 346.25780034065247 seconds
[Timing] Another preprocessing process done, it took 346.25781536102295 seconds
inference done. Now waiting for the segmentation export to finish...
postprocessing...
[Timing] postprocessing took 1.8769559860229492 seconds


Please cite the following paper when using nnUNet:

Isensee, F., Jaeger, P.F., Kohl, S.A.A. et al. "nnU-Net: a self-configuring method for deep learning-based biomedical image segmentation." Nat Methods (2020). https://doi.org/10.1038/s41592-020-01008-z


If you have questions or suggestions, feel free to open an issue at https://github.com/MIC-DKFZ/nnUNet

Program finished with exit code 0 at: Wed Nov  2 10:16:43 CET 2022
