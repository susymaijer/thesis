Starting at Fri Jun 17 17:16:07 CEST 2022
Running on hosts: res-hpc-lkeb07
Running on 1 nodes.
Running 1 tasks.
CPUs on node: 8.
Account: div2-lkeb
Job ID: 10518563
Job name: PancreasTrain
Node running script: res-hpc-lkeb07
Submit host: res-hpc-lo02.researchlumc.nl
GPUS: 0 or 
Fri Jun 17 17:51:09 2022       
+-----------------------------------------------------------------------------+
| NVIDIA-SMI 470.82.01    Driver Version: 470.82.01    CUDA Version: 11.4     |
|-------------------------------+----------------------+----------------------+
| GPU  Name        Persistence-M| Bus-Id        Disp.A | Volatile Uncorr. ECC |
| Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. |
|                               |                      |               MIG M. |
|===============================+======================+======================|
|   0  Quadro RTX 6000     Off  | 00000000:AF:00.0 Off |                  Off |
| 32%   37C    P0    54W / 260W |      0MiB / 24220MiB |      0%      Default |
|                               |                      |                  N/A |
+-------------------------------+----------------------+----------------------+
                                                                               
+-----------------------------------------------------------------------------+
| Processes:                                                                  |
|  GPU   GI   CI        PID   Type   Process name                  GPU Memory |
|        ID   ID                                                   Usage      |
|=============================================================================|
|  No running processes found                                                 |
+-----------------------------------------------------------------------------+
Current working directory is /home/smaijer
Load all modules..
Done with loading all modules. Modules:
Activate conda env nnunet..
Verifying environment variables:
nnUNet_raw_data_base = /exports/lkeb-hpc/smaijer/data/nnUNet_raw_data_base
nnUNet_preprocessed = /exports/lkeb-hpc/smaijer/data/nnUNet_preprocessed
RESULTS_FOLDER = /exports/lkeb-hpc/smaijer/results
OUTPUT = /exports/lkeb-hpc/smaijer/output
Installing hidden layer..
Collecting hiddenlayer
  Cloning https://github.com/FabianIsensee/hiddenlayer.git (to revision more_plotted_details) to /tmp/pip-install-rdf2i9hy/hiddenlayer_42e343812b344bea81513f521223aa58
  Resolved https://github.com/FabianIsensee/hiddenlayer.git to commit 4b98f9e5cccebac67368f02b95f4700b522345b1
Installing nnU-net..
Obtaining file:///home/smaijer/nnUNet
Requirement already satisfied: torch>1.10.0 in /home/smaijer/.conda/envs/nn/lib/python3.9/site-packages (from nnunet==1.7.0) (1.11.0)
Requirement already satisfied: tqdm in /home/smaijer/.conda/envs/nn/lib/python3.9/site-packages (from nnunet==1.7.0) (4.64.0)
Requirement already satisfied: dicom2nifti in /home/smaijer/.conda/envs/nn/lib/python3.9/site-packages (from nnunet==1.7.0) (2.3.2)
Requirement already satisfied: scikit-image>=0.14 in /home/smaijer/.conda/envs/nn/lib/python3.9/site-packages (from nnunet==1.7.0) (0.19.2)
Requirement already satisfied: medpy in /home/smaijer/.conda/envs/nn/lib/python3.9/site-packages (from nnunet==1.7.0) (0.4.0)
Requirement already satisfied: scipy in /home/smaijer/.conda/envs/nn/lib/python3.9/site-packages (from nnunet==1.7.0) (1.8.0)
Requirement already satisfied: batchgenerators>=0.23 in /home/smaijer/.conda/envs/nn/lib/python3.9/site-packages (from nnunet==1.7.0) (0.23)
Requirement already satisfied: numpy in /home/smaijer/.conda/envs/nn/lib/python3.9/site-packages (from nnunet==1.7.0) (1.21.2)
Requirement already satisfied: sklearn in /home/smaijer/.conda/envs/nn/lib/python3.9/site-packages (from nnunet==1.7.0) (0.0)
Requirement already satisfied: SimpleITK in /home/smaijer/.conda/envs/nn/lib/python3.9/site-packages (from nnunet==1.7.0) (2.1.1)
Requirement already satisfied: pandas in /home/smaijer/.conda/envs/nn/lib/python3.9/site-packages (from nnunet==1.7.0) (1.4.2)
Requirement already satisfied: requests in /home/smaijer/.conda/envs/nn/lib/python3.9/site-packages (from nnunet==1.7.0) (2.27.1)
Requirement already satisfied: nibabel in /home/smaijer/.conda/envs/nn/lib/python3.9/site-packages (from nnunet==1.7.0) (3.2.2)
Requirement already satisfied: tifffile in /home/smaijer/.conda/envs/nn/lib/python3.9/site-packages (from nnunet==1.7.0) (2022.4.8)
Requirement already satisfied: matplotlib in /home/smaijer/.conda/envs/nn/lib/python3.9/site-packages (from nnunet==1.7.0) (3.5.1)
Requirement already satisfied: monai in /home/smaijer/.conda/envs/nn/lib/python3.9/site-packages (from nnunet==1.7.0) (0.9.0)
Requirement already satisfied: einops in /home/smaijer/.conda/envs/nn/lib/python3.9/site-packages (from nnunet==1.7.0) (0.4.1)
Requirement already satisfied: unittest2 in /home/smaijer/.conda/envs/nn/lib/python3.9/site-packages (from batchgenerators>=0.23->nnunet==1.7.0) (1.1.0)
Requirement already satisfied: pillow>=7.1.2 in /home/smaijer/.conda/envs/nn/lib/python3.9/site-packages (from batchgenerators>=0.23->nnunet==1.7.0) (9.0.1)
Requirement already satisfied: threadpoolctl in /home/smaijer/.conda/envs/nn/lib/python3.9/site-packages (from batchgenerators>=0.23->nnunet==1.7.0) (3.1.0)
Requirement already satisfied: scikit-learn in /home/smaijer/.conda/envs/nn/lib/python3.9/site-packages (from batchgenerators>=0.23->nnunet==1.7.0) (1.0.2)
Requirement already satisfied: future in /home/smaijer/.conda/envs/nn/lib/python3.9/site-packages (from batchgenerators>=0.23->nnunet==1.7.0) (0.18.2)
Requirement already satisfied: imageio>=2.4.1 in /home/smaijer/.conda/envs/nn/lib/python3.9/site-packages (from scikit-image>=0.14->nnunet==1.7.0) (2.16.2)
Requirement already satisfied: packaging>=20.0 in /home/smaijer/.conda/envs/nn/lib/python3.9/site-packages (from scikit-image>=0.14->nnunet==1.7.0) (21.3)
Requirement already satisfied: networkx>=2.2 in /home/smaijer/.conda/envs/nn/lib/python3.9/site-packages (from scikit-image>=0.14->nnunet==1.7.0) (2.8)
Requirement already satisfied: PyWavelets>=1.1.1 in /home/smaijer/.conda/envs/nn/lib/python3.9/site-packages (from scikit-image>=0.14->nnunet==1.7.0) (1.3.0)
Requirement already satisfied: pyparsing!=3.0.5,>=2.0.2 in /home/smaijer/.conda/envs/nn/lib/python3.9/site-packages (from packaging>=20.0->scikit-image>=0.14->nnunet==1.7.0) (3.0.8)
Requirement already satisfied: typing_extensions in /home/smaijer/.conda/envs/nn/lib/python3.9/site-packages (from torch>1.10.0->nnunet==1.7.0) (4.1.1)
Requirement already satisfied: pydicom>=1.3.0 in /home/smaijer/.conda/envs/nn/lib/python3.9/site-packages (from dicom2nifti->nnunet==1.7.0) (2.3.0)
Requirement already satisfied: fonttools>=4.22.0 in /home/smaijer/.conda/envs/nn/lib/python3.9/site-packages (from matplotlib->nnunet==1.7.0) (4.32.0)
Requirement already satisfied: cycler>=0.10 in /home/smaijer/.conda/envs/nn/lib/python3.9/site-packages (from matplotlib->nnunet==1.7.0) (0.11.0)
Requirement already satisfied: python-dateutil>=2.7 in /home/smaijer/.conda/envs/nn/lib/python3.9/site-packages (from matplotlib->nnunet==1.7.0) (2.8.2)
Requirement already satisfied: kiwisolver>=1.0.1 in /home/smaijer/.conda/envs/nn/lib/python3.9/site-packages (from matplotlib->nnunet==1.7.0) (1.4.2)
Requirement already satisfied: six>=1.5 in /home/smaijer/.conda/envs/nn/lib/python3.9/site-packages (from python-dateutil>=2.7->matplotlib->nnunet==1.7.0) (1.16.0)
Requirement already satisfied: setuptools in /home/smaijer/.conda/envs/nn/lib/python3.9/site-packages (from nibabel->nnunet==1.7.0) (58.0.4)
Requirement already satisfied: pytz>=2020.1 in /home/smaijer/.conda/envs/nn/lib/python3.9/site-packages (from pandas->nnunet==1.7.0) (2022.1)
Requirement already satisfied: charset-normalizer~=2.0.0 in /home/smaijer/.conda/envs/nn/lib/python3.9/site-packages (from requests->nnunet==1.7.0) (2.0.4)
Requirement already satisfied: certifi>=2017.4.17 in /home/smaijer/.conda/envs/nn/lib/python3.9/site-packages (from requests->nnunet==1.7.0) (2021.10.8)
Requirement already satisfied: urllib3<1.27,>=1.21.1 in /home/smaijer/.conda/envs/nn/lib/python3.9/site-packages (from requests->nnunet==1.7.0) (1.26.8)
Requirement already satisfied: idna<4,>=2.5 in /home/smaijer/.conda/envs/nn/lib/python3.9/site-packages (from requests->nnunet==1.7.0) (3.3)
Requirement already satisfied: joblib>=0.11 in /home/smaijer/.conda/envs/nn/lib/python3.9/site-packages (from scikit-learn->batchgenerators>=0.23->nnunet==1.7.0) (1.1.0)
Requirement already satisfied: traceback2 in /home/smaijer/.conda/envs/nn/lib/python3.9/site-packages (from unittest2->batchgenerators>=0.23->nnunet==1.7.0) (1.4.0)
Collecting argparse
  Using cached argparse-1.4.0-py2.py3-none-any.whl (23 kB)
Requirement already satisfied: linecache2 in /home/smaijer/.conda/envs/nn/lib/python3.9/site-packages (from traceback2->unittest2->batchgenerators>=0.23->nnunet==1.7.0) (1.0.0)
Installing collected packages: argparse, nnunet
  Attempting uninstall: nnunet
    Found existing installation: nnunet 1.7.0
    Uninstalling nnunet-1.7.0:
      Successfully uninstalled nnunet-1.7.0
  Running setup.py develop for nnunet
Successfully installed argparse-1.4.0 nnunet-1.7.0


Please cite the following paper when using nnUNet:

Isensee, F., Jaeger, P.F., Kohl, S.A.A. et al. "nnU-Net: a self-configuring method for deep learning-based biomedical image segmentation." Nat Methods (2020). https://doi.org/10.1038/s41592-020-01008-z


If you have questions or suggestions, feel free to open an issue at https://github.com/MIC-DKFZ/nnUNet

Suus0 - run_training. Args:
Namespace(network='3d_lowres', network_trainer='nnUNetTrainerV2', task='900', fold='0', validation_only=False, continue_training=True, p='nnUNetPlansv2.1', use_compressed_data=False, deterministic=False, npz=False, find_lr=False, valbest=False, fp32=False, val_folder='validation_raw', disable_saving=False, disable_postprocessing_on_folds=False, val_disable_overwrite=True, disable_next_stage_pred=False, pretrained_weights=None)
###############################################
I am running the following nnUNet: 3d_lowres
My trainer class is:  <class 'nnunet.training.network_training.nnUNetTrainerV2.nnUNetTrainerV2'>
For that I will be using the following configuration:
num_classes:  1
modalities:  {0: 'CT'}
use_mask_for_norm OrderedDict([(0, False)])
keep_only_largest_region None
min_region_size_per_class None
min_size_per_class None
normalization_schemes OrderedDict([(0, 'CT')])
stages...

stage:  0
{'batch_size': 2, 'num_pool_per_axis': [4, 5, 5], 'patch_size': array([ 80, 192, 160]), 'median_patient_size_in_voxels': array([120, 285, 285]), 'current_spacing': array([1.7987096 , 1.54576606, 1.54576606]), 'original_spacing': array([1.      , 0.859375, 0.859375]), 'do_dummy_2D_data_aug': False, 'pool_op_kernel_sizes': [[2, 2, 2], [2, 2, 2], [2, 2, 2], [2, 2, 2], [1, 2, 2]], 'conv_kernel_sizes': [[3, 3, 3], [3, 3, 3], [3, 3, 3], [3, 3, 3], [3, 3, 3], [3, 3, 3]]}

stage:  1
{'batch_size': 2, 'num_pool_per_axis': [4, 5, 5], 'patch_size': array([ 80, 192, 160]), 'median_patient_size_in_voxels': array([216, 512, 512]), 'current_spacing': array([1.      , 0.859375, 0.859375]), 'original_spacing': array([1.      , 0.859375, 0.859375]), 'do_dummy_2D_data_aug': False, 'pool_op_kernel_sizes': [[2, 2, 2], [2, 2, 2], [2, 2, 2], [2, 2, 2], [1, 2, 2]], 'conv_kernel_sizes': [[3, 3, 3], [3, 3, 3], [3, 3, 3], [3, 3, 3], [3, 3, 3], [3, 3, 3]]}

I am using stage 0 from these plans
I am using sample dice + CE loss

I am using data from this folder:  /exports/lkeb-hpc/smaijer/data/nnUNet_preprocessed/Task900/nnUNetData_plans_v2.1
###############################################
Suus1 - Initialise de NetworkTrainer
Suus2 - Initialise de nnUNetTrainer
Suus3 - Initialise de nnUNetTrainerV2
Suus4 - Initialise de trainer echt
Suus5 - zet de plans properties
Suus6 - Zet de data augmentation params
Suus7 - zet deep supervision weights die de meerdere outputs prioriteit geven
loading dataset
loading all case properties
2022-06-17 17:51:34.209486: Using splits from existing split file: /exports/lkeb-hpc/smaijer/data/nnUNet_preprocessed/Task900/splits_final.pkl
2022-06-17 17:51:34.219711: The split file contains 5 splits.
2022-06-17 17:51:34.222100: Desired fold for training: 0
2022-06-17 17:51:34.224750: This split has 54 training and 14 validation cases.
unpacking dataset
done
Suus8 - Maak network aan (BELANGRIJK!)
SuusB - first stride 
Suus10 - StackedConvLayers, input: 1 en output: 32, first_stride: None, num_convs: 2, conv_kwargs: {'stride': 1, 'dilation': 1, 'bias': True, 'kernel_size': [3, 3, 3], 'padding': [1, 1, 1]}
SuusA - first_stride [2, 2, 2]
Suus10 - StackedConvLayers, input: 32 en output: 64, first_stride: [2, 2, 2], num_convs: 2, conv_kwargs: {'stride': 1, 'dilation': 1, 'bias': True, 'kernel_size': [3, 3, 3], 'padding': [1, 1, 1]}
SuusA - first_stride [2, 2, 2]
Suus10 - StackedConvLayers, input: 64 en output: 128, first_stride: [2, 2, 2], num_convs: 2, conv_kwargs: {'stride': 1, 'dilation': 1, 'bias': True, 'kernel_size': [3, 3, 3], 'padding': [1, 1, 1]}
SuusA - first_stride [2, 2, 2]
Suus10 - StackedConvLayers, input: 128 en output: 256, first_stride: [2, 2, 2], num_convs: 2, conv_kwargs: {'stride': 1, 'dilation': 1, 'bias': True, 'kernel_size': [3, 3, 3], 'padding': [1, 1, 1]}
SuusA - first_stride [2, 2, 2]
Suus10 - StackedConvLayers, input: 256 en output: 320, first_stride: [2, 2, 2], num_convs: 2, conv_kwargs: {'stride': 1, 'dilation': 1, 'bias': True, 'kernel_size': [3, 3, 3], 'padding': [1, 1, 1]}
Suus10 - StackedConvLayers, input: 320 en output: 320, first_stride: [1, 2, 2], num_convs: 1, conv_kwargs: {'stride': 1, 'dilation': 1, 'bias': True, 'kernel_size': [3, 3, 3], 'padding': [1, 1, 1]}
Suus10 - StackedConvLayers, input: 320 en output: 320, first_stride: None, num_convs: 1, conv_kwargs: {'stride': 1, 'dilation': 1, 'bias': True, 'kernel_size': [3, 3, 3], 'padding': [1, 1, 1]}
Suus10 - StackedConvLayers, input: 640 en output: 320, first_stride: None, num_convs: 1, conv_kwargs: {'stride': 1, 'dilation': 1, 'bias': True, 'kernel_size': [3, 3, 3], 'padding': [1, 1, 1]}
Suus10 - StackedConvLayers, input: 320 en output: 320, first_stride: None, num_convs: 1, conv_kwargs: {'stride': 1, 'dilation': 1, 'bias': True, 'kernel_size': [3, 3, 3], 'padding': [1, 1, 1]}
Suus10 - StackedConvLayers, input: 512 en output: 256, first_stride: None, num_convs: 1, conv_kwargs: {'stride': 1, 'dilation': 1, 'bias': True, 'kernel_size': [3, 3, 3], 'padding': [1, 1, 1]}
Suus10 - StackedConvLayers, input: 256 en output: 256, first_stride: None, num_convs: 1, conv_kwargs: {'stride': 1, 'dilation': 1, 'bias': True, 'kernel_size': [3, 3, 3], 'padding': [1, 1, 1]}
Suus10 - StackedConvLayers, input: 256 en output: 128, first_stride: None, num_convs: 1, conv_kwargs: {'stride': 1, 'dilation': 1, 'bias': True, 'kernel_size': [3, 3, 3], 'padding': [1, 1, 1]}
Suus10 - StackedConvLayers, input: 128 en output: 128, first_stride: None, num_convs: 1, conv_kwargs: {'stride': 1, 'dilation': 1, 'bias': True, 'kernel_size': [3, 3, 3], 'padding': [1, 1, 1]}
Suus10 - StackedConvLayers, input: 128 en output: 64, first_stride: None, num_convs: 1, conv_kwargs: {'stride': 1, 'dilation': 1, 'bias': True, 'kernel_size': [3, 3, 3], 'padding': [1, 1, 1]}
Suus10 - StackedConvLayers, input: 64 en output: 64, first_stride: None, num_convs: 1, conv_kwargs: {'stride': 1, 'dilation': 1, 'bias': True, 'kernel_size': [3, 3, 3], 'padding': [1, 1, 1]}
Suus10 - StackedConvLayers, input: 64 en output: 32, first_stride: None, num_convs: 1, conv_kwargs: {'stride': 1, 'dilation': 1, 'bias': True, 'kernel_size': [3, 3, 3], 'padding': [1, 1, 1]}
Suus10 - StackedConvLayers, input: 32 en output: 32, first_stride: None, num_convs: 1, conv_kwargs: {'stride': 1, 'dilation': 1, 'bias': True, 'kernel_size': [3, 3, 3], 'padding': [1, 1, 1]}
Generic_UNet(
  (encoder): Generic_UNETEncoder()
  (decoder): Generic_UNETDecoder()
  (conv_blocks_localization): ModuleList(
    (0): Sequential(
      (0): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(640, 320, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
      (1): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(320, 320, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
    )
    (1): Sequential(
      (0): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(512, 256, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
      (1): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(256, 256, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
    )
    (2): Sequential(
      (0): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(256, 128, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
      (1): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(128, 128, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
    )
    (3): Sequential(
      (0): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(128, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
      (1): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
    )
    (4): Sequential(
      (0): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(64, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
      (1): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(32, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
    )
  )
  (conv_blocks_context): ModuleList(
    (0): StackedConvLayers(
      (blocks): Sequential(
        (0): ConvDropoutNormNonlin(
          (conv): Conv3d(1, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (instnorm): InstanceNorm3d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
        )
        (1): ConvDropoutNormNonlin(
          (conv): Conv3d(32, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (instnorm): InstanceNorm3d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
        )
      )
    )
    (1): StackedConvLayers(
      (blocks): Sequential(
        (0): ConvDropoutNormNonlin(
          (conv): Conv3d(32, 64, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1))
          (instnorm): InstanceNorm3d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
        )
        (1): ConvDropoutNormNonlin(
          (conv): Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (instnorm): InstanceNorm3d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
        )
      )
    )
    (2): StackedConvLayers(
      (blocks): Sequential(
        (0): ConvDropoutNormNonlin(
          (conv): Conv3d(64, 128, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1))
          (instnorm): InstanceNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
        )
        (1): ConvDropoutNormNonlin(
          (conv): Conv3d(128, 128, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (instnorm): InstanceNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
        )
      )
    )
    (3): StackedConvLayers(
      (blocks): Sequential(
        (0): ConvDropoutNormNonlin(
          (conv): Conv3d(128, 256, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1))
          (instnorm): InstanceNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
        )
        (1): ConvDropoutNormNonlin(
          (conv): Conv3d(256, 256, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (instnorm): InstanceNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
        )
      )
    )
    (4): StackedConvLayers(
      (blocks): Sequential(
        (0): ConvDropoutNormNonlin(
          (conv): Conv3d(256, 320, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1))
          (instnorm): InstanceNorm3d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
        )
        (1): ConvDropoutNormNonlin(
          (conv): Conv3d(320, 320, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (instnorm): InstanceNorm3d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
        )
      )
    )
    (5): Sequential(
      (0): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(320, 320, kernel_size=(3, 3, 3), stride=(1, 2, 2), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
      (1): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(320, 320, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
    )
  )
  (td): ModuleList()
  (tu): ModuleList(
    (0): ConvTranspose3d(320, 320, kernel_size=(1, 2, 2), stride=(1, 2, 2), bias=False)
    (1): ConvTranspose3d(320, 256, kernel_size=(2, 2, 2), stride=(2, 2, 2), bias=False)
    (2): ConvTranspose3d(256, 128, kernel_size=(2, 2, 2), stride=(2, 2, 2), bias=False)
    (3): ConvTranspose3d(128, 64, kernel_size=(2, 2, 2), stride=(2, 2, 2), bias=False)
    (4): ConvTranspose3d(64, 32, kernel_size=(2, 2, 2), stride=(2, 2, 2), bias=False)
  )
  (seg_outputs): ModuleList(
    (0): Conv3d(320, 2, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
    (1): Conv3d(256, 2, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
    (2): Conv3d(128, 2, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
    (3): Conv3d(64, 2, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
    (4): Conv3d(32, 2, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
  )
)
SuusA - Load checkpoint (final, latest, best)
2022-06-17 17:51:37.497602: loading checkpoint /exports/lkeb-hpc/smaijer/results/nnUNet/3d_lowres/Task900/nnUNetTrainerV2__nnUNetPlansv2.1/fold_0/model_final_checkpoint.model train= True
SuusB run_training - zet learning rate als  
2022-06-17 17:51:43.352463: Suus1 maybe_update_lr lr: 0.0
SuusC - run_training!
using pin_memory on device 0
using pin_memory on device 0
2022-06-17 17:51:54.328971: Unable to plot network architecture:
2022-06-17 17:51:54.385468: No module named 'IPython'
2022-06-17 17:51:54.428088: 
printing the network instead:

2022-06-17 17:51:54.450614: Generic_UNet(
  (encoder): Generic_UNETEncoder()
  (decoder): Generic_UNETDecoder()
  (conv_blocks_localization): ModuleList(
    (0): Sequential(
      (0): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(640, 320, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
      (1): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(320, 320, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
    )
    (1): Sequential(
      (0): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(512, 256, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
      (1): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(256, 256, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
    )
    (2): Sequential(
      (0): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(256, 128, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
      (1): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(128, 128, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
    )
    (3): Sequential(
      (0): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(128, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
      (1): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
    )
    (4): Sequential(
      (0): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(64, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
      (1): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(32, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
    )
  )
  (conv_blocks_context): ModuleList(
    (0): StackedConvLayers(
      (blocks): Sequential(
        (0): ConvDropoutNormNonlin(
          (conv): Conv3d(1, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (instnorm): InstanceNorm3d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
        )
        (1): ConvDropoutNormNonlin(
          (conv): Conv3d(32, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (instnorm): InstanceNorm3d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
        )
      )
    )
    (1): StackedConvLayers(
      (blocks): Sequential(
        (0): ConvDropoutNormNonlin(
          (conv): Conv3d(32, 64, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1))
          (instnorm): InstanceNorm3d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
        )
        (1): ConvDropoutNormNonlin(
          (conv): Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (instnorm): InstanceNorm3d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
        )
      )
    )
    (2): StackedConvLayers(
      (blocks): Sequential(
        (0): ConvDropoutNormNonlin(
          (conv): Conv3d(64, 128, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1))
          (instnorm): InstanceNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
        )
        (1): ConvDropoutNormNonlin(
          (conv): Conv3d(128, 128, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (instnorm): InstanceNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
        )
      )
    )
    (3): StackedConvLayers(
      (blocks): Sequential(
        (0): ConvDropoutNormNonlin(
          (conv): Conv3d(128, 256, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1))
          (instnorm): InstanceNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
        )
        (1): ConvDropoutNormNonlin(
          (conv): Conv3d(256, 256, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (instnorm): InstanceNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
        )
      )
    )
    (4): StackedConvLayers(
      (blocks): Sequential(
        (0): ConvDropoutNormNonlin(
          (conv): Conv3d(256, 320, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1))
          (instnorm): InstanceNorm3d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
        )
        (1): ConvDropoutNormNonlin(
          (conv): Conv3d(320, 320, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (instnorm): InstanceNorm3d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
        )
      )
    )
    (5): Sequential(
      (0): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(320, 320, kernel_size=(3, 3, 3), stride=(1, 2, 2), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
      (1): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(320, 320, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
    )
  )
  (td): ModuleList()
  (tu): ModuleList(
    (0): ConvTranspose3d(320, 320, kernel_size=(1, 2, 2), stride=(1, 2, 2), bias=False)
    (1): ConvTranspose3d(320, 256, kernel_size=(2, 2, 2), stride=(2, 2, 2), bias=False)
    (2): ConvTranspose3d(256, 128, kernel_size=(2, 2, 2), stride=(2, 2, 2), bias=False)
    (3): ConvTranspose3d(128, 64, kernel_size=(2, 2, 2), stride=(2, 2, 2), bias=False)
    (4): ConvTranspose3d(64, 32, kernel_size=(2, 2, 2), stride=(2, 2, 2), bias=False)
  )
  (seg_outputs): ModuleList(
    (0): Conv3d(320, 2, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
    (1): Conv3d(256, 2, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
    (2): Conv3d(128, 2, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
    (3): Conv3d(64, 2, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
    (4): Conv3d(32, 2, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
  )
)
2022-06-17 17:51:54.485364: 

2022-06-17 17:51:54.632543: saving checkpoint...
2022-06-17 17:51:56.141505: done, saving took 1.63 seconds
panc_0006 (2, 124, 311, 311)
debug: mirroring True mirror_axes (0, 1, 2)
Suus 3d
step_size: 0.5
do mirror: True
data shape: (1, 124, 311, 311)
patch size: [ 80 192 160]
steps (x, y, and z): [[0, 22, 44], [0, 60, 119], [0, 76, 151]]
number of tiles: 27
computing Gaussian
done
<class 'torch.Tensor'>
torch.Size([1, 1, 80, 192, 160])
joe
tensor([[[[[  7.1484,   6.8906,   7.1250,  ...,   6.9727,   7.0352,
              7.3555],
           [  6.8164,   6.2930,   6.7109,  ...,   6.5977,   6.5938,
              7.1133],
           [  6.8945,   6.4141,   6.8633,  ...,   6.9023,   6.9492,
              7.3672],
           ...,
           [  6.8945,   6.4922,   6.9414,  ...,  10.9141,   7.3555,
              5.6172],
           [  6.8594,   6.5898,   6.9492,  ...,   7.6406,   5.6055,
              4.5547],
           [  7.2852,   6.9883,   7.1953,  ...,   5.5273,   4.5195,
              5.4531]],

          [[  6.6719,   6.0742,   6.2773,  ...,   6.1836,   6.2539,
              6.8555],
           [  6.0039,   5.2617,   6.5078,  ...,   8.8828,   8.3906,
              6.3594],
           [  6.0508,   5.5234,   6.0742,  ...,   9.1797,   9.8203,
              6.8867],
           ...,
           [  6.1406,   5.4961,   6.0820,  ...,  15.2031,  11.7422,
              8.3594],
           [  6.0781,   5.5312,   5.9570,  ...,  10.8438,   8.4297,
              5.9805],
           [  6.8086,   6.2891,   6.6250,  ...,   8.3047,   6.5508,
              6.0586]],

          [[  6.5508,   5.9180,   6.0742,  ...,   6.1719,   6.5977,
              7.0000],
           [  5.8086,   5.3477,   7.5586,  ...,  10.7266,  11.3438,
              6.4609],
           [  5.7617,   5.1250,   6.5352,  ...,  10.1641,  11.3125,
              6.8555],
           ...,
           [  5.8906,   5.4023,   6.2031,  ...,  18.5469,  14.5234,
             10.2266],
           [  5.8867,   5.3633,   5.9609,  ...,  12.8750,   9.9766,
              7.2891],
           [  6.6758,   6.1836,   6.3750,  ...,  10.6250,   7.3945,
              6.5898]],

          ...,

          [[  6.5664,   5.9258,   5.9961,  ...,   6.8711,   6.8438,
              7.0781],
           [  5.7461,   5.3125,   9.4062,  ...,  14.6094,  13.4297,
              6.7578],
           [  5.9297,   5.5508,   9.7812,  ...,  14.6328,  14.4922,
              6.9062],
           ...,
           [  6.0078,   5.3398,   6.1875,  ...,  14.0859,  10.4531,
              7.5859],
           [  5.9297,   5.4023,   5.7109,  ...,  10.5938,   8.3594,
              6.7188],
           [  6.5938,   5.9844,   6.0078,  ...,   9.4766,   7.9609,
              7.2656]],

          [[  6.6562,   5.9727,   6.1719,  ...,   5.9922,   6.2070,
              6.8164],
           [  5.8594,   5.2227,   7.1094,  ...,   9.2500,   8.4219,
              6.3633],
           [  6.0664,   5.3242,   7.0547,  ...,  10.4141,   9.5625,
              6.5195],
           ...,
           [  6.0820,   5.4258,   5.9297,  ...,  10.8281,   8.2422,
              5.9336],
           [  6.0586,   5.1445,   5.6016,  ...,   8.1875,   6.2812,
              4.7930],
           [  6.5703,   5.9414,   6.1562,  ...,   7.8867,   6.6484,
              6.5703]],

          [[  6.9414,   6.4961,   6.6289,  ...,   6.6055,   6.7656,
              7.3477],
           [  6.1758,   5.6172,   5.8945,  ...,   5.7734,   6.0508,
              6.7695],
           [  6.2461,   5.6484,   6.0469,  ...,   5.8594,   6.2656,
              7.0352],
           ...,
           [  6.3086,   5.7578,   6.1133,  ...,   7.3945,   4.9727,
              4.6016],
           [  6.2539,   5.7070,   5.8750,  ...,   4.6094,   4.0195,
              4.2773],
           [  6.7344,   6.3711,   6.5078,  ...,   4.7734,   4.7539,
              5.4297]]],


         [[[ -5.1523,  -4.9961,  -5.2031,  ...,  -5.1016,  -5.1289,
             -5.3477],
           [ -4.9375,  -4.6055,  -4.9727,  ...,  -4.9023,  -4.8945,
             -5.2109],
           [ -4.9844,  -4.6992,  -5.0742,  ...,  -5.2500,  -5.2188,
             -5.4102],
           ...,
           [ -4.9844,  -4.7422,  -5.1328,  ...,  -8.4141,  -5.6562,
             -3.6484],
           [ -4.9570,  -4.8242,  -5.1172,  ...,  -5.7656,  -4.0508,
             -2.8398],
           [ -5.2656,  -5.0781,  -5.2617,  ...,  -3.7871,  -2.9023,
             -3.6992]],

          [[ -4.8086,  -4.4336,  -4.6211,  ...,  -4.5859,  -4.6211,
             -4.9883],
           [ -4.3594,  -3.8809,  -5.0273,  ...,  -7.5234,  -6.8672,
             -4.7266],
           [ -4.3750,  -4.0586,  -4.5781,  ...,  -7.7383,  -8.2500,
             -5.1562],
           ...,
           [ -4.4219,  -4.0117,  -4.5625,  ..., -14.3594, -10.9141,
             -6.2500],
           [ -4.3711,  -4.0391,  -4.4531,  ..., -10.3047,  -7.7422,
             -4.1602],
           [ -4.9062,  -4.5859,  -4.8789,  ...,  -6.8203,  -5.0859,
             -4.2656]],

          [[ -4.7227,  -4.3477,  -4.5078,  ...,  -4.7539,  -4.9922,
             -5.1250],
           [ -4.2109,  -3.9980,  -6.3594,  ...,  -9.8672, -10.2500,
             -4.8672],
           [ -4.1445,  -3.8066,  -5.1914,  ...,  -8.8750, -10.1484,
             -5.1719],
           ...,
           [ -4.2148,  -3.9590,  -4.7109,  ..., -18.0312, -14.3125,
             -8.2422],
           [ -4.2383,  -3.9570,  -4.5234,  ..., -12.7969,  -9.8125,
             -5.6914],
           [ -4.8203,  -4.5195,  -4.7031,  ...,  -9.3594,  -6.1367,
             -4.7891]],

          ...,

          [[ -4.7617,  -4.3867,  -4.4805,  ...,  -5.3320,  -5.1875,
             -5.1914],
           [ -4.1992,  -4.0312,  -8.4375,  ..., -13.4844, -12.1562,
             -5.1523],
           [ -4.2969,  -4.2188,  -8.7266,  ..., -13.6250, -13.2734,
             -5.2695],
           ...,
           [ -4.3086,  -3.9219,  -4.7930,  ..., -13.8828, -10.2031,
             -5.8242],
           [ -4.2461,  -3.9551,  -4.3086,  ...,  -9.6562,  -7.0117,
             -4.5820],
           [ -4.7500,  -4.3594,  -4.4297,  ...,  -7.2969,  -5.7773,
             -5.0703]],

          [[ -4.7969,  -4.3633,  -4.5547,  ...,  -4.4648,  -4.5898,
             -4.9648],
           [ -4.2227,  -3.8594,  -5.6992,  ...,  -7.9844,  -6.9766,
             -4.7578],
           [ -4.3477,  -3.9023,  -5.5391,  ...,  -9.3672,  -8.2734,
             -4.8516],
           ...,
           [ -4.3086,  -3.8945,  -4.3594,  ..., -11.7578,  -8.7812,
             -4.6562],
           [ -4.3086,  -3.6973,  -4.1172,  ...,  -8.2109,  -5.7109,
             -3.1699],
           [ -4.7109,  -4.2969,  -4.5000,  ...,  -6.3711,  -4.9297,
             -4.6172]],

          [[ -5.0039,  -4.7148,  -4.8398,  ...,  -4.8438,  -4.9531,
             -5.3398],
           [ -4.4609,  -4.0977,  -4.3516,  ...,  -4.3125,  -4.4961,
             -4.9648],
           [ -4.4844,  -4.1055,  -4.4531,  ...,  -4.4023,  -4.6797,
             -5.1797],
           ...,
           [ -4.5000,  -4.1406,  -4.4453,  ...,  -7.4883,  -4.8281,
             -3.3359],
           [ -4.4688,  -4.1055,  -4.2734,  ...,  -4.4453,  -3.4121,
             -2.8574],
           [ -4.8438,  -4.6133,  -4.7383,  ...,  -3.5391,  -3.2520,
             -3.5059]]]]], device='cuda:0', dtype=torch.float16)
joe
tensor([[[[[  9.8984,  10.9844,  10.6797,  ...,  10.5000,   8.8125,
              5.8984],
           [ 13.4219,  14.5547,  14.2578,  ...,  14.3203,  11.9297,
              5.7578],
           [ 13.4375,  15.1172,  12.8594,  ...,  12.8516,  10.8203,
              5.6875],
           ...,
           [ 13.2578,  14.0547,  13.5938,  ...,  18.2031,  13.4219,
              8.9062],
           [ 11.9375,  12.9141,  12.1562,  ...,  13.3047,  11.1875,
              6.7891],
           [  7.8789,   6.6250,   6.8867,  ...,   8.2969,   7.6992,
              6.0273]],

          [[ 11.0234,  12.4688,  11.4375,  ...,  12.6719,  10.7188,
              5.8047],
           [ 15.0938,  19.2500,  17.7344,  ...,  19.9062,  17.3750,
              6.9961],
           [ 13.8672,  17.0469,  12.1016,  ...,  14.6562,  13.0000,
              6.4766],
           ...,
           [ 14.0391,  17.8906,  15.3594,  ...,  20.6719,  17.5625,
             11.6953],
           [ 12.0938,  18.1094,  15.0234,  ...,  17.6094,  13.3125,
              9.2656],
           [  6.9922,   8.3281,   7.8711,  ...,  10.4531,   7.8125,
              5.7031]],

          [[  9.8359,  10.1406,   9.0703,  ...,  10.1250,   8.8516,
              5.1602],
           [ 12.1562,  12.7578,  10.4297,  ...,  14.5078,  12.9141,
              6.4648],
           [ 10.6562,  10.8750,   7.1953,  ...,   9.9141,   9.2656,
              5.7266],
           ...,
           [ 11.5859,  11.7266,   8.9062,  ...,  24.0938,  21.5000,
             17.4531],
           [  9.4453,  12.9844,   9.7578,  ...,  16.8906,  15.3438,
             11.9609],
           [  6.4883,   6.3008,   6.5234,  ...,  10.7891,   8.9141,
              5.7305]],

          ...,

          [[  8.8203,   8.9141,   8.8281,  ...,  10.8906,   9.7109,
              5.5234],
           [ 11.0234,  14.0547,  11.7500,  ...,  17.6562,  14.8828,
              6.5195],
           [ 10.5547,  10.7109,   8.3047,  ...,  12.9844,  10.9688,
              5.9883],
           ...,
           [ 10.5156,  11.8594,  10.6797,  ...,  21.8750,  15.5234,
              8.1484],
           [  8.6797,  11.3438,   9.3125,  ...,  16.5312,  11.0234,
              5.7812],
           [  5.7969,   5.9648,   5.6133,  ...,   7.4766,   5.0859,
              4.1172]],

          [[  9.5781,  10.6562,  10.9375,  ...,  11.2812,   9.7891,
              5.4023],
           [ 13.0703,  16.7031,  15.4297,  ...,  19.8750,  16.7969,
              6.9141],
           [ 11.8438,  15.0781,  13.1016,  ...,  18.3281,  15.6797,
              6.8789],
           ...,
           [ 11.8594,  14.1094,  14.0625,  ...,  22.3906,  14.7109,
              7.7695],
           [  8.9453,  13.2422,  12.0938,  ...,  16.9375,  10.4766,
              5.6055],
           [  6.2852,   6.1094,   6.5430,  ...,   7.4531,   5.3477,
              4.5508]],

          [[  7.1758,   7.8008,   7.5312,  ...,   8.6953,   7.8047,
              6.0352],
           [  7.6445,  10.5938,  11.1328,  ...,  12.8984,  11.0938,
              7.1367],
           [  7.8750,   9.9609,   9.9844,  ...,  12.3828,  10.1641,
              6.7031],
           ...,
           [  7.5117,   9.9531,  10.7266,  ...,  17.1094,  12.6250,
              7.0625],
           [  7.0156,   8.6562,   8.7891,  ...,  12.8359,   8.6953,
              5.3398],
           [  6.1836,   6.0781,   6.0000,  ...,   6.8047,   5.0938,
              5.1602]]],


         [[[-10.0469, -11.1797, -10.8672,  ..., -10.8281,  -8.9375,
             -5.8086],
           [-14.2109, -15.2656, -14.8203,  ..., -14.9062, -12.4609,
             -5.8008],
           [-13.9453, -15.7656, -13.2969,  ..., -13.3750, -11.0000,
             -5.6055],
           ...,
           [-14.0781, -14.5938, -13.9844,  ..., -18.0156, -13.8672,
             -8.5469],
           [-12.3359, -13.4219, -12.4844,  ..., -12.0078, -10.2969,
             -6.6406],
           [ -8.0234,  -6.8633,  -6.9883,  ...,  -7.4492,  -6.9844,
             -5.6953]],

          [[-11.2188, -12.6484, -11.7891,  ..., -12.7578, -10.9375,
             -5.9258],
           [-14.8438, -19.0938, -17.9375,  ..., -19.9219, -17.6719,
             -7.0352],
           [-14.1250, -17.3125, -12.7188,  ..., -14.7500, -13.0312,
             -6.5312],
           ...,
           [-13.8984, -17.8125, -15.6172,  ..., -22.2031, -18.3438,
            -12.2109],
           [-12.3203, -17.6406, -14.8984,  ..., -16.9375, -13.3047,
             -9.6016],
           [ -7.0938,  -8.4844,  -8.0156,  ...,  -9.6172,  -7.2539,
             -5.3555]],

          [[ -9.7891, -10.1875,  -9.2344,  ..., -10.3203,  -8.9062,
             -5.2422],
           [-12.3125, -13.1797, -11.0781,  ..., -14.8594, -13.0703,
             -6.3438],
           [-10.8438, -11.4219,  -7.7773,  ..., -10.1172,  -9.2969,
             -5.6758],
           ...,
           [-11.6484, -12.0703,  -9.2031,  ..., -24.7969, -21.9062,
            -17.4531],
           [ -9.5625, -12.9062,  -9.8359,  ..., -16.7188, -14.8047,
            -11.9375],
           [ -6.5117,  -6.4883,  -6.6523,  ..., -10.0391,  -8.8359,
             -5.4531]],

          ...,

          [[ -8.9844,  -8.9297,  -9.2266,  ..., -10.9688,  -9.8906,
             -5.5586],
           [-11.0391, -14.1094, -12.0469,  ..., -17.5625, -15.2422,
             -6.4414],
           [-10.7188, -11.2656,  -8.7891,  ..., -13.0234, -10.9141,
             -5.7578],
           ...,
           [-10.6094, -11.9844, -10.7500,  ..., -21.0000, -15.4531,
             -8.3984],
           [ -9.0156, -11.2109,  -9.3438,  ..., -16.2656, -10.9688,
             -5.5508],
           [ -5.9375,  -6.0938,  -5.7969,  ...,  -7.1055,  -4.4883,
             -3.7480]],

          [[ -9.5312, -10.5234, -10.9141,  ..., -11.4531,  -9.8984,
             -5.4609],
           [-12.8828, -16.7969, -15.6953,  ..., -20.3125, -17.2500,
             -6.8047],
           [-11.6875, -15.1016, -13.4219,  ..., -18.6562, -15.8984,
             -6.6289],
           ...,
           [-11.7891, -14.2891, -14.2578,  ..., -21.2031, -13.9922,
             -7.7500],
           [ -8.9375, -13.1484, -12.1797,  ..., -16.1250,  -9.8984,
             -5.4375],
           [ -6.3203,  -6.3047,  -6.6289,  ...,  -6.8281,  -4.6523,
             -4.3125]],

          [[ -7.0586,  -7.5547,  -7.3906,  ...,  -8.4062,  -7.6680,
             -6.0430],
           [ -7.4727, -10.2344, -10.7500,  ..., -12.3359, -10.7266,
             -6.9805],
           [ -7.8125,  -9.8906,  -9.7500,  ..., -11.9297,  -9.8984,
             -6.6523],
           ...,
           [ -7.5117,  -9.8203, -10.4922,  ..., -15.1875, -11.2422,
             -6.6250],
           [ -7.0273,  -8.5078,  -8.5234,  ..., -11.9062,  -8.1562,
             -5.0664],
           [ -6.2188,  -6.1211,  -6.0430,  ...,  -6.5273,  -4.7969,
             -4.8125]]]]], device='cuda:0', dtype=torch.float16)
joe
Program finished with exit code 0 at: Fri Jun 17 17:16:07 CEST 2022
