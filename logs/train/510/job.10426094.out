Starting at Tue Jun  7 12:23:59 CEST 2022
Running on hosts: res-hpc-lkeb05
Running on 1 nodes.
Running 1 tasks.
CPUs on node: 8.
Account: div2-lkeb
Job ID: 10426094
Job name: PancreasTrain
Node running script: res-hpc-lkeb05
Submit host: res-hpc-lo02.researchlumc.nl
GPUS: 0 or 
Tue Jun  7 12:24:00 2022       
+-----------------------------------------------------------------------------+
| NVIDIA-SMI 495.29.05    Driver Version: 495.29.05    CUDA Version: 11.5     |
|-------------------------------+----------------------+----------------------+
| GPU  Name        Persistence-M| Bus-Id        Disp.A | Volatile Uncorr. ECC |
| Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. |
|                               |                      |               MIG M. |
|===============================+======================+======================|
|   0  Quadro RTX 6000     Off  | 00000000:3B:00.0 Off |                  Off |
| 33%   36C    P0    65W / 260W |      0MiB / 24220MiB |      0%      Default |
|                               |                      |                  N/A |
+-------------------------------+----------------------+----------------------+
                                                                               
+-----------------------------------------------------------------------------+
| Processes:                                                                  |
|  GPU   GI   CI        PID   Type   Process name                  GPU Memory |
|        ID   ID                                                   Usage      |
|=============================================================================|
|  No running processes found                                                 |
+-----------------------------------------------------------------------------+
Current working directory is /home/smaijer
Load all modules..
Done with loading all modules. Modules:
Activate conda env nnunet..
Verifying environment variables:
nnUNet_raw_data_base = /exports/lkeb-hpc/smaijer/data/nnUNet_raw_data_base
nnUNet_preprocessed = /exports/lkeb-hpc/smaijer/data/nnUNet_preprocessed
RESULTS_FOLDER = /exports/lkeb-hpc/smaijer/results
OUTPUT = /exports/lkeb-hpc/smaijer/output
Installing hidden layer..
Collecting hiddenlayer
  Cloning https://github.com/FabianIsensee/hiddenlayer.git (to revision more_plotted_details) to /tmp/pip-install-csemp2w4/hiddenlayer_368f6ff4603840cc9bb3bcff9ebe862c
  Resolved https://github.com/FabianIsensee/hiddenlayer.git to commit 4b98f9e5cccebac67368f02b95f4700b522345b1
Installing nnU-net..
Obtaining file:///home/smaijer/code/nnUNet
Requirement already satisfied: torch>1.10.0 in ./.conda/envs/nn/lib/python3.9/site-packages (from nnunet==1.7.0) (1.11.0)
Requirement already satisfied: tqdm in ./.conda/envs/nn/lib/python3.9/site-packages (from nnunet==1.7.0) (4.64.0)
Requirement already satisfied: dicom2nifti in ./.conda/envs/nn/lib/python3.9/site-packages (from nnunet==1.7.0) (2.3.2)
Requirement already satisfied: scikit-image>=0.14 in ./.conda/envs/nn/lib/python3.9/site-packages (from nnunet==1.7.0) (0.19.2)
Requirement already satisfied: medpy in ./.conda/envs/nn/lib/python3.9/site-packages (from nnunet==1.7.0) (0.4.0)
Requirement already satisfied: scipy in ./.conda/envs/nn/lib/python3.9/site-packages (from nnunet==1.7.0) (1.8.0)
Requirement already satisfied: batchgenerators>=0.23 in ./.conda/envs/nn/lib/python3.9/site-packages (from nnunet==1.7.0) (0.23)
Requirement already satisfied: numpy in ./.conda/envs/nn/lib/python3.9/site-packages (from nnunet==1.7.0) (1.21.2)
Requirement already satisfied: sklearn in ./.conda/envs/nn/lib/python3.9/site-packages (from nnunet==1.7.0) (0.0)
Requirement already satisfied: SimpleITK in ./.conda/envs/nn/lib/python3.9/site-packages (from nnunet==1.7.0) (2.1.1)
Requirement already satisfied: pandas in ./.conda/envs/nn/lib/python3.9/site-packages (from nnunet==1.7.0) (1.4.2)
Requirement already satisfied: requests in ./.conda/envs/nn/lib/python3.9/site-packages (from nnunet==1.7.0) (2.27.1)
Requirement already satisfied: nibabel in ./.conda/envs/nn/lib/python3.9/site-packages (from nnunet==1.7.0) (3.2.2)
Requirement already satisfied: tifffile in ./.conda/envs/nn/lib/python3.9/site-packages (from nnunet==1.7.0) (2022.4.8)
Requirement already satisfied: matplotlib in ./.conda/envs/nn/lib/python3.9/site-packages (from nnunet==1.7.0) (3.5.1)
Requirement already satisfied: unittest2 in ./.conda/envs/nn/lib/python3.9/site-packages (from batchgenerators>=0.23->nnunet==1.7.0) (1.1.0)
Requirement already satisfied: pillow>=7.1.2 in ./.conda/envs/nn/lib/python3.9/site-packages (from batchgenerators>=0.23->nnunet==1.7.0) (9.0.1)
Requirement already satisfied: scikit-learn in ./.conda/envs/nn/lib/python3.9/site-packages (from batchgenerators>=0.23->nnunet==1.7.0) (1.0.2)
Requirement already satisfied: threadpoolctl in ./.conda/envs/nn/lib/python3.9/site-packages (from batchgenerators>=0.23->nnunet==1.7.0) (3.1.0)
Requirement already satisfied: future in ./.conda/envs/nn/lib/python3.9/site-packages (from batchgenerators>=0.23->nnunet==1.7.0) (0.18.2)
Requirement already satisfied: networkx>=2.2 in ./.conda/envs/nn/lib/python3.9/site-packages (from scikit-image>=0.14->nnunet==1.7.0) (2.8)
Requirement already satisfied: imageio>=2.4.1 in ./.conda/envs/nn/lib/python3.9/site-packages (from scikit-image>=0.14->nnunet==1.7.0) (2.16.2)
Requirement already satisfied: packaging>=20.0 in ./.conda/envs/nn/lib/python3.9/site-packages (from scikit-image>=0.14->nnunet==1.7.0) (21.3)
Requirement already satisfied: PyWavelets>=1.1.1 in ./.conda/envs/nn/lib/python3.9/site-packages (from scikit-image>=0.14->nnunet==1.7.0) (1.3.0)
Requirement already satisfied: pyparsing!=3.0.5,>=2.0.2 in ./.conda/envs/nn/lib/python3.9/site-packages (from packaging>=20.0->scikit-image>=0.14->nnunet==1.7.0) (3.0.8)
Requirement already satisfied: typing_extensions in ./.conda/envs/nn/lib/python3.9/site-packages (from torch>1.10.0->nnunet==1.7.0) (4.1.1)
Requirement already satisfied: pydicom>=1.3.0 in ./.conda/envs/nn/lib/python3.9/site-packages (from dicom2nifti->nnunet==1.7.0) (2.3.0)
Requirement already satisfied: kiwisolver>=1.0.1 in ./.conda/envs/nn/lib/python3.9/site-packages (from matplotlib->nnunet==1.7.0) (1.4.2)
Requirement already satisfied: fonttools>=4.22.0 in ./.conda/envs/nn/lib/python3.9/site-packages (from matplotlib->nnunet==1.7.0) (4.32.0)
Requirement already satisfied: python-dateutil>=2.7 in ./.conda/envs/nn/lib/python3.9/site-packages (from matplotlib->nnunet==1.7.0) (2.8.2)
Requirement already satisfied: cycler>=0.10 in ./.conda/envs/nn/lib/python3.9/site-packages (from matplotlib->nnunet==1.7.0) (0.11.0)
Requirement already satisfied: six>=1.5 in ./.conda/envs/nn/lib/python3.9/site-packages (from python-dateutil>=2.7->matplotlib->nnunet==1.7.0) (1.16.0)
Requirement already satisfied: setuptools in ./.conda/envs/nn/lib/python3.9/site-packages (from nibabel->nnunet==1.7.0) (58.0.4)
Requirement already satisfied: pytz>=2020.1 in ./.conda/envs/nn/lib/python3.9/site-packages (from pandas->nnunet==1.7.0) (2022.1)
Requirement already satisfied: charset-normalizer~=2.0.0 in ./.conda/envs/nn/lib/python3.9/site-packages (from requests->nnunet==1.7.0) (2.0.4)
Requirement already satisfied: certifi>=2017.4.17 in ./.conda/envs/nn/lib/python3.9/site-packages (from requests->nnunet==1.7.0) (2021.10.8)
Requirement already satisfied: urllib3<1.27,>=1.21.1 in ./.conda/envs/nn/lib/python3.9/site-packages (from requests->nnunet==1.7.0) (1.26.8)
Requirement already satisfied: idna<4,>=2.5 in ./.conda/envs/nn/lib/python3.9/site-packages (from requests->nnunet==1.7.0) (3.3)
Requirement already satisfied: joblib>=0.11 in ./.conda/envs/nn/lib/python3.9/site-packages (from scikit-learn->batchgenerators>=0.23->nnunet==1.7.0) (1.1.0)
Requirement already satisfied: traceback2 in ./.conda/envs/nn/lib/python3.9/site-packages (from unittest2->batchgenerators>=0.23->nnunet==1.7.0) (1.4.0)
Collecting argparse
  Using cached argparse-1.4.0-py2.py3-none-any.whl (23 kB)
Requirement already satisfied: linecache2 in ./.conda/envs/nn/lib/python3.9/site-packages (from traceback2->unittest2->batchgenerators>=0.23->nnunet==1.7.0) (1.0.0)
Installing collected packages: argparse, nnunet
  Attempting uninstall: nnunet
    Found existing installation: nnunet 1.7.0
    Uninstalling nnunet-1.7.0:
      Successfully uninstalled nnunet-1.7.0
  Running setup.py develop for nnunet
Successfully installed argparse-1.4.0 nnunet-1.7.0


Please cite the following paper when using nnUNet:

Isensee, F., Jaeger, P.F., Kohl, S.A.A. et al. "nnU-Net: a self-configuring method for deep learning-based biomedical image segmentation." Nat Methods (2020). https://doi.org/10.1038/s41592-020-01008-z


If you have questions or suggestions, feel free to open an issue at https://github.com/MIC-DKFZ/nnUNet

###############################################
I am running the following nnUNet: 3d_cascade_fullres
My trainer class is:  <class 'nnunet.training.network_training.nnUNetTrainerV2_CascadeFullRes.nnUNetTrainerV2CascadeFullRes'>
For that I will be using the following configuration:
num_classes:  1
modalities:  {0: 'CT'}
use_mask_for_norm OrderedDict([(0, False)])
keep_only_largest_region None
min_region_size_per_class None
min_size_per_class None
normalization_schemes OrderedDict([(0, 'CT')])
stages...

stage:  0
{'batch_size': 2, 'num_pool_per_axis': [4, 5, 5], 'patch_size': array([ 64, 192, 192]), 'median_patient_size_in_voxels': array([ 93, 318, 318]), 'current_spacing': array([2.5757525 , 1.29418872, 1.29418872]), 'original_spacing': array([2.5       , 0.80273402, 0.80273402]), 'do_dummy_2D_data_aug': False, 'pool_op_kernel_sizes': [[2, 2, 2], [2, 2, 2], [2, 2, 2], [2, 2, 2], [1, 2, 2]], 'conv_kernel_sizes': [[3, 3, 3], [3, 3, 3], [3, 3, 3], [3, 3, 3], [3, 3, 3], [3, 3, 3]]}

stage:  1
{'batch_size': 2, 'num_pool_per_axis': [3, 5, 5], 'patch_size': array([ 40, 224, 224]), 'median_patient_size_in_voxels': array([ 96, 512, 512]), 'current_spacing': array([2.5       , 0.80273402, 0.80273402]), 'original_spacing': array([2.5       , 0.80273402, 0.80273402]), 'do_dummy_2D_data_aug': True, 'pool_op_kernel_sizes': [[1, 2, 2], [2, 2, 2], [2, 2, 2], [2, 2, 2], [1, 2, 2]], 'conv_kernel_sizes': [[1, 3, 3], [3, 3, 3], [3, 3, 3], [3, 3, 3], [3, 3, 3], [3, 3, 3]]}

I am using stage 1 from these plans
I am using batch dice + CE loss

I am using data from this folder:  /exports/lkeb-hpc/smaijer/data/nnUNet_preprocessed/Task510/nnUNetData_plans_v2.1
###############################################
2022-06-07 12:24:24.706282: Using dummy2d data augmentation
loading dataset
loading all case properties
2022-06-07 12:24:35.693281: Using splits from existing split file: /exports/lkeb-hpc/smaijer/data/nnUNet_preprocessed/Task510/splits_final.pkl
2022-06-07 12:24:35.709370: The split file contains 5 splits.
2022-06-07 12:24:35.711742: Desired fold for training: 4
2022-06-07 12:24:35.713803: This split has 192 training and 47 validation cases.
unpacking dataset
done
2022-06-07 12:24:39.687009: loading checkpoint /exports/lkeb-hpc/smaijer/results/nnUNet/3d_cascade_fullres/Task510/nnUNetTrainerV2CascadeFullRes__nnUNetPlansv2.1/fold_4/model_final_checkpoint.model train= True
2022-06-07 12:24:48.192048: lr: 0.0
using pin_memory on device 0
using pin_memory on device 0
2022-06-07 12:25:04.804433: Unable to plot network architecture:
2022-06-07 12:25:04.808051: No module named 'IPython'
2022-06-07 12:25:04.810694: 
printing the network instead:

2022-06-07 12:25:04.813400: Generic_UNet(
  (conv_blocks_localization): ModuleList(
    (0): Sequential(
      (0): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(640, 320, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
      (1): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(320, 320, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
    )
    (1): Sequential(
      (0): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(512, 256, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
      (1): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(256, 256, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
    )
    (2): Sequential(
      (0): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(256, 128, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
      (1): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(128, 128, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
    )
    (3): Sequential(
      (0): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(128, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
      (1): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
    )
    (4): Sequential(
      (0): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(64, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
      (1): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(32, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
    )
  )
  (conv_blocks_context): ModuleList(
    (0): StackedConvLayers(
      (blocks): Sequential(
        (0): ConvDropoutNormNonlin(
          (conv): Conv3d(2, 32, kernel_size=(1, 3, 3), stride=(1, 1, 1), padding=(0, 1, 1))
          (instnorm): InstanceNorm3d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
        )
        (1): ConvDropoutNormNonlin(
          (conv): Conv3d(32, 32, kernel_size=(1, 3, 3), stride=(1, 1, 1), padding=(0, 1, 1))
          (instnorm): InstanceNorm3d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
        )
      )
    )
    (1): StackedConvLayers(
      (blocks): Sequential(
        (0): ConvDropoutNormNonlin(
          (conv): Conv3d(32, 64, kernel_size=(3, 3, 3), stride=(1, 2, 2), padding=(1, 1, 1))
          (instnorm): InstanceNorm3d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
        )
        (1): ConvDropoutNormNonlin(
          (conv): Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (instnorm): InstanceNorm3d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
        )
      )
    )
    (2): StackedConvLayers(
      (blocks): Sequential(
        (0): ConvDropoutNormNonlin(
          (conv): Conv3d(64, 128, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1))
          (instnorm): InstanceNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
        )
        (1): ConvDropoutNormNonlin(
          (conv): Conv3d(128, 128, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (instnorm): InstanceNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
        )
      )
    )
    (3): StackedConvLayers(
      (blocks): Sequential(
        (0): ConvDropoutNormNonlin(
          (conv): Conv3d(128, 256, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1))
          (instnorm): InstanceNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
        )
        (1): ConvDropoutNormNonlin(
          (conv): Conv3d(256, 256, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (instnorm): InstanceNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
        )
      )
    )
    (4): StackedConvLayers(
      (blocks): Sequential(
        (0): ConvDropoutNormNonlin(
          (conv): Conv3d(256, 320, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1))
          (instnorm): InstanceNorm3d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
        )
        (1): ConvDropoutNormNonlin(
          (conv): Conv3d(320, 320, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (instnorm): InstanceNorm3d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
        )
      )
    )
    (5): Sequential(
      (0): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(320, 320, kernel_size=(3, 3, 3), stride=(1, 2, 2), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
      (1): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(320, 320, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
    )
  )
  (td): ModuleList()
  (tu): ModuleList(
    (0): ConvTranspose3d(320, 320, kernel_size=(1, 2, 2), stride=(1, 2, 2), bias=False)
    (1): ConvTranspose3d(320, 256, kernel_size=(2, 2, 2), stride=(2, 2, 2), bias=False)
    (2): ConvTranspose3d(256, 128, kernel_size=(2, 2, 2), stride=(2, 2, 2), bias=False)
    (3): ConvTranspose3d(128, 64, kernel_size=(2, 2, 2), stride=(2, 2, 2), bias=False)
    (4): ConvTranspose3d(64, 32, kernel_size=(1, 2, 2), stride=(1, 2, 2), bias=False)
  )
  (seg_outputs): ModuleList(
    (0): Conv3d(320, 2, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
    (1): Conv3d(256, 2, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
    (2): Conv3d(128, 2, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
    (3): Conv3d(64, 2, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
    (4): Conv3d(32, 2, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
  )
)
2022-06-07 12:25:04.819433: 

2022-06-07 12:25:04.896808: saving checkpoint...
2022-06-07 12:25:06.071399: done, saving took 1.25 seconds
panc_004 (2, 107, 473, 473)
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (2, 107, 473, 473)
patch size: [ 40 224 224]
steps (x, y, and z): [[0, 17, 34, 50, 67], [0, 83, 166, 249], [0, 83, 166, 249]]
number of tiles: 80
computing Gaussian
done
prediction done
panc_019 (2, 85, 561, 561)
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (2, 85, 561, 561)
patch size: [ 40 224 224]
steps (x, y, and z): [[0, 15, 30, 45], [0, 84, 168, 253, 337], [0, 84, 168, 253, 337]]
number of tiles: 100
using precomputed Gaussian
prediction done
panc_028 (2, 83, 508, 508)
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (2, 83, 508, 508)
patch size: [ 40 224 224]
steps (x, y, and z): [[0, 14, 29, 43], [0, 95, 189, 284], [0, 95, 189, 284]]
number of tiles: 64
using precomputed Gaussian
prediction done
panc_051 (2, 99, 523, 523)
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (2, 99, 523, 523)
patch size: [ 40 224 224]
steps (x, y, and z): [[0, 20, 39, 59], [0, 100, 199, 299], [0, 100, 199, 299]]
number of tiles: 64
using precomputed Gaussian
prediction done
panc_066 (2, 192, 519, 519)
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (2, 192, 519, 519)
patch size: [ 40 224 224]
steps (x, y, and z): [[0, 19, 38, 57, 76, 95, 114, 133, 152], [0, 98, 197, 295], [0, 98, 197, 295]]
number of tiles: 144
using precomputed Gaussian
prediction done
panc_069 (2, 194, 503, 503)
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (2, 194, 503, 503)
patch size: [ 40 224 224]
steps (x, y, and z): [[0, 19, 38, 58, 77, 96, 116, 135, 154], [0, 93, 186, 279], [0, 93, 186, 279]]
number of tiles: 144
using precomputed Gaussian
prediction done
panc_077 (2, 81, 573, 573)
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (2, 81, 573, 573)
patch size: [ 40 224 224]
steps (x, y, and z): [[0, 14, 27, 41], [0, 87, 174, 262, 349], [0, 87, 174, 262, 349]]
number of tiles: 100
using precomputed Gaussian
prediction done
panc_080 (2, 98, 514, 514)
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (2, 98, 514, 514)
patch size: [ 40 224 224]
steps (x, y, and z): [[0, 19, 39, 58], [0, 97, 193, 290], [0, 97, 193, 290]]
number of tiles: 64
using precomputed Gaussian
prediction done
panc_093 (2, 116, 594, 594)
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (2, 116, 594, 594)
patch size: [ 40 224 224]
steps (x, y, and z): [[0, 19, 38, 57, 76], [0, 92, 185, 278, 370], [0, 92, 185, 278, 370]]
number of tiles: 125
using precomputed Gaussian
prediction done
panc_122 (2, 97, 505, 505)
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (2, 97, 505, 505)
patch size: [ 40 224 224]
steps (x, y, and z): [[0, 19, 38, 57], [0, 94, 187, 281], [0, 94, 187, 281]]
number of tiles: 64
using precomputed Gaussian
prediction done
panc_129 (2, 88, 466, 466)
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (2, 88, 466, 466)
patch size: [ 40 224 224]
steps (x, y, and z): [[0, 16, 32, 48], [0, 81, 161, 242], [0, 81, 161, 242]]
number of tiles: 64
using precomputed Gaussian
prediction done
panc_159 (2, 90, 419, 419)
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (2, 90, 419, 419)
patch size: [ 40 224 224]
steps (x, y, and z): [[0, 17, 33, 50], [0, 98, 195], [0, 98, 195]]
number of tiles: 36
using precomputed Gaussian
prediction done
panc_165 (2, 85, 623, 623)
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (2, 85, 623, 623)
patch size: [ 40 224 224]
steps (x, y, and z): [[0, 15, 30, 45], [0, 100, 200, 299, 399], [0, 100, 200, 299, 399]]
number of tiles: 100
using precomputed Gaussian
prediction done
panc_170 (2, 103, 512, 512)
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (2, 103, 512, 512)
patch size: [ 40 224 224]
steps (x, y, and z): [[0, 16, 32, 47, 63], [0, 96, 192, 288], [0, 96, 192, 288]]
number of tiles: 80
using precomputed Gaussian
prediction done
panc_180 (2, 95, 473, 473)
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (2, 95, 473, 473)
patch size: [ 40 224 224]
steps (x, y, and z): [[0, 18, 37, 55], [0, 83, 166, 249], [0, 83, 166, 249]]
number of tiles: 64
using precomputed Gaussian
prediction done
panc_186 (2, 102, 452, 452)
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (2, 102, 452, 452)
patch size: [ 40 224 224]
steps (x, y, and z): [[0, 16, 31, 46, 62], [0, 76, 152, 228], [0, 76, 152, 228]]
number of tiles: 80
using precomputed Gaussian
prediction done
panc_197 (2, 73, 543, 543)
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (2, 73, 543, 543)
patch size: [ 40 224 224]
steps (x, y, and z): [[0, 16, 33], [0, 106, 213, 319], [0, 106, 213, 319]]
number of tiles: 48
using precomputed Gaussian
prediction done
panc_201 (2, 76, 411, 411)
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (2, 76, 411, 411)
patch size: [ 40 224 224]
steps (x, y, and z): [[0, 18, 36], [0, 94, 187], [0, 94, 187]]
number of tiles: 27
using precomputed Gaussian
prediction done
panc_209 (2, 104, 613, 613)
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (2, 104, 613, 613)
patch size: [ 40 224 224]
steps (x, y, and z): [[0, 16, 32, 48, 64], [0, 97, 194, 292, 389], [0, 97, 194, 292, 389]]
number of tiles: 125
using precomputed Gaussian
prediction done
panc_226 (2, 104, 528, 528)
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (2, 104, 528, 528)
patch size: [ 40 224 224]
steps (x, y, and z): [[0, 16, 32, 48, 64], [0, 101, 203, 304], [0, 101, 203, 304]]
number of tiles: 80
using precomputed Gaussian
prediction done
panc_228 (2, 113, 573, 573)
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (2, 113, 573, 573)
patch size: [ 40 224 224]
steps (x, y, and z): [[0, 18, 36, 55, 73], [0, 87, 174, 262, 349], [0, 87, 174, 262, 349]]
number of tiles: 125
using precomputed Gaussian
prediction done
panc_234 (2, 81, 573, 573)
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (2, 81, 573, 573)
patch size: [ 40 224 224]
steps (x, y, and z): [[0, 14, 27, 41], [0, 87, 174, 262, 349], [0, 87, 174, 262, 349]]
number of tiles: 100
using precomputed Gaussian
prediction done
panc_235 (2, 84, 496, 496)
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (2, 84, 496, 496)
patch size: [ 40 224 224]
steps (x, y, and z): [[0, 15, 29, 44], [0, 91, 181, 272], [0, 91, 181, 272]]
number of tiles: 64
using precomputed Gaussian
prediction done
panc_243 (2, 102, 486, 486)
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (2, 102, 486, 486)
patch size: [ 40 224 224]
steps (x, y, and z): [[0, 16, 31, 46, 62], [0, 87, 175, 262], [0, 87, 175, 262]]
number of tiles: 80
using precomputed Gaussian
prediction done
panc_246 (2, 107, 573, 573)
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (2, 107, 573, 573)
patch size: [ 40 224 224]
steps (x, y, and z): [[0, 17, 34, 50, 67], [0, 87, 174, 262, 349], [0, 87, 174, 262, 349]]
number of tiles: 125
using precomputed Gaussian
prediction done
panc_253 (2, 94, 491, 491)
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (2, 94, 491, 491)
patch size: [ 40 224 224]
steps (x, y, and z): [[0, 18, 36, 54], [0, 89, 178, 267], [0, 89, 178, 267]]
number of tiles: 64
using precomputed Gaussian
prediction done
panc_255 (2, 99, 523, 523)
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (2, 99, 523, 523)
patch size: [ 40 224 224]
steps (x, y, and z): [[0, 20, 39, 59], [0, 100, 199, 299], [0, 100, 199, 299]]
number of tiles: 64
using precomputed Gaussian
prediction done
panc_261 (2, 97, 446, 446)
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (2, 97, 446, 446)
patch size: [ 40 224 224]
steps (x, y, and z): [[0, 19, 38, 57], [0, 111, 222], [0, 111, 222]]
number of tiles: 36
using precomputed Gaussian
prediction done
panc_268 (2, 67, 470, 470)
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (2, 67, 470, 470)
patch size: [ 40 224 224]
steps (x, y, and z): [[0, 14, 27], [0, 82, 164, 246], [0, 82, 164, 246]]
number of tiles: 48
using precomputed Gaussian
prediction done
panc_275 (2, 105, 478, 478)
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (2, 105, 478, 478)
patch size: [ 40 224 224]
steps (x, y, and z): [[0, 16, 32, 49, 65], [0, 85, 169, 254], [0, 85, 169, 254]]
number of tiles: 80
using precomputed Gaussian
prediction done
panc_276 (2, 89, 546, 546)
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (2, 89, 546, 546)
patch size: [ 40 224 224]
steps (x, y, and z): [[0, 16, 33, 49], [0, 107, 215, 322], [0, 107, 215, 322]]
number of tiles: 64
using precomputed Gaussian
prediction done
panc_304 (2, 93, 461, 461)
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (2, 93, 461, 461)
patch size: [ 40 224 224]
steps (x, y, and z): [[0, 18, 35, 53], [0, 79, 158, 237], [0, 79, 158, 237]]
number of tiles: 64
using precomputed Gaussian
prediction done
panc_308 (2, 113, 614, 614)
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (2, 113, 614, 614)
patch size: [ 40 224 224]
steps (x, y, and z): [[0, 18, 36, 55, 73], [0, 98, 195, 292, 390], [0, 98, 195, 292, 390]]
number of tiles: 125
using precomputed Gaussian
prediction done
panc_311 (2, 87, 488, 488)
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (2, 87, 488, 488)
patch size: [ 40 224 224]
steps (x, y, and z): [[0, 16, 31, 47], [0, 88, 176, 264], [0, 88, 176, 264]]
number of tiles: 64
using precomputed Gaussian
prediction done
panc_333 (2, 97, 623, 623)
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (2, 97, 623, 623)
patch size: [ 40 224 224]
steps (x, y, and z): [[0, 19, 38, 57], [0, 100, 200, 299, 399], [0, 100, 200, 299, 399]]
number of tiles: 100
using precomputed Gaussian
prediction done
panc_336 (2, 92, 548, 548)
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (2, 92, 548, 548)
patch size: [ 40 224 224]
steps (x, y, and z): [[0, 17, 35, 52], [0, 108, 216, 324], [0, 108, 216, 324]]
number of tiles: 64
using precomputed Gaussian
prediction done
panc_345 (2, 84, 536, 536)
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (2, 84, 536, 536)
patch size: [ 40 224 224]
steps (x, y, and z): [[0, 15, 29, 44], [0, 104, 208, 312], [0, 104, 208, 312]]
number of tiles: 64
using precomputed Gaussian
prediction done
panc_365 (2, 188, 558, 558)
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (2, 188, 558, 558)
patch size: [ 40 224 224]
steps (x, y, and z): [[0, 18, 37, 56, 74, 92, 111, 130, 148], [0, 111, 223, 334], [0, 111, 223, 334]]
number of tiles: 144
using precomputed Gaussian
prediction done
panc_375 (2, 117, 573, 573)
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (2, 117, 573, 573)
patch size: [ 40 224 224]
steps (x, y, and z): [[0, 19, 38, 58, 77], [0, 87, 174, 262, 349], [0, 87, 174, 262, 349]]
number of tiles: 125
using precomputed Gaussian
prediction done
panc_377 (2, 110, 551, 551)
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (2, 110, 551, 551)
patch size: [ 40 224 224]
steps (x, y, and z): [[0, 18, 35, 52, 70], [0, 109, 218, 327], [0, 109, 218, 327]]
number of tiles: 80
using precomputed Gaussian
prediction done
panc_398 (2, 103, 593, 593)
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (2, 103, 593, 593)
patch size: [ 40 224 224]
steps (x, y, and z): [[0, 16, 32, 47, 63], [0, 92, 184, 277, 369], [0, 92, 184, 277, 369]]
number of tiles: 125
using precomputed Gaussian
prediction done
panc_400 (2, 107, 617, 617)
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (2, 107, 617, 617)
patch size: [ 40 224 224]
steps (x, y, and z): [[0, 17, 34, 50, 67], [0, 98, 196, 295, 393], [0, 98, 196, 295, 393]]
number of tiles: 125
using precomputed Gaussian
prediction done
panc_402 (2, 161, 463, 463)
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (2, 161, 463, 463)
patch size: [ 40 224 224]
steps (x, y, and z): [[0, 17, 35, 52, 69, 86, 104, 121], [0, 80, 159, 239], [0, 80, 159, 239]]
number of tiles: 128
using precomputed Gaussian
prediction done
panc_404 (2, 105, 561, 561)
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (2, 105, 561, 561)
patch size: [ 40 224 224]
steps (x, y, and z): [[0, 16, 32, 49, 65], [0, 84, 168, 253, 337], [0, 84, 168, 253, 337]]
number of tiles: 125
using precomputed Gaussian
prediction done
panc_406 (2, 86, 569, 569)
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (2, 86, 569, 569)
patch size: [ 40 224 224]
steps (x, y, and z): [[0, 15, 31, 46], [0, 86, 172, 259, 345], [0, 86, 172, 259, 345]]
number of tiles: 100
using precomputed Gaussian
prediction done
panc_418 (2, 88, 448, 448)
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (2, 88, 448, 448)
patch size: [ 40 224 224]
steps (x, y, and z): [[0, 16, 32, 48], [0, 112, 224], [0, 112, 224]]
number of tiles: 36
using precomputed Gaussian
prediction done
panc_419 (2, 88, 598, 598)
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (2, 88, 598, 598)
patch size: [ 40 224 224]
steps (x, y, and z): [[0, 16, 32, 48], [0, 94, 187, 280, 374], [0, 94, 187, 280, 374]]
number of tiles: 100
using precomputed Gaussian
prediction done
2022-06-07 12:56:55.766145: finished prediction
2022-06-07 12:56:55.769745: evaluation of raw predictions
2022-06-07 12:57:04.474482: determining postprocessing
Foreground vs background
before: 0.7985097376714061
after:  0.799546221553924
Removing all but the largest foreground region improved results!
for_which_classes [1]
min_valid_object_sizes None
Only one class present, no need to do each class separately as this is covered in fg vs bg
done
for which classes:
[[1]]
min_object_sizes
None
force_separate_z: None interpolation order: 1
separate z: True lowres axis [0]
separate z, order in z is 0 order inplane is 1
force_separate_z: None interpolation order: 1
separate z: True lowres axis [0]
separate z, order in z is 0 order inplane is 1
force_separate_z: None interpolation order: 1
separate z: True lowres axis [0]
separate z, order in z is 0 order inplane is 1
force_separate_z: None interpolation order: 1
separate z: True lowres axis [0]
separate z, order in z is 0 order inplane is 1
force_separate_z: None interpolation order: 1
separate z: True lowres axis [0]
separate z, order in z is 0 order inplane is 1
force_separate_z: None interpolation order: 1
separate z: True lowres axis [0]
separate z, order in z is 0 order inplane is 1
force_separate_z: None interpolation order: 1
separate z: True lowres axis [0]
separate z, order in z is 0 order inplane is 1
force_separate_z: None interpolation order: 1
separate z: True lowres axis [0]
separate z, order in z is 0 order inplane is 1
force_separate_z: None interpolation order: 1
separate z: True lowres axis [0]
separate z, order in z is 0 order inplane is 1
force_separate_z: None interpolation order: 1
separate z: True lowres axis [0]
separate z, order in z is 0 order inplane is 1
force_separate_z: None interpolation order: 1
separate z: True lowres axis [0]
separate z, order in z is 0 order inplane is 1
force_separate_z: None interpolation order: 1
separate z: True lowres axis [0]
separate z, order in z is 0 order inplane is 1
force_separate_z: None interpolation order: 1
separate z: True lowres axis [0]
separate z, order in z is 0 order inplane is 1
force_separate_z: None interpolation order: 1
separate z: True lowres axis [0]
separate z, order in z is 0 order inplane is 1
force_separate_z: None interpolation order: 1
separate z: True lowres axis [0]
separate z, order in z is 0 order inplane is 1
force_separate_z: None interpolation order: 1
separate z: True lowres axis [0]
separate z, order in z is 0 order inplane is 1
force_separate_z: None interpolation order: 1
separate z: True lowres axis [0]
separate z, order in z is 0 order inplane is 1
force_separate_z: None interpolation order: 1
separate z: True lowres axis [0]
separate z, order in z is 0 order inplane is 1
force_separate_z: None interpolation order: 1
separate z: True lowres axis [0]
separate z, order in z is 0 order inplane is 1
force_separate_z: None interpolation order: 1
separate z: True lowres axis [0]
separate z, order in z is 0 order inplane is 1
force_separate_z: None interpolation order: 1
separate z: True lowres axis [0]
separate z, order in z is 0 order inplane is 1
force_separate_z: None interpolation order: 1
separate z: True lowres axis [0]
separate z, order in z is 0 order inplane is 1
force_separate_z: None interpolation order: 1
separate z: True lowres axis [0]
separate z, order in z is 0 order inplane is 1
force_separate_z: None interpolation order: 1
separate z: True lowres axis [0]
separate z, order in z is 0 order inplane is 1
force_separate_z: None interpolation order: 1
separate z: True lowres axis [0]
separate z, order in z is 0 order inplane is 1
force_separate_z: None interpolation order: 1
separate z: True lowres axis [0]
separate z, order in z is 0 order inplane is 1
force_separate_z: None interpolation order: 1
separate z: True lowres axis [0]
separate z, order in z is 0 order inplane is 1
force_separate_z: None interpolation order: 1
separate z: True lowres axis [0]
separate z, order in z is 0 order inplane is 1
force_separate_z: None interpolation order: 1
separate z: True lowres axis [0]
separate z, order in z is 0 order inplane is 1
force_separate_z: None interpolation order: 1
separate z: True lowres axis [0]
separate z, order in z is 0 order inplane is 1
force_separate_z: None interpolation order: 1
separate z: True lowres axis [0]
separate z, order in z is 0 order inplane is 1
force_separate_z: None interpolation order: 1
separate z: True lowres axis [0]
separate z, order in z is 0 order inplane is 1
force_separate_z: None interpolation order: 1
separate z: True lowres axis [0]
separate z, order in z is 0 order inplane is 1
force_separate_z: None interpolation order: 1
separate z: True lowres axis [0]
separate z, order in z is 0 order inplane is 1
force_separate_z: None interpolation order: 1
separate z: True lowres axis [0]
separate z, order in z is 0 order inplane is 1
force_separate_z: None interpolation order: 1
separate z: True lowres axis [0]
separate z, order in z is 0 order inplane is 1
force_separate_z: None interpolation order: 1
no resampling necessary
force_separate_z: None interpolation order: 1
separate z: True lowres axis [0]
separate z, order in z is 0 order inplane is 1
force_separate_z: None interpolation order: 1
separate z: True lowres axis [0]
separate z, order in z is 0 order inplane is 1
force_separate_z: None interpolation order: 1
separate z: True lowres axis [0]
separate z, order in z is 0 order inplane is 1
force_separate_z: None interpolation order: 1
separate z: True lowres axis [0]
separate z, order in z is 0 order inplane is 1
force_separate_z: None interpolation order: 1
separate z: True lowres axis [0]
separate z, order in z is 0 order inplane is 1
force_separate_z: None interpolation order: 1
separate z: True lowres axis [0]
separate z, order in z is 0 order inplane is 1
force_separate_z: None interpolation order: 1
separate z: True lowres axis [0]
separate z, order in z is 0 order inplane is 1
force_separate_z: None interpolation order: 1
separate z: True lowres axis [0]
separate z, order in z is 0 order inplane is 1
force_separate_z: None interpolation order: 1
separate z: True lowres axis [0]
separate z, order in z is 0 order inplane is 1
force_separate_z: None interpolation order: 1
separate z: True lowres axis [0]
separate z, order in z is 0 order inplane is 1
done
Program finished with exit code 0 at: Tue Jun  7 12:23:59 CEST 2022
