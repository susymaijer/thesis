Starting at Fri Jun  3 11:12:50 CEST 2022
Running on hosts: res-hpc-lkeb06
Running on 1 nodes.
Running 1 tasks.
CPUs on node: 8.
Account: div2-lkeb
Job ID: 10410386
Job name: PancreasTrain
Node running script: res-hpc-lkeb06
Submit host: res-hpc-lo02.researchlumc.nl
GPUS: 0 or 
Fri Jun  3 11:12:52 2022       
+-----------------------------------------------------------------------------+
| NVIDIA-SMI 470.82.01    Driver Version: 470.82.01    CUDA Version: 11.4     |
|-------------------------------+----------------------+----------------------+
| GPU  Name        Persistence-M| Bus-Id        Disp.A | Volatile Uncorr. ECC |
| Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. |
|                               |                      |               MIG M. |
|===============================+======================+======================|
|   0  Quadro RTX 6000     Off  | 00000000:AF:00.0 Off |                  Off |
| 34%   32C    P0    66W / 260W |      0MiB / 24220MiB |      4%      Default |
|                               |                      |                  N/A |
+-------------------------------+----------------------+----------------------+
                                                                               
+-----------------------------------------------------------------------------+
| Processes:                                                                  |
|  GPU   GI   CI        PID   Type   Process name                  GPU Memory |
|        ID   ID                                                   Usage      |
|=============================================================================|
|  No running processes found                                                 |
+-----------------------------------------------------------------------------+
Current working directory is /home/smaijer
Load all modules..
Done with loading all modules. Modules:
Activate conda env nnunet..
Verifying environment variables:
nnUNet_raw_data_base = /exports/lkeb-hpc/smaijer/data/nnUNet_raw_data_base
nnUNet_preprocessed = /exports/lkeb-hpc/smaijer/data/nnUNet_preprocessed
RESULTS_FOLDER = /exports/lkeb-hpc/smaijer/results
OUTPUT = /exports/lkeb-hpc/smaijer/output
Installing hidden layer..
Collecting hiddenlayer
  Cloning https://github.com/FabianIsensee/hiddenlayer.git (to revision more_plotted_details) to /tmp/pip-install-b74hsjw0/hiddenlayer_5aa3d728e57149968cbd9f5a84f8c2b5
  Resolved https://github.com/FabianIsensee/hiddenlayer.git to commit 4b98f9e5cccebac67368f02b95f4700b522345b1
Installing nnU-net..
Obtaining file:///home/smaijer/code/nnUNet
Requirement already satisfied: torch>1.10.0 in ./.conda/envs/nn/lib/python3.9/site-packages (from nnunet==1.7.0) (1.11.0)
Requirement already satisfied: tqdm in ./.conda/envs/nn/lib/python3.9/site-packages (from nnunet==1.7.0) (4.64.0)
Requirement already satisfied: dicom2nifti in ./.conda/envs/nn/lib/python3.9/site-packages (from nnunet==1.7.0) (2.3.2)
Requirement already satisfied: scikit-image>=0.14 in ./.conda/envs/nn/lib/python3.9/site-packages (from nnunet==1.7.0) (0.19.2)
Requirement already satisfied: medpy in ./.conda/envs/nn/lib/python3.9/site-packages (from nnunet==1.7.0) (0.4.0)
Requirement already satisfied: scipy in ./.conda/envs/nn/lib/python3.9/site-packages (from nnunet==1.7.0) (1.8.0)
Requirement already satisfied: batchgenerators>=0.23 in ./.conda/envs/nn/lib/python3.9/site-packages (from nnunet==1.7.0) (0.23)
Requirement already satisfied: numpy in ./.conda/envs/nn/lib/python3.9/site-packages (from nnunet==1.7.0) (1.21.2)
Requirement already satisfied: sklearn in ./.conda/envs/nn/lib/python3.9/site-packages (from nnunet==1.7.0) (0.0)
Requirement already satisfied: SimpleITK in ./.conda/envs/nn/lib/python3.9/site-packages (from nnunet==1.7.0) (2.1.1)
Requirement already satisfied: pandas in ./.conda/envs/nn/lib/python3.9/site-packages (from nnunet==1.7.0) (1.4.2)
Requirement already satisfied: requests in ./.conda/envs/nn/lib/python3.9/site-packages (from nnunet==1.7.0) (2.27.1)
Requirement already satisfied: nibabel in ./.conda/envs/nn/lib/python3.9/site-packages (from nnunet==1.7.0) (3.2.2)
Requirement already satisfied: tifffile in ./.conda/envs/nn/lib/python3.9/site-packages (from nnunet==1.7.0) (2022.4.8)
Requirement already satisfied: matplotlib in ./.conda/envs/nn/lib/python3.9/site-packages (from nnunet==1.7.0) (3.5.1)
Requirement already satisfied: future in ./.conda/envs/nn/lib/python3.9/site-packages (from batchgenerators>=0.23->nnunet==1.7.0) (0.18.2)
Requirement already satisfied: scikit-learn in ./.conda/envs/nn/lib/python3.9/site-packages (from batchgenerators>=0.23->nnunet==1.7.0) (1.0.2)
Requirement already satisfied: pillow>=7.1.2 in ./.conda/envs/nn/lib/python3.9/site-packages (from batchgenerators>=0.23->nnunet==1.7.0) (9.0.1)
Requirement already satisfied: unittest2 in ./.conda/envs/nn/lib/python3.9/site-packages (from batchgenerators>=0.23->nnunet==1.7.0) (1.1.0)
Requirement already satisfied: threadpoolctl in ./.conda/envs/nn/lib/python3.9/site-packages (from batchgenerators>=0.23->nnunet==1.7.0) (3.1.0)
Requirement already satisfied: networkx>=2.2 in ./.conda/envs/nn/lib/python3.9/site-packages (from scikit-image>=0.14->nnunet==1.7.0) (2.8)
Requirement already satisfied: PyWavelets>=1.1.1 in ./.conda/envs/nn/lib/python3.9/site-packages (from scikit-image>=0.14->nnunet==1.7.0) (1.3.0)
Requirement already satisfied: packaging>=20.0 in ./.conda/envs/nn/lib/python3.9/site-packages (from scikit-image>=0.14->nnunet==1.7.0) (21.3)
Requirement already satisfied: imageio>=2.4.1 in ./.conda/envs/nn/lib/python3.9/site-packages (from scikit-image>=0.14->nnunet==1.7.0) (2.16.2)
Requirement already satisfied: pyparsing!=3.0.5,>=2.0.2 in ./.conda/envs/nn/lib/python3.9/site-packages (from packaging>=20.0->scikit-image>=0.14->nnunet==1.7.0) (3.0.8)
Requirement already satisfied: typing_extensions in ./.conda/envs/nn/lib/python3.9/site-packages (from torch>1.10.0->nnunet==1.7.0) (4.1.1)
Requirement already satisfied: pydicom>=1.3.0 in ./.conda/envs/nn/lib/python3.9/site-packages (from dicom2nifti->nnunet==1.7.0) (2.3.0)
Requirement already satisfied: cycler>=0.10 in ./.conda/envs/nn/lib/python3.9/site-packages (from matplotlib->nnunet==1.7.0) (0.11.0)
Requirement already satisfied: fonttools>=4.22.0 in ./.conda/envs/nn/lib/python3.9/site-packages (from matplotlib->nnunet==1.7.0) (4.32.0)
Requirement already satisfied: python-dateutil>=2.7 in ./.conda/envs/nn/lib/python3.9/site-packages (from matplotlib->nnunet==1.7.0) (2.8.2)
Requirement already satisfied: kiwisolver>=1.0.1 in ./.conda/envs/nn/lib/python3.9/site-packages (from matplotlib->nnunet==1.7.0) (1.4.2)
Requirement already satisfied: six>=1.5 in ./.conda/envs/nn/lib/python3.9/site-packages (from python-dateutil>=2.7->matplotlib->nnunet==1.7.0) (1.16.0)
Requirement already satisfied: setuptools in ./.conda/envs/nn/lib/python3.9/site-packages (from nibabel->nnunet==1.7.0) (58.0.4)
Requirement already satisfied: pytz>=2020.1 in ./.conda/envs/nn/lib/python3.9/site-packages (from pandas->nnunet==1.7.0) (2022.1)
Requirement already satisfied: certifi>=2017.4.17 in ./.conda/envs/nn/lib/python3.9/site-packages (from requests->nnunet==1.7.0) (2021.10.8)
Requirement already satisfied: charset-normalizer~=2.0.0 in ./.conda/envs/nn/lib/python3.9/site-packages (from requests->nnunet==1.7.0) (2.0.4)
Requirement already satisfied: idna<4,>=2.5 in ./.conda/envs/nn/lib/python3.9/site-packages (from requests->nnunet==1.7.0) (3.3)
Requirement already satisfied: urllib3<1.27,>=1.21.1 in ./.conda/envs/nn/lib/python3.9/site-packages (from requests->nnunet==1.7.0) (1.26.8)
Requirement already satisfied: joblib>=0.11 in ./.conda/envs/nn/lib/python3.9/site-packages (from scikit-learn->batchgenerators>=0.23->nnunet==1.7.0) (1.1.0)
Requirement already satisfied: traceback2 in ./.conda/envs/nn/lib/python3.9/site-packages (from unittest2->batchgenerators>=0.23->nnunet==1.7.0) (1.4.0)
Collecting argparse
  Using cached argparse-1.4.0-py2.py3-none-any.whl (23 kB)
Requirement already satisfied: linecache2 in ./.conda/envs/nn/lib/python3.9/site-packages (from traceback2->unittest2->batchgenerators>=0.23->nnunet==1.7.0) (1.0.0)
Installing collected packages: argparse, nnunet
  Attempting uninstall: nnunet
    Found existing installation: nnunet 1.7.0
    Uninstalling nnunet-1.7.0:
      Successfully uninstalled nnunet-1.7.0
  Running setup.py develop for nnunet
Successfully installed argparse-1.4.0 nnunet-1.7.0


Please cite the following paper when using nnUNet:

Isensee, F., Jaeger, P.F., Kohl, S.A.A. et al. "nnU-Net: a self-configuring method for deep learning-based biomedical image segmentation." Nat Methods (2020). https://doi.org/10.1038/s41592-020-01008-z


If you have questions or suggestions, feel free to open an issue at https://github.com/MIC-DKFZ/nnUNet

###############################################
I am running the following nnUNet: 3d_cascade_fullres
My trainer class is:  <class 'nnunet.training.network_training.nnUNetTrainerV2_CascadeFullRes.nnUNetTrainerV2CascadeFullRes'>
For that I will be using the following configuration:
num_classes:  1
modalities:  {0: 'CT'}
use_mask_for_norm OrderedDict([(0, False)])
keep_only_largest_region None
min_region_size_per_class None
min_size_per_class None
normalization_schemes OrderedDict([(0, 'CT')])
stages...

stage:  0
{'batch_size': 2, 'num_pool_per_axis': [4, 5, 5], 'patch_size': array([ 64, 192, 192]), 'median_patient_size_in_voxels': array([ 93, 318, 318]), 'current_spacing': array([2.5757525 , 1.29418872, 1.29418872]), 'original_spacing': array([2.5       , 0.80273402, 0.80273402]), 'do_dummy_2D_data_aug': False, 'pool_op_kernel_sizes': [[2, 2, 2], [2, 2, 2], [2, 2, 2], [2, 2, 2], [1, 2, 2]], 'conv_kernel_sizes': [[3, 3, 3], [3, 3, 3], [3, 3, 3], [3, 3, 3], [3, 3, 3], [3, 3, 3]]}

stage:  1
{'batch_size': 2, 'num_pool_per_axis': [3, 5, 5], 'patch_size': array([ 40, 224, 224]), 'median_patient_size_in_voxels': array([ 96, 512, 512]), 'current_spacing': array([2.5       , 0.80273402, 0.80273402]), 'original_spacing': array([2.5       , 0.80273402, 0.80273402]), 'do_dummy_2D_data_aug': True, 'pool_op_kernel_sizes': [[1, 2, 2], [2, 2, 2], [2, 2, 2], [2, 2, 2], [1, 2, 2]], 'conv_kernel_sizes': [[1, 3, 3], [3, 3, 3], [3, 3, 3], [3, 3, 3], [3, 3, 3], [3, 3, 3]]}

I am using stage 1 from these plans
I am using batch dice + CE loss

I am using data from this folder:  /exports/lkeb-hpc/smaijer/data/nnUNet_preprocessed/Task510/nnUNetData_plans_v2.1
###############################################
2022-06-03 11:13:30.328014: Using dummy2d data augmentation
loading dataset
loading all case properties
2022-06-03 11:13:41.560658: Using splits from existing split file: /exports/lkeb-hpc/smaijer/data/nnUNet_preprocessed/Task510/splits_final.pkl
2022-06-03 11:13:41.601418: The split file contains 5 splits.
2022-06-03 11:13:41.603743: Desired fold for training: 3
2022-06-03 11:13:41.605740: This split has 191 training and 48 validation cases.
unpacking dataset
done
2022-06-03 11:13:45.673333: loading checkpoint /exports/lkeb-hpc/smaijer/results/nnUNet/3d_cascade_fullres/Task510/nnUNetTrainerV2CascadeFullRes__nnUNetPlansv2.1/fold_3/model_final_checkpoint.model train= True
2022-06-03 11:13:55.250572: lr: 0.0
using pin_memory on device 0
using pin_memory on device 0
2022-06-03 11:14:15.255222: Unable to plot network architecture:
2022-06-03 11:14:15.258487: No module named 'IPython'
2022-06-03 11:14:15.260590: 
printing the network instead:

2022-06-03 11:14:15.263238: Generic_UNet(
  (conv_blocks_localization): ModuleList(
    (0): Sequential(
      (0): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(640, 320, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
      (1): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(320, 320, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
    )
    (1): Sequential(
      (0): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(512, 256, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
      (1): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(256, 256, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
    )
    (2): Sequential(
      (0): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(256, 128, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
      (1): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(128, 128, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
    )
    (3): Sequential(
      (0): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(128, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
      (1): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
    )
    (4): Sequential(
      (0): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(64, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
      (1): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(32, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
    )
  )
  (conv_blocks_context): ModuleList(
    (0): StackedConvLayers(
      (blocks): Sequential(
        (0): ConvDropoutNormNonlin(
          (conv): Conv3d(2, 32, kernel_size=(1, 3, 3), stride=(1, 1, 1), padding=(0, 1, 1))
          (instnorm): InstanceNorm3d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
        )
        (1): ConvDropoutNormNonlin(
          (conv): Conv3d(32, 32, kernel_size=(1, 3, 3), stride=(1, 1, 1), padding=(0, 1, 1))
          (instnorm): InstanceNorm3d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
        )
      )
    )
    (1): StackedConvLayers(
      (blocks): Sequential(
        (0): ConvDropoutNormNonlin(
          (conv): Conv3d(32, 64, kernel_size=(3, 3, 3), stride=(1, 2, 2), padding=(1, 1, 1))
          (instnorm): InstanceNorm3d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
        )
        (1): ConvDropoutNormNonlin(
          (conv): Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (instnorm): InstanceNorm3d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
        )
      )
    )
    (2): StackedConvLayers(
      (blocks): Sequential(
        (0): ConvDropoutNormNonlin(
          (conv): Conv3d(64, 128, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1))
          (instnorm): InstanceNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
        )
        (1): ConvDropoutNormNonlin(
          (conv): Conv3d(128, 128, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (instnorm): InstanceNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
        )
      )
    )
    (3): StackedConvLayers(
      (blocks): Sequential(
        (0): ConvDropoutNormNonlin(
          (conv): Conv3d(128, 256, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1))
          (instnorm): InstanceNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
        )
        (1): ConvDropoutNormNonlin(
          (conv): Conv3d(256, 256, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (instnorm): InstanceNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
        )
      )
    )
    (4): StackedConvLayers(
      (blocks): Sequential(
        (0): ConvDropoutNormNonlin(
          (conv): Conv3d(256, 320, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1))
          (instnorm): InstanceNorm3d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
        )
        (1): ConvDropoutNormNonlin(
          (conv): Conv3d(320, 320, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (instnorm): InstanceNorm3d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
        )
      )
    )
    (5): Sequential(
      (0): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(320, 320, kernel_size=(3, 3, 3), stride=(1, 2, 2), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
      (1): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(320, 320, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
    )
  )
  (td): ModuleList()
  (tu): ModuleList(
    (0): ConvTranspose3d(320, 320, kernel_size=(1, 2, 2), stride=(1, 2, 2), bias=False)
    (1): ConvTranspose3d(320, 256, kernel_size=(2, 2, 2), stride=(2, 2, 2), bias=False)
    (2): ConvTranspose3d(256, 128, kernel_size=(2, 2, 2), stride=(2, 2, 2), bias=False)
    (3): ConvTranspose3d(128, 64, kernel_size=(2, 2, 2), stride=(2, 2, 2), bias=False)
    (4): ConvTranspose3d(64, 32, kernel_size=(1, 2, 2), stride=(1, 2, 2), bias=False)
  )
  (seg_outputs): ModuleList(
    (0): Conv3d(320, 2, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
    (1): Conv3d(256, 2, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
    (2): Conv3d(128, 2, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
    (3): Conv3d(64, 2, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
    (4): Conv3d(32, 2, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
  )
)
2022-06-03 11:14:15.268209: 

2022-06-03 11:14:15.352594: saving checkpoint...
2022-06-03 11:14:17.362399: done, saving took 2.09 seconds
panc_001 (2, 110, 411, 411)
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (2, 110, 411, 411)
patch size: [ 40 224 224]
steps (x, y, and z): [[0, 18, 35, 52, 70], [0, 94, 187], [0, 94, 187]]
number of tiles: 45
computing Gaussian
done
prediction done
panc_010 (2, 104, 623, 623)
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (2, 104, 623, 623)
patch size: [ 40 224 224]
steps (x, y, and z): [[0, 16, 32, 48, 64], [0, 100, 200, 299, 399], [0, 100, 200, 299, 399]]
number of tiles: 125
using precomputed Gaussian
prediction done
panc_016 (2, 85, 493, 493)
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (2, 85, 493, 493)
patch size: [ 40 224 224]
steps (x, y, and z): [[0, 15, 30, 45], [0, 90, 179, 269], [0, 90, 179, 269]]
number of tiles: 64
using precomputed Gaussian
prediction done
panc_018 (2, 87, 430, 430)
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (2, 87, 430, 430)
patch size: [ 40 224 224]
steps (x, y, and z): [[0, 16, 31, 47], [0, 103, 206], [0, 103, 206]]
number of tiles: 36
using precomputed Gaussian
prediction done
panc_029 (2, 99, 498, 498)
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (2, 99, 498, 498)
patch size: [ 40 224 224]
steps (x, y, and z): [[0, 20, 39, 59], [0, 91, 183, 274], [0, 91, 183, 274]]
number of tiles: 64
using precomputed Gaussian
prediction done
panc_049 (2, 87, 514, 514)
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (2, 87, 514, 514)
patch size: [ 40 224 224]
steps (x, y, and z): [[0, 16, 31, 47], [0, 97, 193, 290], [0, 97, 193, 290]]
number of tiles: 64
using precomputed Gaussian
prediction done
panc_050 (2, 85, 461, 461)
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (2, 85, 461, 461)
patch size: [ 40 224 224]
steps (x, y, and z): [[0, 15, 30, 45], [0, 79, 158, 237], [0, 79, 158, 237]]
number of tiles: 64
using precomputed Gaussian
prediction done
panc_070 (2, 106, 556, 556)
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (2, 106, 556, 556)
patch size: [ 40 224 224]
steps (x, y, and z): [[0, 16, 33, 50, 66], [0, 111, 221, 332], [0, 111, 221, 332]]
number of tiles: 80
using precomputed Gaussian
prediction done
panc_081 (2, 94, 411, 411)
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (2, 94, 411, 411)
patch size: [ 40 224 224]
steps (x, y, and z): [[0, 18, 36, 54], [0, 94, 187], [0, 94, 187]]
number of tiles: 36
using precomputed Gaussian
prediction done
panc_083 (2, 83, 491, 491)
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (2, 83, 491, 491)
patch size: [ 40 224 224]
steps (x, y, and z): [[0, 14, 29, 43], [0, 89, 178, 267], [0, 89, 178, 267]]
number of tiles: 64
using precomputed Gaussian
prediction done
panc_087 (2, 154, 411, 411)
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (2, 154, 411, 411)
patch size: [ 40 224 224]
steps (x, y, and z): [[0, 19, 38, 57, 76, 95, 114], [0, 94, 187], [0, 94, 187]]
number of tiles: 63
using precomputed Gaussian
prediction done
panc_098 (2, 147, 592, 592)
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (2, 147, 592, 592)
patch size: [ 40 224 224]
steps (x, y, and z): [[0, 18, 36, 54, 71, 89, 107], [0, 92, 184, 276, 368], [0, 92, 184, 276, 368]]
number of tiles: 175
using precomputed Gaussian
prediction done
panc_110 (2, 98, 623, 623)
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (2, 98, 623, 623)
patch size: [ 40 224 224]
steps (x, y, and z): [[0, 19, 39, 58], [0, 100, 200, 299, 399], [0, 100, 200, 299, 399]]
number of tiles: 100
using precomputed Gaussian
prediction done
panc_120 (2, 166, 436, 436)
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (2, 166, 436, 436)
patch size: [ 40 224 224]
steps (x, y, and z): [[0, 18, 36, 54, 72, 90, 108, 126], [0, 106, 212], [0, 106, 212]]
number of tiles: 72
using precomputed Gaussian
prediction done
panc_126 (2, 73, 468, 468)
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (2, 73, 468, 468)
patch size: [ 40 224 224]
steps (x, y, and z): [[0, 16, 33], [0, 81, 163, 244], [0, 81, 163, 244]]
number of tiles: 48
using precomputed Gaussian
prediction done
panc_127 (2, 126, 554, 554)
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (2, 126, 554, 554)
patch size: [ 40 224 224]
steps (x, y, and z): [[0, 17, 34, 52, 69, 86], [0, 110, 220, 330], [0, 110, 220, 330]]
number of tiles: 96
using precomputed Gaussian
prediction done
panc_130 (2, 156, 419, 419)
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (2, 156, 419, 419)
patch size: [ 40 224 224]
steps (x, y, and z): [[0, 19, 39, 58, 77, 97, 116], [0, 98, 195], [0, 98, 195]]
number of tiles: 63
using precomputed Gaussian
prediction done
panc_149 (2, 77, 488, 488)
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (2, 77, 488, 488)
patch size: [ 40 224 224]
steps (x, y, and z): [[0, 18, 37], [0, 88, 176, 264], [0, 88, 176, 264]]
number of tiles: 48
using precomputed Gaussian
prediction done
panc_158 (2, 132, 605, 605)
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (2, 132, 605, 605)
patch size: [ 40 224 224]
steps (x, y, and z): [[0, 18, 37, 55, 74, 92], [0, 95, 190, 286, 381], [0, 95, 190, 286, 381]]
number of tiles: 150
using precomputed Gaussian
prediction done
panc_160 (2, 75, 523, 523)
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (2, 75, 523, 523)
patch size: [ 40 224 224]
steps (x, y, and z): [[0, 18, 35], [0, 100, 199, 299], [0, 100, 199, 299]]
number of tiles: 48
using precomputed Gaussian
prediction done
panc_169 (2, 87, 473, 473)
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (2, 87, 473, 473)
patch size: [ 40 224 224]
steps (x, y, and z): [[0, 16, 31, 47], [0, 83, 166, 249], [0, 83, 166, 249]]
number of tiles: 64
using precomputed Gaussian
prediction done
panc_172 (2, 95, 472, 472)
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (2, 95, 472, 472)
patch size: [ 40 224 224]
steps (x, y, and z): [[0, 18, 37, 55], [0, 83, 165, 248], [0, 83, 165, 248]]
number of tiles: 64
using precomputed Gaussian
prediction done
panc_173 (2, 81, 442, 442)
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (2, 81, 442, 442)
patch size: [ 40 224 224]
steps (x, y, and z): [[0, 14, 27, 41], [0, 109, 218], [0, 109, 218]]
number of tiles: 36
using precomputed Gaussian
prediction done
panc_181 (2, 87, 623, 623)
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (2, 87, 623, 623)
patch size: [ 40 224 224]
steps (x, y, and z): [[0, 16, 31, 47], [0, 100, 200, 299, 399], [0, 100, 200, 299, 399]]
number of tiles: 100
using precomputed Gaussian
prediction done
panc_212 (2, 97, 557, 557)
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (2, 97, 557, 557)
patch size: [ 40 224 224]
steps (x, y, and z): [[0, 19, 38, 57], [0, 111, 222, 333], [0, 111, 222, 333]]
number of tiles: 64
using precomputed Gaussian
prediction done
panc_214 (2, 109, 542, 542)
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (2, 109, 542, 542)
patch size: [ 40 224 224]
steps (x, y, and z): [[0, 17, 34, 52, 69], [0, 106, 212, 318], [0, 106, 212, 318]]
number of tiles: 80
using precomputed Gaussian
prediction done
panc_229 (2, 87, 561, 561)
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (2, 87, 561, 561)
patch size: [ 40 224 224]
steps (x, y, and z): [[0, 16, 31, 47], [0, 84, 168, 253, 337], [0, 84, 168, 253, 337]]
number of tiles: 100
using precomputed Gaussian
prediction done
panc_242 (2, 101, 556, 556)
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (2, 101, 556, 556)
patch size: [ 40 224 224]
steps (x, y, and z): [[0, 15, 30, 46, 61], [0, 111, 221, 332], [0, 111, 221, 332]]
number of tiles: 80
using precomputed Gaussian
prediction done
panc_279 (2, 80, 448, 448)
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (2, 80, 448, 448)
patch size: [ 40 224 224]
steps (x, y, and z): [[0, 20, 40], [0, 112, 224], [0, 112, 224]]
number of tiles: 27
using precomputed Gaussian
prediction done
panc_284 (2, 85, 481, 481)
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (2, 85, 481, 481)
patch size: [ 40 224 224]
steps (x, y, and z): [[0, 15, 30, 45], [0, 86, 171, 257], [0, 86, 171, 257]]
number of tiles: 64
using precomputed Gaussian
prediction done
panc_292 (2, 93, 533, 533)
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (2, 93, 533, 533)
patch size: [ 40 224 224]
steps (x, y, and z): [[0, 18, 35, 53], [0, 103, 206, 309], [0, 103, 206, 309]]
number of tiles: 64
using precomputed Gaussian
prediction done
panc_309 (2, 95, 497, 497)
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (2, 95, 497, 497)
patch size: [ 40 224 224]
steps (x, y, and z): [[0, 18, 37, 55], [0, 91, 182, 273], [0, 91, 182, 273]]
number of tiles: 64
using precomputed Gaussian
prediction done
panc_316 (2, 89, 462, 462)
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (2, 89, 462, 462)
patch size: [ 40 224 224]
steps (x, y, and z): [[0, 16, 33, 49], [0, 79, 159, 238], [0, 79, 159, 238]]
number of tiles: 64
using precomputed Gaussian
prediction done
panc_326 (2, 89, 607, 607)
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (2, 89, 607, 607)
patch size: [ 40 224 224]
steps (x, y, and z): [[0, 16, 33, 49], [0, 96, 192, 287, 383], [0, 96, 192, 287, 383]]
number of tiles: 100
using precomputed Gaussian
prediction done
panc_327 (2, 99, 623, 623)
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (2, 99, 623, 623)
patch size: [ 40 224 224]
steps (x, y, and z): [[0, 20, 39, 59], [0, 100, 200, 299, 399], [0, 100, 200, 299, 399]]
number of tiles: 100
using precomputed Gaussian
prediction done
panc_330 (2, 89, 518, 518)
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (2, 89, 518, 518)
patch size: [ 40 224 224]
steps (x, y, and z): [[0, 16, 33, 49], [0, 98, 196, 294], [0, 98, 196, 294]]
number of tiles: 64
using precomputed Gaussian
prediction done
panc_347 (2, 89, 471, 471)
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (2, 89, 471, 471)
patch size: [ 40 224 224]
steps (x, y, and z): [[0, 16, 33, 49], [0, 82, 165, 247], [0, 82, 165, 247]]
number of tiles: 64
using precomputed Gaussian
prediction done
panc_348 (2, 89, 473, 473)
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (2, 89, 473, 473)
patch size: [ 40 224 224]
steps (x, y, and z): [[0, 16, 33, 49], [0, 83, 166, 249], [0, 83, 166, 249]]
number of tiles: 64
using precomputed Gaussian
prediction done
panc_350 (2, 89, 463, 463)
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (2, 89, 463, 463)
patch size: [ 40 224 224]
steps (x, y, and z): [[0, 16, 33, 49], [0, 80, 159, 239], [0, 80, 159, 239]]
number of tiles: 64
using precomputed Gaussian
prediction done
panc_356 (2, 168, 432, 432)
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (2, 168, 432, 432)
patch size: [ 40 224 224]
steps (x, y, and z): [[0, 18, 37, 55, 73, 91, 110, 128], [0, 104, 208], [0, 104, 208]]
number of tiles: 72
using precomputed Gaussian
prediction done
panc_357 (2, 88, 404, 404)
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (2, 88, 404, 404)
patch size: [ 40 224 224]
steps (x, y, and z): [[0, 16, 32, 48], [0, 90, 180], [0, 90, 180]]
number of tiles: 36
using precomputed Gaussian
prediction done
panc_372 (2, 93, 623, 623)
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (2, 93, 623, 623)
patch size: [ 40 224 224]
steps (x, y, and z): [[0, 18, 35, 53], [0, 100, 200, 299, 399], [0, 100, 200, 299, 399]]
number of tiles: 100
using precomputed Gaussian
prediction done
panc_376 (2, 109, 548, 548)
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (2, 109, 548, 548)
patch size: [ 40 224 224]
steps (x, y, and z): [[0, 17, 34, 52, 69], [0, 108, 216, 324], [0, 108, 216, 324]]
number of tiles: 80
using precomputed Gaussian
prediction done
panc_379 (2, 192, 443, 443)
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (2, 192, 443, 443)
patch size: [ 40 224 224]
steps (x, y, and z): [[0, 19, 38, 57, 76, 95, 114, 133, 152], [0, 110, 219], [0, 110, 219]]
number of tiles: 81
using precomputed Gaussian
prediction done
panc_382 (2, 111, 521, 521)
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (2, 111, 521, 521)
patch size: [ 40 224 224]
steps (x, y, and z): [[0, 18, 36, 53, 71], [0, 99, 198, 297], [0, 99, 198, 297]]
number of tiles: 80
using precomputed Gaussian
prediction done
panc_385 (2, 98, 536, 536)
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (2, 98, 536, 536)
patch size: [ 40 224 224]
steps (x, y, and z): [[0, 19, 39, 58], [0, 104, 208, 312], [0, 104, 208, 312]]
number of tiles: 64
using precomputed Gaussian
prediction done
panc_401 (2, 180, 461, 461)
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (2, 180, 461, 461)
patch size: [ 40 224 224]
steps (x, y, and z): [[0, 20, 40, 60, 80, 100, 120, 140], [0, 79, 158, 237], [0, 79, 158, 237]]
number of tiles: 128
using precomputed Gaussian
prediction done
panc_409 (2, 210, 502, 502)
debug: mirroring True mirror_axes (0, 1, 2)
step_size: 0.5
do mirror: True
data shape: (2, 210, 502, 502)
patch size: [ 40 224 224]
steps (x, y, and z): [[0, 19, 38, 57, 76, 94, 113, 132, 151, 170], [0, 93, 185, 278], [0, 93, 185, 278]]
number of tiles: 160
using precomputed Gaussian
prediction done
2022-06-03 11:43:15.777195: finished prediction
2022-06-03 11:43:15.780595: evaluation of raw predictions
2022-06-03 11:43:27.830615: determining postprocessing
Foreground vs background
before: 0.7865543975073489
after:  0.7848629330154697
Only one class present, no need to do each class separately as this is covered in fg vs bg
done
for which classes:
[]
min_object_sizes
None
force_separate_z: None interpolation order: 1
separate z: True lowres axis [0]
separate z, order in z is 0 order inplane is 1
force_separate_z: None interpolation order: 1
separate z: True lowres axis [0]
separate z, order in z is 0 order inplane is 1
force_separate_z: None interpolation order: 1
separate z: True lowres axis [0]
separate z, order in z is 0 order inplane is 1
force_separate_z: None interpolation order: 1
separate z: True lowres axis [0]
separate z, order in z is 0 order inplane is 1
force_separate_z: None interpolation order: 1
separate z: True lowres axis [0]
separate z, order in z is 0 order inplane is 1
force_separate_z: None interpolation order: 1
separate z: True lowres axis [0]
separate z, order in z is 0 order inplane is 1
force_separate_z: None interpolation order: 1
separate z: True lowres axis [0]
separate z, order in z is 0 order inplane is 1
force_separate_z: None interpolation order: 1
separate z: True lowres axis [0]
separate z, order in z is 0 order inplane is 1
force_separate_z: None interpolation order: 1
separate z: True lowres axis [0]
separate z, order in z is 0 order inplane is 1
force_separate_z: None interpolation order: 1
separate z: True lowres axis [0]
separate z, order in z is 0 order inplane is 1
force_separate_z: None interpolation order: 1
separate z: True lowres axis [0]
separate z, order in z is 0 order inplane is 1
force_separate_z: None interpolation order: 1
separate z: True lowres axis [0]
separate z, order in z is 0 order inplane is 1
force_separate_z: None interpolation order: 1
separate z: True lowres axis [0]
separate z, order in z is 0 order inplane is 1
force_separate_z: None interpolation order: 1
separate z: True lowres axis [0]
separate z, order in z is 0 order inplane is 1
force_separate_z: None interpolation order: 1
separate z: True lowres axis [0]
separate z, order in z is 0 order inplane is 1
force_separate_z: None interpolation order: 1
separate z: True lowres axis [0]
separate z, order in z is 0 order inplane is 1
force_separate_z: None interpolation order: 1
separate z: True lowres axis [0]
separate z, order in z is 0 order inplane is 1
force_separate_z: None interpolation order: 1
separate z: True lowres axis [0]
separate z, order in z is 0 order inplane is 1
force_separate_z: None interpolation order: 1
separate z: True lowres axis [0]
separate z, order in z is 0 order inplane is 1
force_separate_z: None interpolation order: 1
separate z: True lowres axis [0]
separate z, order in z is 0 order inplane is 1
force_separate_z: None interpolation order: 1
separate z: True lowres axis [0]
separate z, order in z is 0 order inplane is 1
force_separate_z: None interpolation order: 1
separate z: True lowres axis [0]
separate z, order in z is 0 order inplane is 1
force_separate_z: None interpolation order: 1
separate z: True lowres axis [0]
separate z, order in z is 0 order inplane is 1
force_separate_z: None interpolation order: 1
separate z: True lowres axis [0]
separate z, order in z is 0 order inplane is 1
force_separate_z: None interpolation order: 1
separate z: True lowres axis [0]
separate z, order in z is 0 order inplane is 1
force_separate_z: None interpolation order: 1
separate z: True lowres axis [0]
separate z, order in z is 0 order inplane is 1
force_separate_z: None interpolation order: 1
separate z: True lowres axis [0]
separate z, order in z is 0 order inplane is 1
force_separate_z: None interpolation order: 1
separate z: True lowres axis [0]
separate z, order in z is 0 order inplane is 1
force_separate_z: None interpolation order: 1
separate z: True lowres axis [0]
separate z, order in z is 0 order inplane is 1
force_separate_z: None interpolation order: 1
separate z: True lowres axis [0]
separate z, order in z is 0 order inplane is 1
force_separate_z: None interpolation order: 1
separate z: True lowres axis [0]
separate z, order in z is 0 order inplane is 1
force_separate_z: None interpolation order: 1
separate z: True lowres axis [0]
separate z, order in z is 0 order inplane is 1
force_separate_z: None interpolation order: 1
separate z: True lowres axis [0]
separate z, order in z is 0 order inplane is 1
force_separate_z: None interpolation order: 1
separate z: True lowres axis [0]
separate z, order in z is 0 order inplane is 1
force_separate_z: None interpolation order: 1
separate z: True lowres axis [0]
separate z, order in z is 0 order inplane is 1
force_separate_z: None interpolation order: 1
separate z: True lowres axis [0]
separate z, order in z is 0 order inplane is 1
force_separate_z: None interpolation order: 1
separate z: True lowres axis [0]
separate z, order in z is 0 order inplane is 1
force_separate_z: None interpolation order: 1
separate z: True lowres axis [0]
separate z, order in z is 0 order inplane is 1
force_separate_z: None interpolation order: 1
separate z: True lowres axis [0]
separate z, order in z is 0 order inplane is 1
force_separate_z: None interpolation order: 1
separate z: True lowres axis [0]
separate z, order in z is 0 order inplane is 1
force_separate_z: None interpolation order: 1
separate z: True lowres axis [0]
separate z, order in z is 0 order inplane is 1
force_separate_z: None interpolation order: 1
separate z: True lowres axis [0]
separate z, order in z is 0 order inplane is 1
force_separate_z: None interpolation order: 1
separate z: True lowres axis [0]
separate z, order in z is 0 order inplane is 1
force_separate_z: None interpolation order: 1
separate z: True lowres axis [0]
separate z, order in z is 0 order inplane is 1
force_separate_z: None interpolation order: 1
separate z: True lowres axis [0]
separate z, order in z is 0 order inplane is 1
force_separate_z: None interpolation order: 1
separate z: True lowres axis [0]
separate z, order in z is 0 order inplane is 1
force_separate_z: None interpolation order: 1
separate z: True lowres axis [0]
separate z, order in z is 0 order inplane is 1
force_separate_z: None interpolation order: 1
separate z: True lowres axis [0]
separate z, order in z is 0 order inplane is 1
done
Program finished with exit code 0 at: Fri Jun  3 11:12:50 CEST 2022
