#!/bin/bash
#SBATCH -J PancreasAll
#SBATCH -p LKEBgpu
#SBATCH -N 1
#SBATCH --ntasks=1
#SBATCH --cpus-per-task=8
#SBATCH --mem=64GB
#SBATCH --gres=gpu:RTX6000:1
#SBATCH --error=/home/smaijer/logs/all/603/job.%J.err
#SBATCH --output=/home/smaijer/logs/all/603/job.%J.out
#SBATCH --mail-type=BEGIN,END,FAIL
#SBATCH --mail-user=susy.maijer@lumc.nl

# Prepare nnUnet
echo "Starting at Mon Nov  7 10:41:57 CET 2022"

echo "Running on hosts: $SLURM_JOB_NODELIST"
echo "Running on $SLURM_JOB_NUM_NODES nodes."
echo "Running $SLURM_NTASKS tasks."
echo "CPUs on node: $SLURM_CPUS_ON_NODE."
echo "Account: $SLURM_JOB_ACCOUNT"
echo "Job ID: $SLURM_JOB_ID"
echo "Job name: $SLURM_JOB_NAME"
echo "Node running script: $SLURMD_NODENAME"
echo "Submit host: $SLURM_SUBMIT_HOST"
echo "GPUS: $CUDA_VISIBLE_DEVICES or $SLURM_STEP_GPUS"
nvidia-smi
echo "Current working directory is /home/smaijer"

echo Load all modules..
module purge
module add system/python/3.10.2
echo Done with loading all modules. Modules:
module li
echo Activate conda env nnunet..
source /exports/lkeb-hpc/smaijer/venv_environments/pancreasThesis/bin/activate
echo Verifying environment variables:
conda env config vars list
echo Installing hidden layer and nnUnet..
python -m pip install --upgrade git+https://github.com/FabianIsensee/hiddenlayer.git@more_plotted_details#egg=hiddenlayer
python -m pip install -editable /home/smaijer/code/nnUNet


echo Start preprocessing..
if [ y == y ];
then
   nnUNet_plan_and_preprocess -t 603 --verify_dataset_integrity -tl 4 -tf 4
fi

echo Done preprocessing! Start training all the folds..
if [ -z  ];
then

    if [ ! -z  ];
    then
         echo Run with specific identifier 
         nnUNet_train 3d_fullres nnUNetTrainerV2 603 0 -p 
         nnUNet_train 3d_fullres nnUNetTrainerV2 603 1 -p 
         nnUNet_train 3d_fullres nnUNetTrainerV2 603 2 -p 
         nnUNet_train 3d_fullres nnUNetTrainerV2 603 3 -p 
         nnUNet_train 3d_fullres nnUNetTrainerV2 603 4 -p 
    else
        nnUNet_train 3d_fullres nnUNetTrainerV2 603 0
         nnUNet_train 3d_fullres nnUNetTrainerV2 603 1
         nnUNet_train 3d_fullres nnUNetTrainerV2 603 2
         nnUNet_train 3d_fullres nnUNetTrainerV2 603 3
         nnUNet_train 3d_fullres nnUNetTrainerV2 603 4 
    fi

    echo Done training all the folds! Now start the same command but with continue option, to generate log files
    
    if [ ! -z  ];
    then
	 nnUNet_train 3d_fullres nnUNetTrainerV2 603 0 -p  -c --val_disable_overwrite
         nnUNet_train 3d_fullres nnUNetTrainerV2 603 1 -p  -c --val_disable_overwrite
         nnUNet_train 3d_fullres nnUNetTrainerV2 603 2 -p  -c --val_disable_overwrite
         nnUNet_train 3d_fullres nnUNetTrainerV2 603 3 -p  -c --val_disable_overwrite
         nnUNet_train 3d_fullres nnUNetTrainerV2 603 4 -p  -c --val_disable_overwrite
    else
         nnUNet_train 3d_fullres nnUNetTrainerV2 603 0 -c --val_disable_overwrite
         nnUNet_train 3d_fullres nnUNetTrainerV2 603 1 -c --val_disable_overwrite
         nnUNet_train 3d_fullres nnUNetTrainerV2 603 2 -c --val_disable_overwrite
         nnUNet_train 3d_fullres nnUNetTrainerV2 603 3 -c --val_disable_overwrite
         nnUNet_train 3d_fullres nnUNetTrainerV2 603 4 -c --val_disable_overwrite
    fi

else
    echo Use pretrained!
    nnUNet_train 3d_fullres nnUNetTrainerV2 603 0 -pretrained_weights /fold_0/model_best.model
    nnUNet_train 3d_fullres nnUNetTrainerV2 603 1 -pretrained_weights /fold_1/model_best.model
    nnUNet_train 3d_fullres nnUNetTrainerV2 603 2 -pretrained_weights /fold_2/model_best.model
    nnUNet_train 3d_fullres nnUNetTrainerV2 603 3 -pretrained_weights /fold_3/model_best.model
    nnUNet_train 3d_fullres nnUNetTrainerV2 603 4 -pretrained_weights /fold_4/model_best.model

    echo Done training all the folds! Now start the same command but with continue option, to generate log files
    nnUNet_train 3d_fullres nnUNetTrainerV2 603 0 -c -pretrained_weights /fold_0/model_best.model --val_disable_overwrite
    nnUNet_train 3d_fullres nnUNetTrainerV2 603 1 -c -pretrained_weights /fold_1/model_best.model --val_disable_overwrite
    nnUNet_train 3d_fullres nnUNetTrainerV2 603 2 -c -pretrained_weights /fold_2/model_best.model --val_disable_overwrite
    nnUNet_train 3d_fullres nnUNetTrainerV2 603 3 -c -pretrained_weights /fold_3/model_best.model --val_disable_overwrite
    nnUNet_train 3d_fullres nnUNetTrainerV2 603 4 -c -pretrained_weights /fold_4/model_best.model --val_disable_overwrite
fi

echo Start postprocessing..
if [ -z  ];
then
    echo Postprocessing with default plans
    nnUNet_determine_postprocessing -t 603 -m 3d_fullres -tr nnUNetTrainerV2

    echo Done postprocessing! Now start inferencing its own train and test files.
    mkdir -p /exports/lkeb-hpc/smaijer/output/603/3d_fullres/nnUNetTrainerV2/603/imagesTr
    mkdir -p /exports/lkeb-hpc/smaijer/output/603/3d_fullres/nnUNetTrainerV2/603/imagesTs
    nnUNet_predict -i /exports/lkeb-hpc/smaijer/data/nnUNet_raw_data_base/nnUNet_raw_data/Task603/imagesTr -o /exports/lkeb-hpc/smaijer/output/603/3d_fullres/nnUNetTrainerV2/603/imagesTr -t 603 -m 3d_fullres -tr nnUNetTrainerV2
    nnUNet_predict -i /exports/lkeb-hpc/smaijer/data/nnUNet_raw_data_base/nnUNet_raw_data/Task603/imagesTs -o /exports/lkeb-hpc/smaijer/output/603/3d_fullres/nnUNetTrainerV2/603/imagesTs -t 603 -m 3d_fullres -tr nnUNetTrainerV2

    echo Done inferencing! Now start the evaluation.
    nnUNet_evaluate_folder -ref /exports/lkeb-hpc/smaijer/data/nnUNet_raw_data_base/nnUNet_raw_data/Task603/labelsTr -pred /exports/lkeb-hpc/smaijer/output/603/3d_fullres/nnUNetTrainerV2/603/imagesTr -l 1
    nnUNet_evaluate_folder -ref /exports/lkeb-hpc/smaijer/data/nnUNet_raw_data_base/nnUNet_raw_data/Task603/labelsTs -pred /exports/lkeb-hpc/smaijer/output/603/3d_fullres/nnUNetTrainerV2/603/imagesTs -l 1
fi

echo "Program finished with exit code 0 at: Mon Nov  7 10:41:57 CET 2022"
